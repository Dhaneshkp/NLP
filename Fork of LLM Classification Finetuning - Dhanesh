{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":86518,"databundleVersionId":9809560,"sourceType":"competition"},{"sourceId":205013,"sourceType":"modelInstanceVersion","modelInstanceId":4686,"modelId":2820}],"dockerImageVersionId":31090,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np \nimport pandas as pd \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.feature_selection import SelectKBest, chi2\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import cross_val_score\n\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"editable":false,"execution":{"iopub.status.busy":"2025-09-09T12:27:10.835900Z","iopub.execute_input":"2025-09-09T12:27:10.836861Z","iopub.status.idle":"2025-09-09T12:27:10.865054Z","shell.execute_reply.started":"2025-09-09T12:27:10.836789Z","shell.execute_reply":"2025-09-09T12:27:10.863424Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/deberta_v3/keras/deberta_v3_base_en/3/config.json\n/kaggle/input/deberta_v3/keras/deberta_v3_base_en/3/tokenizer.json\n/kaggle/input/deberta_v3/keras/deberta_v3_base_en/3/metadata.json\n/kaggle/input/deberta_v3/keras/deberta_v3_base_en/3/model.weights.h5\n/kaggle/input/deberta_v3/keras/deberta_v3_base_en/3/assets/tokenizer/vocabulary.spm\n/kaggle/input/llm-classification-finetuning/sample_submission.csv\n/kaggle/input/llm-classification-finetuning/train.csv\n/kaggle/input/llm-classification-finetuning/test.csv\n","output_type":"stream"}],"execution_count":361},{"cell_type":"code","source":"\n\n#!pip install -q sentence-transformers\n\nfrom sentence_transformers import SentenceTransformer\n\n#model = SentenceTransformer(\"all-mpnet-base-v2\")\n","metadata":{"trusted":true,"editable":false,"execution":{"iopub.status.busy":"2025-09-09T12:27:10.868448Z","iopub.execute_input":"2025-09-09T12:27:10.869107Z","iopub.status.idle":"2025-09-09T12:27:10.890595Z","shell.execute_reply.started":"2025-09-09T12:27:10.869014Z","shell.execute_reply":"2025-09-09T12:27:10.889405Z"}},"outputs":[],"execution_count":362},{"cell_type":"code","source":"\n#model.save(\"/kaggle/working/all-mpnet-base-v2\")\n","metadata":{"trusted":true,"editable":false,"execution":{"iopub.status.busy":"2025-09-09T12:27:10.893688Z","iopub.execute_input":"2025-09-09T12:27:10.894262Z","iopub.status.idle":"2025-09-09T12:27:10.925261Z","shell.execute_reply.started":"2025-09-09T12:27:10.894223Z","shell.execute_reply":"2025-09-09T12:27:10.923239Z"}},"outputs":[],"execution_count":363},{"cell_type":"code","source":"from transformers import AutoModel, AutoTokenizer\n\n#tokenizer = AutoTokenizer.from_pretrained(\"/kaggle/input/qwen-llm\")\n#model = AutoModel.from_pretrained(\"/kaggle/input/qwen-llm\")\n\n","metadata":{"trusted":true,"editable":false,"execution":{"iopub.status.busy":"2025-09-09T12:27:10.927935Z","iopub.execute_input":"2025-09-09T12:27:10.928766Z","iopub.status.idle":"2025-09-09T12:27:10.965613Z","shell.execute_reply.started":"2025-09-09T12:27:10.928711Z","shell.execute_reply":"2025-09-09T12:27:10.963861Z"}},"outputs":[],"execution_count":364},{"cell_type":"code","source":"submission_test = pd.read_csv(\"/kaggle/input/llm-classification-finetuning/sample_submission.csv\")\nsubmission_test","metadata":{"trusted":true,"editable":false,"execution":{"iopub.status.busy":"2025-09-09T12:27:10.970124Z","iopub.execute_input":"2025-09-09T12:27:10.970786Z","iopub.status.idle":"2025-09-09T12:27:11.016290Z","shell.execute_reply.started":"2025-09-09T12:27:10.970742Z","shell.execute_reply":"2025-09-09T12:27:11.012520Z"}},"outputs":[{"execution_count":365,"output_type":"execute_result","data":{"text/plain":"        id  winner_model_a  winner_model_b  winner_tie\n0   136060        0.333333        0.333333    0.333333\n1   211333        0.333333        0.333333    0.333333\n2  1233961        0.333333        0.333333    0.333333","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>winner_model_a</th>\n      <th>winner_model_b</th>\n      <th>winner_tie</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>136060</td>\n      <td>0.333333</td>\n      <td>0.333333</td>\n      <td>0.333333</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>211333</td>\n      <td>0.333333</td>\n      <td>0.333333</td>\n      <td>0.333333</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1233961</td>\n      <td>0.333333</td>\n      <td>0.333333</td>\n      <td>0.333333</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":365},{"cell_type":"code","source":"df_train = pd.read_csv(\"/kaggle/input/llm-classification-finetuning/train.csv\")\ndf_train","metadata":{"trusted":true,"editable":false,"execution":{"iopub.status.busy":"2025-09-09T12:27:11.022960Z","iopub.execute_input":"2025-09-09T12:27:11.023516Z","iopub.status.idle":"2025-09-09T12:27:13.661218Z","shell.execute_reply.started":"2025-09-09T12:27:11.023490Z","shell.execute_reply":"2025-09-09T12:27:13.659143Z"}},"outputs":[{"execution_count":366,"output_type":"execute_result","data":{"text/plain":"               id             model_a              model_b  \\\n0           30192  gpt-4-1106-preview           gpt-4-0613   \n1           53567           koala-13b           gpt-4-0613   \n2           65089  gpt-3.5-turbo-0613       mistral-medium   \n3           96401    llama-2-13b-chat  mistral-7b-instruct   \n4          198779           koala-13b   gpt-3.5-turbo-0314   \n...           ...                 ...                  ...   \n57472  4294656694          gpt-4-0613             claude-1   \n57473  4294692063          claude-2.0     llama-2-13b-chat   \n57474  4294710549            claude-1           alpaca-13b   \n57475  4294899228              palm-2       tulu-2-dpo-70b   \n57476  4294947231  gemini-pro-dev-api   gpt-4-1106-preview   \n\n                                                  prompt  \\\n0      [\"Is it morally right to try to have a certain...   \n1      [\"What is the difference between marriage lice...   \n2      [\"explain function calling. how would you call...   \n3      [\"How can I create a test set for a very rare ...   \n4      [\"What is the best way to travel from Tel-Aviv...   \n...                                                  ...   \n57472  [\"A simple mnemonic for \\u03c0:\\n\\\"How I wish ...   \n57473  [\"In python, implement a naive Bayes with gaus...   \n57474  [\"is it unethical to work on building weapons?...   \n57475  [\"If a bait contains 0,0025% bromadiolon then ...   \n57476  [\"three kids eat three apples in three days, h...   \n\n                                              response_a  \\\n0      [\"The question of whether it is morally right ...   \n1      [\"A marriage license is a legal document that ...   \n2      [\"Function calling is the process of invoking ...   \n3      [\"Creating a test set for a very rare category...   \n4      [\"The best way to travel from Tel Aviv to Jeru...   \n...                                                  ...   \n57472  [\"Sure, let's break it down:\\n\\n1. \\\"How\\\" has...   \n57473  [\"Here is an implementation of a naive Bayes c...   \n57474  [\"Working on weapons technology raises some et...   \n57475  [\"Bromadiolone is a rodenticide which is most ...   \n57476                                      [\"27 apples\"]   \n\n                                              response_b  winner_model_a  \\\n0      [\"As an AI, I don't have personal beliefs or o...               1   \n1      [\"A marriage license and a marriage certificat...               0   \n2      [\"Function calling is the process of invoking ...               0   \n3      [\"When building a classifier for a very rare c...               1   \n4      [\"The best way to travel from Tel-Aviv to Jeru...               0   \n...                                                  ...             ...   \n57472  [\"Here is how that mnemonic represents the dig...               1   \n57473  [\"Sure! Here's an implementation of a naive Ba...               1   \n57474  [\"It depends on the context. Weapons can be us...               1   \n57475  [\"As an AI language model, I do not promote or...               0   \n57476  [\"If three kids eat three apples in three days...               1   \n\n       winner_model_b  winner_tie  \n0                   0           0  \n1                   1           0  \n2                   0           1  \n3                   0           0  \n4                   1           0  \n...               ...         ...  \n57472               0           0  \n57473               0           0  \n57474               0           0  \n57475               1           0  \n57476               0           0  \n\n[57477 rows x 9 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>model_a</th>\n      <th>model_b</th>\n      <th>prompt</th>\n      <th>response_a</th>\n      <th>response_b</th>\n      <th>winner_model_a</th>\n      <th>winner_model_b</th>\n      <th>winner_tie</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>30192</td>\n      <td>gpt-4-1106-preview</td>\n      <td>gpt-4-0613</td>\n      <td>[\"Is it morally right to try to have a certain...</td>\n      <td>[\"The question of whether it is morally right ...</td>\n      <td>[\"As an AI, I don't have personal beliefs or o...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>53567</td>\n      <td>koala-13b</td>\n      <td>gpt-4-0613</td>\n      <td>[\"What is the difference between marriage lice...</td>\n      <td>[\"A marriage license is a legal document that ...</td>\n      <td>[\"A marriage license and a marriage certificat...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>65089</td>\n      <td>gpt-3.5-turbo-0613</td>\n      <td>mistral-medium</td>\n      <td>[\"explain function calling. how would you call...</td>\n      <td>[\"Function calling is the process of invoking ...</td>\n      <td>[\"Function calling is the process of invoking ...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>96401</td>\n      <td>llama-2-13b-chat</td>\n      <td>mistral-7b-instruct</td>\n      <td>[\"How can I create a test set for a very rare ...</td>\n      <td>[\"Creating a test set for a very rare category...</td>\n      <td>[\"When building a classifier for a very rare c...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>198779</td>\n      <td>koala-13b</td>\n      <td>gpt-3.5-turbo-0314</td>\n      <td>[\"What is the best way to travel from Tel-Aviv...</td>\n      <td>[\"The best way to travel from Tel Aviv to Jeru...</td>\n      <td>[\"The best way to travel from Tel-Aviv to Jeru...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>57472</th>\n      <td>4294656694</td>\n      <td>gpt-4-0613</td>\n      <td>claude-1</td>\n      <td>[\"A simple mnemonic for \\u03c0:\\n\\\"How I wish ...</td>\n      <td>[\"Sure, let's break it down:\\n\\n1. \\\"How\\\" has...</td>\n      <td>[\"Here is how that mnemonic represents the dig...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>57473</th>\n      <td>4294692063</td>\n      <td>claude-2.0</td>\n      <td>llama-2-13b-chat</td>\n      <td>[\"In python, implement a naive Bayes with gaus...</td>\n      <td>[\"Here is an implementation of a naive Bayes c...</td>\n      <td>[\"Sure! Here's an implementation of a naive Ba...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>57474</th>\n      <td>4294710549</td>\n      <td>claude-1</td>\n      <td>alpaca-13b</td>\n      <td>[\"is it unethical to work on building weapons?...</td>\n      <td>[\"Working on weapons technology raises some et...</td>\n      <td>[\"It depends on the context. Weapons can be us...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>57475</th>\n      <td>4294899228</td>\n      <td>palm-2</td>\n      <td>tulu-2-dpo-70b</td>\n      <td>[\"If a bait contains 0,0025% bromadiolon then ...</td>\n      <td>[\"Bromadiolone is a rodenticide which is most ...</td>\n      <td>[\"As an AI language model, I do not promote or...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>57476</th>\n      <td>4294947231</td>\n      <td>gemini-pro-dev-api</td>\n      <td>gpt-4-1106-preview</td>\n      <td>[\"three kids eat three apples in three days, h...</td>\n      <td>[\"27 apples\"]</td>\n      <td>[\"If three kids eat three apples in three days...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>57477 rows × 9 columns</p>\n</div>"},"metadata":{}}],"execution_count":366},{"cell_type":"code","source":"df_test = pd.read_csv(\"/kaggle/input/llm-classification-finetuning/test.csv\")\ndf_test","metadata":{"trusted":true,"editable":false,"execution":{"iopub.status.busy":"2025-09-09T12:27:13.663484Z","iopub.execute_input":"2025-09-09T12:27:13.665074Z","iopub.status.idle":"2025-09-09T12:27:13.683542Z","shell.execute_reply.started":"2025-09-09T12:27:13.664832Z","shell.execute_reply":"2025-09-09T12:27:13.682217Z"}},"outputs":[{"execution_count":367,"output_type":"execute_result","data":{"text/plain":"        id                                             prompt  \\\n0   136060  [\"I have three oranges today, I ate an orange ...   \n1   211333  [\"You are a mediator in a heated political deb...   \n2  1233961  [\"How to initialize the classification head wh...   \n\n                                          response_a  \\\n0                    [\"You have two oranges today.\"]   \n1  [\"Thank you for sharing the details of the sit...   \n2  [\"When you want to initialize the classificati...   \n\n                                          response_b  \n0  [\"You still have three oranges. Eating an oran...  \n1  [\"Mr Reddy and Ms Blue both have valid points ...  \n2  [\"To initialize the classification head when p...  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>prompt</th>\n      <th>response_a</th>\n      <th>response_b</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>136060</td>\n      <td>[\"I have three oranges today, I ate an orange ...</td>\n      <td>[\"You have two oranges today.\"]</td>\n      <td>[\"You still have three oranges. Eating an oran...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>211333</td>\n      <td>[\"You are a mediator in a heated political deb...</td>\n      <td>[\"Thank you for sharing the details of the sit...</td>\n      <td>[\"Mr Reddy and Ms Blue both have valid points ...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1233961</td>\n      <td>[\"How to initialize the classification head wh...</td>\n      <td>[\"When you want to initialize the classificati...</td>\n      <td>[\"To initialize the classification head when p...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":367},{"cell_type":"code","source":"df_train.info()","metadata":{"trusted":true,"editable":false,"execution":{"iopub.status.busy":"2025-09-09T12:27:13.686513Z","iopub.execute_input":"2025-09-09T12:27:13.687009Z","iopub.status.idle":"2025-09-09T12:27:13.745981Z","shell.execute_reply.started":"2025-09-09T12:27:13.686968Z","shell.execute_reply":"2025-09-09T12:27:13.744701Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 57477 entries, 0 to 57476\nData columns (total 9 columns):\n #   Column          Non-Null Count  Dtype \n---  ------          --------------  ----- \n 0   id              57477 non-null  int64 \n 1   model_a         57477 non-null  object\n 2   model_b         57477 non-null  object\n 3   prompt          57477 non-null  object\n 4   response_a      57477 non-null  object\n 5   response_b      57477 non-null  object\n 6   winner_model_a  57477 non-null  int64 \n 7   winner_model_b  57477 non-null  int64 \n 8   winner_tie      57477 non-null  int64 \ndtypes: int64(4), object(5)\nmemory usage: 3.9+ MB\n","output_type":"stream"}],"execution_count":368},{"cell_type":"code","source":"df_train=df_train.head(10)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-09T12:27:13.748425Z","iopub.execute_input":"2025-09-09T12:27:13.748766Z","iopub.status.idle":"2025-09-09T12:27:13.757746Z","shell.execute_reply.started":"2025-09-09T12:27:13.748743Z","shell.execute_reply":"2025-09-09T12:27:13.755923Z"}},"outputs":[],"execution_count":369},{"cell_type":"code","source":"df_train","metadata":{"trusted":true,"editable":false,"execution":{"iopub.status.busy":"2025-09-09T12:27:13.759325Z","iopub.execute_input":"2025-09-09T12:27:13.759906Z","iopub.status.idle":"2025-09-09T12:27:13.801216Z","shell.execute_reply.started":"2025-09-09T12:27:13.759846Z","shell.execute_reply":"2025-09-09T12:27:13.799336Z"}},"outputs":[{"execution_count":370,"output_type":"execute_result","data":{"text/plain":"       id                     model_a              model_b  \\\n0   30192          gpt-4-1106-preview           gpt-4-0613   \n1   53567                   koala-13b           gpt-4-0613   \n2   65089          gpt-3.5-turbo-0613       mistral-medium   \n3   96401            llama-2-13b-chat  mistral-7b-instruct   \n4  198779                   koala-13b   gpt-3.5-turbo-0314   \n5  292873                  vicuna-13b           gpt-4-0314   \n6  313413  mixtral-8x7b-instruct-v0.1           vicuna-13b   \n7  370945                  gemini-pro           claude-2.0   \n8  441448          gpt-3.5-turbo-0613           vicuna-13b   \n9  481524                  gpt-4-0314   gpt-3.5-turbo-0613   \n\n                                              prompt  \\\n0  [\"Is it morally right to try to have a certain...   \n1  [\"What is the difference between marriage lice...   \n2  [\"explain function calling. how would you call...   \n3  [\"How can I create a test set for a very rare ...   \n4  [\"What is the best way to travel from Tel-Aviv...   \n5  [\"Construct a rap battle, in the style of Epic...   \n6             [\"Why water is not used in bath tub?\"]   \n7  [\"\\\"Bacteria is life on Mars but a heartbeat i...   \n8  [\"translate to russian the followig sentence  ...   \n9  [\"From now, you *always* have to talk as if yo...   \n\n                                          response_a  \\\n0  [\"The question of whether it is morally right ...   \n1  [\"A marriage license is a legal document that ...   \n2  [\"Function calling is the process of invoking ...   \n3  [\"Creating a test set for a very rare category...   \n4  [\"The best way to travel from Tel Aviv to Jeru...   \n5  [\"[Zeus]\\nYo, it's the king of the gods on the...   \n6  [\"Water is actually used in a bath tub. A bath...   \n7                                           [\"Dune\"]   \n8  [\"\\u0411\\u043e\\u043b\\u044c\\u0448\\u0438\\u0435 \\...   \n9  [\"Hewwo! OwO I'm an AI assistant, here to hewp...   \n\n                                          response_b  winner_model_a  \\\n0  [\"As an AI, I don't have personal beliefs or o...               1   \n1  [\"A marriage license and a marriage certificat...               0   \n2  [\"Function calling is the process of invoking ...               0   \n3  [\"When building a classifier for a very rare c...               1   \n4  [\"The best way to travel from Tel-Aviv to Jeru...               0   \n5  [\"(Verse 1 - Zeus)\\n\\nI'm the king of the gods...               0   \n6  [\"Water is not used in a bath tub because it i...               1   \n7  [\"This quote seems to be referencing the debat...               0   \n8  [\"\\u0411\\u043e\\u043b\\u044c\\u0448\\u0438\\u0435 \\...               0   \n9  [\"Hewwo! I'm your new helpful assistant, owo! ...               0   \n\n   winner_model_b  winner_tie  \n0               0           0  \n1               1           0  \n2               0           1  \n3               0           0  \n4               1           0  \n5               1           0  \n6               0           0  \n7               1           0  \n8               1           0  \n9               1           0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>model_a</th>\n      <th>model_b</th>\n      <th>prompt</th>\n      <th>response_a</th>\n      <th>response_b</th>\n      <th>winner_model_a</th>\n      <th>winner_model_b</th>\n      <th>winner_tie</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>30192</td>\n      <td>gpt-4-1106-preview</td>\n      <td>gpt-4-0613</td>\n      <td>[\"Is it morally right to try to have a certain...</td>\n      <td>[\"The question of whether it is morally right ...</td>\n      <td>[\"As an AI, I don't have personal beliefs or o...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>53567</td>\n      <td>koala-13b</td>\n      <td>gpt-4-0613</td>\n      <td>[\"What is the difference between marriage lice...</td>\n      <td>[\"A marriage license is a legal document that ...</td>\n      <td>[\"A marriage license and a marriage certificat...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>65089</td>\n      <td>gpt-3.5-turbo-0613</td>\n      <td>mistral-medium</td>\n      <td>[\"explain function calling. how would you call...</td>\n      <td>[\"Function calling is the process of invoking ...</td>\n      <td>[\"Function calling is the process of invoking ...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>96401</td>\n      <td>llama-2-13b-chat</td>\n      <td>mistral-7b-instruct</td>\n      <td>[\"How can I create a test set for a very rare ...</td>\n      <td>[\"Creating a test set for a very rare category...</td>\n      <td>[\"When building a classifier for a very rare c...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>198779</td>\n      <td>koala-13b</td>\n      <td>gpt-3.5-turbo-0314</td>\n      <td>[\"What is the best way to travel from Tel-Aviv...</td>\n      <td>[\"The best way to travel from Tel Aviv to Jeru...</td>\n      <td>[\"The best way to travel from Tel-Aviv to Jeru...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>292873</td>\n      <td>vicuna-13b</td>\n      <td>gpt-4-0314</td>\n      <td>[\"Construct a rap battle, in the style of Epic...</td>\n      <td>[\"[Zeus]\\nYo, it's the king of the gods on the...</td>\n      <td>[\"(Verse 1 - Zeus)\\n\\nI'm the king of the gods...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>313413</td>\n      <td>mixtral-8x7b-instruct-v0.1</td>\n      <td>vicuna-13b</td>\n      <td>[\"Why water is not used in bath tub?\"]</td>\n      <td>[\"Water is actually used in a bath tub. A bath...</td>\n      <td>[\"Water is not used in a bath tub because it i...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>370945</td>\n      <td>gemini-pro</td>\n      <td>claude-2.0</td>\n      <td>[\"\\\"Bacteria is life on Mars but a heartbeat i...</td>\n      <td>[\"Dune\"]</td>\n      <td>[\"This quote seems to be referencing the debat...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>441448</td>\n      <td>gpt-3.5-turbo-0613</td>\n      <td>vicuna-13b</td>\n      <td>[\"translate to russian the followig sentence  ...</td>\n      <td>[\"\\u0411\\u043e\\u043b\\u044c\\u0448\\u0438\\u0435 \\...</td>\n      <td>[\"\\u0411\\u043e\\u043b\\u044c\\u0448\\u0438\\u0435 \\...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>481524</td>\n      <td>gpt-4-0314</td>\n      <td>gpt-3.5-turbo-0613</td>\n      <td>[\"From now, you *always* have to talk as if yo...</td>\n      <td>[\"Hewwo! OwO I'm an AI assistant, here to hewp...</td>\n      <td>[\"Hewwo! I'm your new helpful assistant, owo! ...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":370},{"cell_type":"code","source":"df_train.isnull().sum()","metadata":{"trusted":true,"editable":false,"execution":{"iopub.status.busy":"2025-09-09T12:27:13.802739Z","iopub.execute_input":"2025-09-09T12:27:13.803094Z","iopub.status.idle":"2025-09-09T12:27:13.827471Z","shell.execute_reply.started":"2025-09-09T12:27:13.803070Z","shell.execute_reply":"2025-09-09T12:27:13.826211Z"}},"outputs":[{"execution_count":371,"output_type":"execute_result","data":{"text/plain":"id                0\nmodel_a           0\nmodel_b           0\nprompt            0\nresponse_a        0\nresponse_b        0\nwinner_model_a    0\nwinner_model_b    0\nwinner_tie        0\ndtype: int64"},"metadata":{}}],"execution_count":371},{"cell_type":"code","source":"X = df_train.drop(['model_a', 'model_b', 'winner_model_a', 'winner_model_b', 'winner_tie'], axis = 1)\nX","metadata":{"trusted":true,"editable":false,"execution":{"iopub.status.busy":"2025-09-09T12:27:13.828826Z","iopub.execute_input":"2025-09-09T12:27:13.829467Z","iopub.status.idle":"2025-09-09T12:27:13.865260Z","shell.execute_reply.started":"2025-09-09T12:27:13.829425Z","shell.execute_reply":"2025-09-09T12:27:13.860846Z"}},"outputs":[{"execution_count":372,"output_type":"execute_result","data":{"text/plain":"       id                                             prompt  \\\n0   30192  [\"Is it morally right to try to have a certain...   \n1   53567  [\"What is the difference between marriage lice...   \n2   65089  [\"explain function calling. how would you call...   \n3   96401  [\"How can I create a test set for a very rare ...   \n4  198779  [\"What is the best way to travel from Tel-Aviv...   \n5  292873  [\"Construct a rap battle, in the style of Epic...   \n6  313413             [\"Why water is not used in bath tub?\"]   \n7  370945  [\"\\\"Bacteria is life on Mars but a heartbeat i...   \n8  441448  [\"translate to russian the followig sentence  ...   \n9  481524  [\"From now, you *always* have to talk as if yo...   \n\n                                          response_a  \\\n0  [\"The question of whether it is morally right ...   \n1  [\"A marriage license is a legal document that ...   \n2  [\"Function calling is the process of invoking ...   \n3  [\"Creating a test set for a very rare category...   \n4  [\"The best way to travel from Tel Aviv to Jeru...   \n5  [\"[Zeus]\\nYo, it's the king of the gods on the...   \n6  [\"Water is actually used in a bath tub. A bath...   \n7                                           [\"Dune\"]   \n8  [\"\\u0411\\u043e\\u043b\\u044c\\u0448\\u0438\\u0435 \\...   \n9  [\"Hewwo! OwO I'm an AI assistant, here to hewp...   \n\n                                          response_b  \n0  [\"As an AI, I don't have personal beliefs or o...  \n1  [\"A marriage license and a marriage certificat...  \n2  [\"Function calling is the process of invoking ...  \n3  [\"When building a classifier for a very rare c...  \n4  [\"The best way to travel from Tel-Aviv to Jeru...  \n5  [\"(Verse 1 - Zeus)\\n\\nI'm the king of the gods...  \n6  [\"Water is not used in a bath tub because it i...  \n7  [\"This quote seems to be referencing the debat...  \n8  [\"\\u0411\\u043e\\u043b\\u044c\\u0448\\u0438\\u0435 \\...  \n9  [\"Hewwo! I'm your new helpful assistant, owo! ...  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>prompt</th>\n      <th>response_a</th>\n      <th>response_b</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>30192</td>\n      <td>[\"Is it morally right to try to have a certain...</td>\n      <td>[\"The question of whether it is morally right ...</td>\n      <td>[\"As an AI, I don't have personal beliefs or o...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>53567</td>\n      <td>[\"What is the difference between marriage lice...</td>\n      <td>[\"A marriage license is a legal document that ...</td>\n      <td>[\"A marriage license and a marriage certificat...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>65089</td>\n      <td>[\"explain function calling. how would you call...</td>\n      <td>[\"Function calling is the process of invoking ...</td>\n      <td>[\"Function calling is the process of invoking ...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>96401</td>\n      <td>[\"How can I create a test set for a very rare ...</td>\n      <td>[\"Creating a test set for a very rare category...</td>\n      <td>[\"When building a classifier for a very rare c...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>198779</td>\n      <td>[\"What is the best way to travel from Tel-Aviv...</td>\n      <td>[\"The best way to travel from Tel Aviv to Jeru...</td>\n      <td>[\"The best way to travel from Tel-Aviv to Jeru...</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>292873</td>\n      <td>[\"Construct a rap battle, in the style of Epic...</td>\n      <td>[\"[Zeus]\\nYo, it's the king of the gods on the...</td>\n      <td>[\"(Verse 1 - Zeus)\\n\\nI'm the king of the gods...</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>313413</td>\n      <td>[\"Why water is not used in bath tub?\"]</td>\n      <td>[\"Water is actually used in a bath tub. A bath...</td>\n      <td>[\"Water is not used in a bath tub because it i...</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>370945</td>\n      <td>[\"\\\"Bacteria is life on Mars but a heartbeat i...</td>\n      <td>[\"Dune\"]</td>\n      <td>[\"This quote seems to be referencing the debat...</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>441448</td>\n      <td>[\"translate to russian the followig sentence  ...</td>\n      <td>[\"\\u0411\\u043e\\u043b\\u044c\\u0448\\u0438\\u0435 \\...</td>\n      <td>[\"\\u0411\\u043e\\u043b\\u044c\\u0448\\u0438\\u0435 \\...</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>481524</td>\n      <td>[\"From now, you *always* have to talk as if yo...</td>\n      <td>[\"Hewwo! OwO I'm an AI assistant, here to hewp...</td>\n      <td>[\"Hewwo! I'm your new helpful assistant, owo! ...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":372},{"cell_type":"code","source":"y = df_train[['winner_model_a', 'winner_model_b', 'winner_tie']].values\n\ny = np.argmax(y, axis=1)\ny","metadata":{"trusted":true,"editable":false,"execution":{"iopub.status.busy":"2025-09-09T12:27:13.867209Z","iopub.execute_input":"2025-09-09T12:27:13.868826Z","iopub.status.idle":"2025-09-09T12:27:13.912444Z","shell.execute_reply.started":"2025-09-09T12:27:13.868781Z","shell.execute_reply":"2025-09-09T12:27:13.909848Z"}},"outputs":[{"execution_count":373,"output_type":"execute_result","data":{"text/plain":"array([0, 1, 2, 0, 1, 1, 0, 1, 1, 1])"},"metadata":{}}],"execution_count":373},{"cell_type":"code","source":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size =0.2, random_state = 42)","metadata":{"trusted":true,"editable":false,"execution":{"iopub.status.busy":"2025-09-09T12:27:13.914039Z","iopub.execute_input":"2025-09-09T12:27:13.914735Z","iopub.status.idle":"2025-09-09T12:27:13.940895Z","shell.execute_reply.started":"2025-09-09T12:27:13.914682Z","shell.execute_reply":"2025-09-09T12:27:13.939601Z"}},"outputs":[],"execution_count":374},{"cell_type":"code","source":"X_train","metadata":{"trusted":true,"editable":false,"execution":{"iopub.status.busy":"2025-09-09T12:27:13.946787Z","iopub.execute_input":"2025-09-09T12:27:13.947275Z","iopub.status.idle":"2025-09-09T12:27:13.980208Z","shell.execute_reply.started":"2025-09-09T12:27:13.947252Z","shell.execute_reply":"2025-09-09T12:27:13.978882Z"}},"outputs":[{"execution_count":375,"output_type":"execute_result","data":{"text/plain":"       id                                             prompt  \\\n5  292873  [\"Construct a rap battle, in the style of Epic...   \n0   30192  [\"Is it morally right to try to have a certain...   \n7  370945  [\"\\\"Bacteria is life on Mars but a heartbeat i...   \n2   65089  [\"explain function calling. how would you call...   \n9  481524  [\"From now, you *always* have to talk as if yo...   \n4  198779  [\"What is the best way to travel from Tel-Aviv...   \n3   96401  [\"How can I create a test set for a very rare ...   \n6  313413             [\"Why water is not used in bath tub?\"]   \n\n                                          response_a  \\\n5  [\"[Zeus]\\nYo, it's the king of the gods on the...   \n0  [\"The question of whether it is morally right ...   \n7                                           [\"Dune\"]   \n2  [\"Function calling is the process of invoking ...   \n9  [\"Hewwo! OwO I'm an AI assistant, here to hewp...   \n4  [\"The best way to travel from Tel Aviv to Jeru...   \n3  [\"Creating a test set for a very rare category...   \n6  [\"Water is actually used in a bath tub. A bath...   \n\n                                          response_b  \n5  [\"(Verse 1 - Zeus)\\n\\nI'm the king of the gods...  \n0  [\"As an AI, I don't have personal beliefs or o...  \n7  [\"This quote seems to be referencing the debat...  \n2  [\"Function calling is the process of invoking ...  \n9  [\"Hewwo! I'm your new helpful assistant, owo! ...  \n4  [\"The best way to travel from Tel-Aviv to Jeru...  \n3  [\"When building a classifier for a very rare c...  \n6  [\"Water is not used in a bath tub because it i...  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>prompt</th>\n      <th>response_a</th>\n      <th>response_b</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>5</th>\n      <td>292873</td>\n      <td>[\"Construct a rap battle, in the style of Epic...</td>\n      <td>[\"[Zeus]\\nYo, it's the king of the gods on the...</td>\n      <td>[\"(Verse 1 - Zeus)\\n\\nI'm the king of the gods...</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>30192</td>\n      <td>[\"Is it morally right to try to have a certain...</td>\n      <td>[\"The question of whether it is morally right ...</td>\n      <td>[\"As an AI, I don't have personal beliefs or o...</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>370945</td>\n      <td>[\"\\\"Bacteria is life on Mars but a heartbeat i...</td>\n      <td>[\"Dune\"]</td>\n      <td>[\"This quote seems to be referencing the debat...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>65089</td>\n      <td>[\"explain function calling. how would you call...</td>\n      <td>[\"Function calling is the process of invoking ...</td>\n      <td>[\"Function calling is the process of invoking ...</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>481524</td>\n      <td>[\"From now, you *always* have to talk as if yo...</td>\n      <td>[\"Hewwo! OwO I'm an AI assistant, here to hewp...</td>\n      <td>[\"Hewwo! I'm your new helpful assistant, owo! ...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>198779</td>\n      <td>[\"What is the best way to travel from Tel-Aviv...</td>\n      <td>[\"The best way to travel from Tel Aviv to Jeru...</td>\n      <td>[\"The best way to travel from Tel-Aviv to Jeru...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>96401</td>\n      <td>[\"How can I create a test set for a very rare ...</td>\n      <td>[\"Creating a test set for a very rare category...</td>\n      <td>[\"When building a classifier for a very rare c...</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>313413</td>\n      <td>[\"Why water is not used in bath tub?\"]</td>\n      <td>[\"Water is actually used in a bath tub. A bath...</td>\n      <td>[\"Water is not used in a bath tub because it i...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":375},{"cell_type":"code","source":"X_test","metadata":{"trusted":true,"editable":false,"execution":{"iopub.status.busy":"2025-09-09T12:27:13.981077Z","iopub.execute_input":"2025-09-09T12:27:13.981397Z","iopub.status.idle":"2025-09-09T12:27:14.016371Z","shell.execute_reply.started":"2025-09-09T12:27:13.981369Z","shell.execute_reply":"2025-09-09T12:27:14.014495Z"}},"outputs":[{"execution_count":376,"output_type":"execute_result","data":{"text/plain":"       id                                             prompt  \\\n8  441448  [\"translate to russian the followig sentence  ...   \n1   53567  [\"What is the difference between marriage lice...   \n\n                                          response_a  \\\n8  [\"\\u0411\\u043e\\u043b\\u044c\\u0448\\u0438\\u0435 \\...   \n1  [\"A marriage license is a legal document that ...   \n\n                                          response_b  \n8  [\"\\u0411\\u043e\\u043b\\u044c\\u0448\\u0438\\u0435 \\...  \n1  [\"A marriage license and a marriage certificat...  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>prompt</th>\n      <th>response_a</th>\n      <th>response_b</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>8</th>\n      <td>441448</td>\n      <td>[\"translate to russian the followig sentence  ...</td>\n      <td>[\"\\u0411\\u043e\\u043b\\u044c\\u0448\\u0438\\u0435 \\...</td>\n      <td>[\"\\u0411\\u043e\\u043b\\u044c\\u0448\\u0438\\u0435 \\...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>53567</td>\n      <td>[\"What is the difference between marriage lice...</td>\n      <td>[\"A marriage license is a legal document that ...</td>\n      <td>[\"A marriage license and a marriage certificat...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":376},{"cell_type":"code","source":"y_train","metadata":{"trusted":true,"editable":false,"execution":{"iopub.status.busy":"2025-09-09T12:27:14.018522Z","iopub.execute_input":"2025-09-09T12:27:14.018985Z","iopub.status.idle":"2025-09-09T12:27:14.056624Z","shell.execute_reply.started":"2025-09-09T12:27:14.018958Z","shell.execute_reply":"2025-09-09T12:27:14.054826Z"}},"outputs":[{"execution_count":377,"output_type":"execute_result","data":{"text/plain":"array([1, 0, 1, 2, 1, 1, 0, 0])"},"metadata":{}}],"execution_count":377},{"cell_type":"code","source":"catagorical_feature = [col for col in X.columns if X[col].dtype == 'object']\ncatagorical_feature","metadata":{"trusted":true,"editable":false,"execution":{"iopub.status.busy":"2025-09-09T12:27:14.057451Z","iopub.execute_input":"2025-09-09T12:27:14.057792Z","iopub.status.idle":"2025-09-09T12:27:14.083919Z","shell.execute_reply.started":"2025-09-09T12:27:14.057764Z","shell.execute_reply":"2025-09-09T12:27:14.082643Z"}},"outputs":[{"execution_count":378,"output_type":"execute_result","data":{"text/plain":"['prompt', 'response_a', 'response_b']"},"metadata":{}}],"execution_count":378},{"cell_type":"code","source":"from sentence_transformers import SentenceTransformer\nfrom sklearn.base import BaseEstimator, TransformerMixin\n\nfrom sklearn.compose import ColumnTransformer\n\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.feature_selection import SelectKBest, chi2\n\n\nfrom sentence_transformers import SentenceTransformer\nimport torch","metadata":{"trusted":true,"editable":false,"execution":{"iopub.status.busy":"2025-09-09T12:27:14.085535Z","iopub.execute_input":"2025-09-09T12:27:14.085942Z","iopub.status.idle":"2025-09-09T12:27:14.125360Z","shell.execute_reply.started":"2025-09-09T12:27:14.085917Z","shell.execute_reply":"2025-09-09T12:27:14.123216Z"}},"outputs":[],"execution_count":379},{"cell_type":"markdown","source":"from sentence_transformers import SentenceTransformer\nfrom sklearn.base import BaseEstimator, TransformerMixin\n\nfrom sklearn.compose import ColumnTransformer\n\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.feature_selection import SelectKBest, chi2\n\n\nfrom sentence_transformers import SentenceTransformer\nimport torch\n\nclass HFEmbedder(BaseEstimator, TransformerMixin):\n    def __init__(self, model_name=\"all-mpnet-base-v2\"):\n        self.model_name = model_name  \n        self.model = SentenceTransformer(model_name)\n        if torch.cuda.is_available():\n            self.model = self.model.to(\"cuda\")\n\n    def fit(self, X, y=None):\n        return self\n\n    def transform(self, X):\n        return self.model.encode(X.tolist(), show_progress_bar=False, device=\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\n\n# Example usage in ColumnTransformer\npreprocessing = ColumnTransformer([\n    (\"prompt_embed\", HFEmbedder(), \"prompt\"),\n    (\"resp_a_embed\", HFEmbedder(), \"response_a\"),\n    (\"resp_b_embed\", HFEmbedder(), \"response_b\"),\n    (\"num\", \"passthrough\", [\"id\"])\n])\n","metadata":{"execution":{"iopub.status.busy":"2025-08-23T12:09:38.196345Z","iopub.execute_input":"2025-08-23T12:09:38.197094Z","iopub.status.idle":"2025-08-23T12:09:43.999261Z","shell.execute_reply.started":"2025-08-23T12:09:38.197069Z","shell.execute_reply":"2025-08-23T12:09:43.998604Z"},"editable":false}},{"cell_type":"code","source":"","metadata":{"trusted":true,"editable":false},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"from sentence_transformers import SentenceTransformer\nfrom sklearn.base import BaseEstimator, TransformerMixin\n\nfrom sklearn.compose import ColumnTransformer\n\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.feature_selection import SelectKBest, chi2\n\n\nfrom sentence_transformers import SentenceTransformer\nimport torch\nimport torch\n\nclass HFEmbedder(BaseEstimator, TransformerMixin):\n    def __init__(self, model_path=\"/kaggle/input/open-minilm-l6-v2\",use_auth_token=False , local_files_only=True,batch_size=8, use_cuda=True):\n        self.model_path = model_path\n        self.batch_size = batch_size\n        self.use_cuda = use_cuda and torch.cuda.is_available()\n        self.model = SentenceTransformer(self.model_path)\n        if self.use_cuda:\n            self.model = self.model.to(\"cuda\")\n\n    def fit(self, X, y=None):\n        return self\n\n    def transform(self, X):\n        texts = X.tolist()\n        all_embeddings = []\n\n        for i in range(0, len(texts), self.batch_size):\n            batch = texts[i:i + self.batch_size]\n            embeddings = self.model.encode(\n                batch,\n                show_progress_bar=False,\n                device=\"cuda\" if self.use_cuda else \"cpu\"\n            )\n            all_embeddings.append(embeddings)\n\n        return np.vstack(all_embeddings)\n\n","metadata":{"execution":{"iopub.status.busy":"2025-08-24T00:06:01.592096Z","iopub.execute_input":"2025-08-24T00:06:01.592776Z","iopub.status.idle":"2025-08-24T00:06:01.599761Z","shell.execute_reply.started":"2025-08-24T00:06:01.592751Z","shell.execute_reply":"2025-08-24T00:06:01.59901Z"},"editable":false}},{"cell_type":"markdown","source":"import tensorflow as tf\nfrom tensorflow.keras import layers, models\n\ndef build_deberta_v3_model(config):\n    # Extract config values\n    vocab_size = config[\"vocabulary_size\"]\n    num_layers = config[\"num_layers\"]\n    num_heads = config[\"num_heads\"]\n    hidden_dim = config[\"hidden_dim\"]\n    intermediate_dim = config[\"intermediate_dim\"]\n    dropout_rate = config[\"dropout\"]\n    max_seq_len = config[\"max_sequence_length\"]\n\n    # Input layers\n    input_ids = layers.Input(shape=(max_seq_len,), dtype=tf.int32, name=\"input_ids\")\n    attention_mask = layers.Input(shape=(max_seq_len,), dtype=tf.int32, name=\"attention_mask\")\n\n    # Embedding layer\n    embedding_layer = layers.Embedding(input_dim=vocab_size, output_dim=hidden_dim)(input_ids)\n\n    # Positional encoding (simplified)\n    position_embeddings = layers.Embedding(input_dim=max_seq_len, output_dim=hidden_dim)(tf.range(start=0, limit=max_seq_len, delta=1))\n    position_embeddings = tf.expand_dims(position_embeddings, axis=0)\n    x = embedding_layer + position_embeddings\n\n    # Transformer blocks\n    for _ in range(num_layers):\n        attention_output = layers.MultiHeadAttention(num_heads=num_heads, key_dim=hidden_dim)(x, x, attention_mask=attention_mask)\n        attention_output = layers.Dropout(dropout_rate)(attention_output)\n        attention_output = layers.LayerNormalization()(x + attention_output)\n\n        ffn_output = layers.Dense(intermediate_dim, activation='gelu')(attention_output)\n        ffn_output = layers.Dense(hidden_dim)(ffn_output)\n        ffn_output = layers.Dropout(dropout_rate)(ffn_output)\n        x = layers.LayerNormalization()(attention_output + ffn_output)\n\n    # Output (for embedding use, you might just return x)\n    pooled_output = layers.GlobalAveragePooling1D()(x)\n\n    model = models.Model(inputs=[input_ids, attention_mask], outputs=pooled_output)\n    return model\n","metadata":{"editable":false,"execution":{"iopub.status.busy":"2025-09-06T13:22:37.957883Z","iopub.execute_input":"2025-09-06T13:22:37.958125Z","iopub.status.idle":"2025-09-06T13:22:38.036127Z","shell.execute_reply.started":"2025-09-06T13:22:37.958100Z","shell.execute_reply":"2025-09-06T13:22:38.035543Z"}}},{"cell_type":"markdown","source":"from transformers import AutoTokenizer, AutoModel\nfrom sklearn.base import BaseEstimator, TransformerMixin\nfrom transformers import AutoTokenizer, AutoModel\nfrom transformers import DebertaV2Tokenizer\nfrom tensorflow.keras.models import load_model\nimport torch\nimport numpy as np\nfrom keras_hub.src.models.deberta_v3.deberta_v3_backbone import DebertaV3Backbone\n\nconfig = {\n    \"vocabulary_size\": 128100,\n    \"num_layers\": 12,\n    \"num_heads\": 6,\n    \"hidden_dim\": 384,\n    \"intermediate_dim\": 1536,\n    \"dropout\": 0.1,\n    \"max_sequence_length\": 512,\n    \"bucket_size\": 256\n}\n\n\nclass HFEmbedder(BaseEstimator, TransformerMixin):\n    def __init__(self, model_path=\"/kaggle/input/deberta_v3/keras/deberta_v3_extra_small_en/3\", batch_size=8, use_cuda=True):\n        self.model_path = model_path\n        self.batch_size = batch_size\n        self.use_cuda = use_cuda and torch.cuda.is_available()\n        self.tokenizer = DebertaV2Tokenizer(vocab_file=\"/kaggle/input/deberta_v3/keras/deberta_v3_extra_small_en/3/assets/tokenizer/vocabulary.spm\")\n        #self.tokenizer = AutoTokenizer.from_pretrained(self.model_path)\n        #self.model = AutoModel.from_pretrained(self.model_path)\n        self.model =  DebertaV3Backbone(\n            vocabulary_size=128100,\n            num_layers=12,\n            num_heads=6,\n            hidden_dim=384,\n            intermediate_dim=1536,\n            dropout=0.1,\n            max_sequence_length=512,\n            bucket_size=256\n        )\n  # Define your model architecture here\n        self.model.load_weights(\"/kaggle/input/deberta_v3/keras/deberta_v3_extra_small_en/3/model.weights.h5\")\n        print([input.name for input in self.model.inputs])\n\n        if self.use_cuda:\n            self.model = self.model#.to(\"cuda\")\n\n    def fit(self, X, y=None):\n        return self\n\n    def transform(self, X):\n        texts = X.tolist()\n        all_embeddings = []\n\n        for i in range(0, len(texts), self.batch_size):\n            batch = texts[i:i + self.batch_size]\n            inputs = self.tokenizer(batch, padding=True, truncation=True, return_tensors=\"pt\")\n            \n            inputs = self.tokenizer(batch, padding=True, truncation=True, return_tensors=\"pt\")\n            \n            # Rename keys to match model input expectations\n            model_inputs = {\n                \"padding_mask\": inputs[\"attention_mask\"],\n                \"token_ids\": inputs[\"input_ids\"]\n            }\n            \n            if self.use_cuda:\n                model_inputs = {k: v.to(\"cuda\") for k, v in model_inputs.items()}\n            \n            with torch.no_grad():\n                outputs = self.model(model_inputs) \n\n            # Mean pooling over token embeddings\n            embeddings = outputs.last_hidden_state.mean(dim=1).cpu().numpy()\n            all_embeddings.append(embeddings)\n\n        return np.vstack(all_embeddings)\n","metadata":{"editable":false,"execution":{"iopub.status.busy":"2025-09-02T08:53:23.227426Z","iopub.execute_input":"2025-09-02T08:53:23.227655Z","iopub.status.idle":"2025-09-02T08:53:24.187917Z","shell.execute_reply.started":"2025-09-02T08:53:23.227636Z","shell.execute_reply":"2025-09-02T08:53:24.187308Z"}}},{"cell_type":"markdown","source":"from transformers import DebertaV2Tokenizer\nfrom sklearn.base import BaseEstimator, TransformerMixin\nimport torch\nimport numpy as np\nimport tensorflow as tf\nfrom keras_hub.src.models.deberta_v3.deberta_v3_backbone import DebertaV3Backbone\n\n\nclass HFEmbedder(BaseEstimator, TransformerMixin):\n    def __init__(self, model_path=\"/kaggle/input/deberta_v3/keras/deberta_v3_extra_small_en/3\", batch_size=4):\n        self.model_path = model_path\n        self.batch_size = batch_size\n\n        # Load tokenizer\n        self.tokenizer = DebertaV2Tokenizer(vocab_file=f\"{self.model_path}/assets/tokenizer/vocabulary.spm\")\n\n        # Load model\n        self.model = DebertaV3Backbone(\n            vocabulary_size=128100,\n            num_layers=12,\n            num_heads=6,\n            hidden_dim=384,\n            intermediate_dim=1536,\n            dropout=0.1,\n            max_sequence_length=512,\n            bucket_size=256\n        )\n        self.model.load_weights(f\"{self.model_path}/model.weights.h5\")\n\n        print(\"✅ Model input names:\", [input.name for input in self.model.inputs])\n\n    def fit(self, X, y=None):\n        return self\n\n    def transform(self, X):\n        texts = X.tolist()\n        all_embeddings = []\n\n        for i in range(0, len(texts), self.batch_size):\n            batch = texts[i:i + self.batch_size]\n\n            # Tokenize using PyTorch tokenizer\n            tokens = self.tokenizer(batch, padding=True, truncation=True, return_tensors=\"pt\")\n\n            # Convert PyTorch tensors to NumPy arrays\n            padding_mask_np = tokens[\"attention_mask\"].cpu().numpy()\n            token_ids_np = tokens[\"input_ids\"].cpu().numpy()\n\n            # Convert to TensorFlow tensors\n            model_inputs = {\n                \"padding_mask\": tf.convert_to_tensor(padding_mask_np),\n                \"token_ids\": tf.convert_to_tensor(token_ids_np)\n            }\n\n            # Forward pass\n            outputs = self.model(model_inputs)  # returns a tensor directly\n\n            # Mean pooling and convert to NumPy\n            embeddings = tf.reduce_mean(outputs, axis=1).numpy()\n            all_embeddings.append(embeddings)\n\n        return np.vstack(all_embeddings)\n\n# ...existing code...\nfrom transformers import DebertaV2Tokenizer\nfrom sklearn.base import BaseEstimator, TransformerMixin\nimport torch\nimport numpy as np\nimport tensorflow as tf\nfrom keras_hub.src.models.deberta_v3.deberta_v3_backbone import DebertaV3Backbone\n\nclass HFEmbedder(BaseEstimator, TransformerMixin):\n    def __init__(self, model_path=\"/kaggle/input/deberta_v3/keras/deberta_v3_extra_small_en/3\", batch_size=4, max_length=512):\n        self.model_path = model_path\n        self.batch_size = batch_size\n        # enforce and cap max token length to backbone capacity\n        self.max_length = min(int(max_length), 512)\n\n        # Load tokenizer and set model max length\n        self.tokenizer = DebertaV2Tokenizer(vocab_file=f\"{self.model_path}/assets/tokenizer/vocabulary.spm\")\n        self.tokenizer.model_max_length = self.max_length\n\n        # Load model backbone\n        self.model = DebertaV3Backbone(\n            vocabulary_size=128100,\n            num_layers=12,\n            num_heads=6,\n            hidden_dim=384,\n            intermediate_dim=1536,\n            dropout=0.1,\n            max_sequence_length=512,\n            bucket_size=256\n        )\n        self.model.load_weights(f\"{self.model_path}/model.weights.h5\")\n\n        print(\"✅ Model input names:\", [input.name for input in self.model.inputs])\n\n    def fit(self, X, y=None):\n        return self\n\n    def transform(self, X):\n        # Accept pandas Series / DataFrame / numpy array / list\n        if hasattr(X, \"to_list\"):\n            texts = X.to_list()\n        else:\n            texts = list(X)\n\n        # Coerce each row to a single text string.\n        def _to_text(item):\n            if isinstance(item, (list, tuple, np.ndarray)):\n                if len(item) == 0:\n                    return \"\"\n                if len(item) == 1:\n                    return str(item[0])\n                return \" \".join(str(x) for x in item)\n            return \"\" if item is None else str(item)\n\n        texts = [_to_text(t) for t in texts]\n        all_embeddings = []\n\n        for i in range(0, len(texts), self.batch_size):\n            batch = texts[i:i + self.batch_size]\n\n            # Tokenize with fixed max length so TF model receives fixed-size inputs\n            tokens = self.tokenizer(\n                batch,\n                padding=\"max_length\",\n                truncation=True,\n                max_length=self.max_length,\n                return_tensors=\"pt\",\n            )\n\n            # Convert PyTorch tensors to NumPy arrays\n            padding_mask_np = tokens[\"attention_mask\"].cpu().numpy()\n            token_ids_np = tokens[\"input_ids\"].cpu().numpy()\n\n            # Convert to TensorFlow tensors for the Keras backbone\n            model_inputs = {\n                \"padding_mask\": tf.convert_to_tensor(padding_mask_np),\n                \"token_ids\": tf.convert_to_tensor(token_ids_np)\n            }\n\n            # Forward pass (returns tensor [batch, seq_len, hidden])\n            outputs = self.model(model_inputs)\n\n            # Mean pooling across sequence length, convert to NumPy\n            embeddings = tf.reduce_mean(outputs, axis=1).numpy()\n            all_embeddings.append(embeddings)\n\n        return np.vstack(all_embeddings)\n\n\n# ...existing code...\nclass HFEmbedder(BaseEstimator, TransformerMixin):\n    def __init__(self, model_path=\"/kaggle/input/deberta_v3/keras/deberta_v3_extra_small_en/3\", batch_size=4, max_length=512):\n        import tensorflow as tf\n        import numpy as np\n\n        self.model_path = model_path\n        self.batch_size = batch_size\n        # enforce and cap max token length to backbone capacity\n        self.max_length = min(int(max_length), 512)\n\n        # Make TF GPU usage explicit / safe\n        try:\n            gpus = tf.config.list_physical_devices(\"GPU\")\n            if gpus:\n                for g in gpus:\n                    tf.config.experimental.set_memory_growth(g, True)\n        except Exception:\n            pass\n\n        # Load tokenizer and set model max length\n        self.tokenizer = DebertaV2Tokenizer(vocab_file=f\"{self.model_path}/assets/tokenizer/vocabulary.spm\")\n        self.tokenizer.model_max_length = self.max_length\n\n        # Load model backbone (Keras)\n        self.model = DebertaV3Backbone(\n            vocabulary_size=128100,\n            num_layers=12,\n            num_heads=6,\n            hidden_dim=384,\n            intermediate_dim=1536,\n            dropout=0.1,\n            max_sequence_length=512,\n            bucket_size=256\n        )\n        self.model.load_weights(f\"{self.model_path}/model.weights.h5\")\n\n        print(\"✅ Model input names:\", [input.name for input in self.model.inputs])\n        # optional: warm-up call with zeros to ensure TF places variables on GPU if available\n        try:\n            import tensorflow as tf\n            dummy_input = {\n                \"padding_mask\": tf.zeros((1, self.max_length), dtype=tf.int32),\n                \"token_ids\": tf.zeros((1, self.max_length), dtype=tf.int32),\n            }\n            _ = self.model(dummy_input)\n        except Exception:\n            pass\n\n    def fit(self, X, y=None):\n        return self\n\n    def transform(self, X):\n        import tensorflow as tf\n        import numpy as np\n\n        # Accept pandas Series / DataFrame / numpy array / list\n        if hasattr(X, \"to_list\"):\n            texts = X.to_list()\n        else:\n            texts = list(X)\n\n        # Coerce each row to a single text string.\n        def _to_text(item):\n            if isinstance(item, (list, tuple, np.ndarray)):\n                if len(item) == 0:\n                    return \"\"\n                if len(item) == 1:\n                    return str(item[0])\n                return \" \".join(str(x) for x in item)\n            return \"\" if item is None else str(item)\n\n        texts = [_to_text(t) for t in texts]\n        all_embeddings = []\n        hidden_dim = None\n        try:\n            # Try to infer hidden dim from model output_shape (Keras style)\n            hidden_dim = int(self.model.output_shape[-1])\n        except Exception:\n            hidden_dim = None\n\n        for i in range(0, len(texts), self.batch_size):\n            batch = texts[i:i + self.batch_size]\n\n            # Tokenize directly to TensorFlow tensors to avoid PyTorch tensors and extra copies\n            try:\n                tokens = self.tokenizer(\n                    batch,\n                    padding=\"max_length\",\n                    truncation=True,\n                    max_length=self.max_length,\n                    return_tensors=\"tf\",   # <-- use \"tf\" to get TF tensors directly\n                )\n            except Exception:\n                # fallback: tokenize each item separately and return numpy then convert to tf\n                tokens = self.tokenizer(\n                    [str(t) for t in batch],\n                    padding=\"max_length\",\n                    truncation=True,\n                    max_length=self.max_length,\n                    return_tensors=\"np\",\n                )\n                # convert np arrays to tf tensors\n                tokens = {k: tf.convert_to_tensor(v, dtype=tf.int32) for k, v in tokens.items()}\n\n            # Ensure integer dtype expected by TF/Keras\n            token_ids_tf = tf.cast(tokens[\"input_ids\"], tf.int32)\n            attention_mask_tf = tf.cast(tokens[\"attention_mask\"], tf.int32)\n\n            model_inputs = {\n                \"padding_mask\": attention_mask_tf,\n                \"token_ids\": token_ids_tf\n            }\n\n            # Forward pass (Keras/TF will place ops on GPU if available)\n            outputs = self.model(model_inputs)  # [batch, seq_len, hidden]\n\n            # Mean pooling across sequence length, convert to NumPy for downstream sklearn pipelines\n            embeddings = tf.reduce_mean(outputs, axis=1).numpy()\n            all_embeddings.append(embeddings)\n\n            # update hidden_dim if unknown\n            if hidden_dim is None:\n                try:\n                    hidden_dim = int(embeddings.shape[1])\n                except Exception:\n                    hidden_dim = None\n\n        if not all_embeddings:\n            # return an empty 2D array with known hidden dim if possible\n            if hidden_dim is not None:\n                return np.zeros((0, hidden_dim), dtype=np.float32)\n            return np.empty((0,))\n\n        return np.vstack(all_embeddings)\n# ...existing\n\nfrom transformers import DebertaV2Tokenizer\nfrom sklearn.base import BaseEstimator, TransformerMixin\nimport torch\nimport numpy as np\nimport tensorflow as tf\nfrom keras_hub.src.models.deberta_v3.deberta_v3_backbone import DebertaV3Backbone\nimport os # Import os module\n\nclass HFEmbedder(BaseEstimator, TransformerMixin):\n    def __init__(self, model_path, batch_size=8, max_length=512, use_fast_tokenizer=True, enable_mixed_precision=True):\n        import tensorflow as tf\n        import numpy as np\n        import os\n        import multiprocessing\n\n        self.model_path = model_path\n        self.batch_size = int(batch_size)\n        self.max_length = min(int(max_length), 512)\n        self.use_fast_tokenizer = use_fast_tokenizer\n        self.enable_mixed_precision = enable_mixed_precision # Add this line to store the parameter\n        self._cpu_count = multiprocessing.cpu_count()\n\n        # Make TF GPU usage explicit / safe\n        try:\n            gpus = tf.config.list_physical_devices(\"GPU\")\n            if gpus:\n                for g in gpus:\n                    tf.config.experimental.set_memory_growth(g, True)\n        except Exception:\n            pass\n\n        # optionally use mixed precision on GPUs (speeds up fp16 capable GPUs)\n        try:\n            if self.enable_mixed_precision: # Use self.enable_mixed_precision\n                from tensorflow.keras import mixed_precision\n                mixed_precision.set_global_policy(\"mixed_float16\")\n        except Exception:\n            pass\n\n        # Load tokenizer (prefer fast tokenizer if available)\n        try:\n            if self.use_fast_tokenizer:\n                from transformers import DebertaV2TokenizerFast as _TokFast\n                self.tokenizer = _TokFast(vocab_file=os.path.join(self.model_path, \"assets/tokenizer/vocabulary.spm\")) # Use os.path.join\n            else:\n                from transformers import DebertaV2Tokenizer as _Tok\n                self.tokenizer = _Tok(vocab_file=os.path.join(self.model_path, \"assets/tokenizer/vocabulary.spm\")) # Use os.path.join\n        except Exception:\n            # fallback to original import name/location\n            try:\n                from transformers import DebertaV2Tokenizer as _Tok\n                self.tokenizer = _Tok(vocab_file=os.path.join(self.model_path, \"assets/tokenizer/vocabulary.spm\")) # Use os.path.join\n            except Exception:\n                raise\n\n        self.tokenizer.model_max_length = self.max_length\n\n        # Load model backbone (Keras)\n        self.model = DebertaV3Backbone(\n            vocabulary_size=128100,\n            num_layers=12,\n            num_heads=6,\n            hidden_dim=384,\n            intermediate_dim=1536,\n            dropout=0.1,\n            max_sequence_length=512,\n            bucket_size=256\n        )\n        self.model.load_weights(os.path.join(self.model_path, \"model.weights.h5\")) # Use os.path.join\n\n        print(\"✅ Model input names:\", [input.name for input in self.model.inputs])\n        # optional: warm-up call with zeros to ensure TF places variables on GPU if available\n        try:\n            import tensorflow as tf\n            dummy_input = {\n                \"padding_mask\": tf.zeros((1, self.max_length), dtype=tf.int32),\n                \"token_ids\": tf.zeros((1, self.max_length), dtype=tf.int32),\n            }\n            _ = self.model(dummy_input)\n        except Exception:\n            pass\n\n    def fit(self, X, y=None):\n        return self\n\n    def transform(self, X):\n        import tensorflow as tf\n        import numpy as np\n\n        # Accept pandas Series / DataFrame / numpy array / list\n        if hasattr(X, \"to_list\"):\n            texts = X.to_list()\n        else:\n            texts = list(X)\n\n        # Coerce each row to a single text string.\n        def _to_text(item):\n            if isinstance(item, (list, tuple, np.ndarray)):\n                if len(item) == 0:\n                    return \"\"\n                if len(item) == 1:\n                    return str(item[0])\n                return \" \".join(str(x) for x in item)\n            return \"\" if item is None else str(item)\n\n        texts = [_to_text(t) for t in texts]\n        n = len(texts)\n        if n == 0:\n            # no data -> return empty with inferred dim if possible\n            try:\n                hidden_dim = int(self.model.output_shape[-1])\n                return np.zeros((0, hidden_dim), dtype=np.float32)\n            except Exception:\n                return np.empty((0,))\n\n        # If tokenizer is \"fast\" we can tokenize the whole dataset in one call (fast, Rust-backed)\n        try:\n            if self.use_fast_tokenizer:\n                # Vectorized tokenization to numpy arrays (fast)\n                tokens_np = self.tokenizer(\n                    texts,\n                    padding=\"max_length\",\n                    truncation=True,\n                    max_length=self.max_length,\n                    return_tensors=\"np\",\n                )\n                # Build a tf.data.Dataset to feed the model efficiently (reduces Python overhead)\n                input_ids = tf.cast(tokens_np[\"input_ids\"], tf.int32)\n                attention_mask = tf.cast(tokens_np[\"attention_mask\"], tf.int32)\n\n                ds = tf.data.Dataset.from_tensor_slices(\n                    {\"token_ids\": input_ids, \"padding_mask\": attention_mask}\n                )\n                ds = ds.batch(max(1, self.batch_size)).prefetch(tf.data.AUTOTUNE)\n\n                # Use model.predict on the dataset so Keras can optimize execution and improve GPU utilization\n                outputs = self.model.predict(ds, verbose=0)\n                embeddings = np.mean(outputs, axis=1)\n                return embeddings\n        except Exception:\n            # fall back to batching loop below if anything fails\n            pass\n\n        # Fallback: batch-tokenize and call model per-batch (keeps fewer copies)\n        all_embeddings = []\n        hidden_dim = None\n        try:\n            hidden_dim = int(self.model.output_shape[-1])\n        except Exception:\n            hidden_dim = None\n\n        for i in range(0, n, self.batch_size):\n            batch = texts[i:i + self.batch_size]\n            # Tokenize directly to TensorFlow tensors where possible (reduces copies)\n            try:\n                tokens = self.tokenizer(\n                    batch,\n                    padding=\"max_length\",\n                    truncation=True,\n                    max_length=self.max_length,\n                    return_tensors=\"tf\",\n                )\n                token_ids_tf = tf.cast(tokens[\"input_ids\"], tf.int32)\n                attention_mask_tf = tf.cast(tokens[\"attention_mask\"], dtype=tf.int32)\n                model_inputs = {\"padding_mask\": attention_mask_tf, \"token_ids\": token_ids_tf}\n                outputs = self.model(model_inputs)\n                embeddings = tf.reduce_mean(outputs, axis=1).numpy()\n            except Exception:\n                # safest fallback: numpy tokenization then tf convert\n                tokens = self.tokenizer(\n                    [str(t) for t in batch],\n                    padding=\"max_length\",\n                    truncation=True,\n                    max_length=self.max_length,\n                    return_tensors=\"np\",\n                )\n                token_ids_tf = tf.convert_to_tensor(tokens[\"input_ids\"], dtype=tf.int32)\n                attention_mask_tf = tf.convert_to_tensor(tokens[\"attention_mask\"], dtype=tf.int32)\n                model_inputs = {\"padding_mask\": attention_mask_tf, \"token_ids\": token_ids_tf}\n                outputs = self.model(model_inputs)\n                embeddings = tf.reduce_mean(outputs, axis=1).numpy()\n\n            all_embeddings.append(embeddings)\n            if hidden_dim is None:\n                try:\n                    hidden_dim = int(embeddings.shape[1])\n                except Exception:\n                    hidden_dim = None\n\n        if not all_embeddings:\n            if hidden_dim is not None:\n                return np.zeros((0, hidden_dim), dtype=np.float32)\n            return np.empty((0,))\n\n        return np.vstack(all_embeddings)","metadata":{"editable":false,"execution":{"iopub.status.busy":"2025-09-01T11:11:36.366153Z","iopub.execute_input":"2025-09-01T11:11:36.366354Z","iopub.status.idle":"2025-09-01T11:11:36.402906Z","shell.execute_reply.started":"2025-09-01T11:11:36.366339Z","shell.execute_reply":"2025-09-01T11:11:36.402327Z"}}},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras import layers, models\nfrom transformers import DebertaV2Tokenizer\nfrom sklearn.base import BaseEstimator, TransformerMixin\nimport torch\nimport numpy as np\nimport tensorflow as tf\nfrom keras_hub.src.models.deberta_v3.deberta_v3_backbone import DebertaV3Backbone\nimport os # Import os module\nimport multiprocessing\nclass HFEmbedder(BaseEstimator, TransformerMixin):\n    def __init__(self, model_path, batch_size=16, max_length=512, use_fast_tokenizer=True, enable_mixed_precision=True, embedding_type=\"mean\"):\n        self.embedding_type = embedding_type\n        self.model_path = model_path\n        self.batch_size = int(batch_size)\n        self.max_length = min(int(max_length), 512)\n        self.use_fast_tokenizer = use_fast_tokenizer\n        self.enable_mixed_precision = enable_mixed_precision # Add this line to store the parameter\n        self._cpu_count = multiprocessing.cpu_count()\n\n        # Make TF GPU usage explicit / safe\n        try:\n            gpus = tf.config.list_physical_devices(\"GPU\")\n            if gpus:\n                for g in gpus:\n                    tf.config.experimental.set_memory_growth(g, True)\n        except Exception:\n            pass\n\n        # optionally use mixed precision on GPUs (speeds up fp16 capable GPUs)\n        try:\n            if self.enable_mixed_precision: # Use self.enable_mixed_precision\n                from tensorflow.keras import mixed_precision\n                mixed_precision.set_global_policy(\"mixed_float16\")\n        except Exception:\n            pass\n\n        # Load tokenizer (prefer fast tokenizer if available)\n        try:\n            if self.use_fast_tokenizer:\n                from transformers import DebertaV2TokenizerFast as _TokFast\n                self.tokenizer = _TokFast(vocab_file=os.path.join(self.model_path, \"assets/tokenizer/vocabulary.spm\")) # Use os.path.join\n            else:\n                from transformers import DebertaV2Tokenizer as _Tok\n                self.tokenizer = _Tok(vocab_file=os.path.join(self.model_path, \"assets/tokenizer/vocabulary.spm\")) # Use os.path.join\n        except Exception:\n            # fallback to original import name/location\n            try:\n                from transformers import DebertaV2Tokenizer as _Tok\n                self.tokenizer = _Tok(vocab_file=os.path.join(self.model_path, \"assets/tokenizer/vocabulary.spm\")) # Use os.path.join\n            except Exception:\n                raise\n\n        self.tokenizer.model_max_length = self.max_length\n\n        # Load model backbone (Keras)\n        config = self._detect_model_config()\n        self.model = DebertaV3Backbone(\n            vocabulary_size=128100,\n            num_layers=config[\"num_layers\"],\n            num_heads=config[\"num_heads\"],\n            hidden_dim=config[\"hidden_dim\"],\n            intermediate_dim=config[\"intermediate_dim\"],\n            dropout=0.1,\n            max_sequence_length=512,\n            bucket_size=256\n        )\n\n\n        self.model.load_weights(os.path.join(self.model_path, \"model.weights.h5\"),skip_mismatch=True) # Use os.path.join\n\n        print(\"✅ Model input names:\", [input.name for input in self.model.inputs])\n        # optional: warm-up call with zeros to ensure TF places variables on GPU if available\n        try:\n            import tensorflow as tf\n            dummy_input = {\n                \"padding_mask\": tf.zeros((1, self.max_length), dtype=tf.int32),\n                \"token_ids\": tf.zeros((1, self.max_length), dtype=tf.int32),\n            }\n            _ = self.model(dummy_input)\n        except Exception:\n            pass\n    def _detect_model_config(self):\n            import os\n            import json\n        \n            config_path = os.path.join(self.model_path, \"config.json\")\n            if os.path.exists(config_path):\n                try:\n                    with open(config_path, \"r\") as f:\n                        config = json.load(f)\n                    return {\n                        \"num_layers\": config.get(\"num_layers\", 12),\n                        \"num_heads\": config.get(\"num_attention_heads\", 12),\n                        \"hidden_dim\": config.get(\"hidden_size\", 768),\n                        \"intermediate_dim\": config.get(\"intermediate_size\", 3072),\n                    }\n                except Exception as e:\n                    print(f\"⚠️ Failed to read config.json: {e}\")\n        \n            # Fallback: infer from folder name\n            path_lower = self.model_path.lower()\n            if \"small\" in path_lower:\n                return {\n                    \"num_layers\": 12,\n                    \"num_heads\": 6,\n                    \"hidden_dim\": 768,\n                    \"intermediate_dim\": 3072,\n                }\n            elif \"base\" in path_lower:\n                return {\n                    \"num_layers\": 12,\n                    \"num_heads\": 12,\n                    \"hidden_dim\": 768,\n                    \"intermediate_dim\": 3072,\n                }\n        \n            print(\"⚠️ Could not auto-detect model config. Using default base config.\")\n            return {\n                \"num_layers\": 12,\n                \"num_heads\": 12,\n                \"hidden_dim\": 768,\n                \"intermediate_dim\": 3072,\n            }\n\n\n    def fit(self, X, y=None):\n        return self\n\n    def transform(self, X):\n        import tensorflow as tf\n        import numpy as np\n    \n        # Accept pandas Series / DataFrame / numpy array / list\n        if hasattr(X, \"to_list\"):\n            texts = X.to_list()\n        else:\n            texts = list(X)\n    \n        def _to_text(item):\n            if isinstance(item, (list, tuple, np.ndarray)):\n                if len(item) == 0:\n                    return \"\"\n                if len(item) == 1:\n                    return str(item[0])\n                return \" \".join(str(x) for x in item)\n            return \"\" if item is None else str(item)\n    \n        texts = [_to_text(t) for t in texts]\n        n = len(texts)\n        if n == 0:\n            try:\n                hidden_dim = int(self.model.output_shape[-1])\n                return {\n                    \"raw\": np.zeros((0, self.max_length, hidden_dim), dtype=np.float32),\n                    \"mean\": np.zeros((0, hidden_dim), dtype=np.float32),\n                    \"median\": np.zeros((0, hidden_dim), dtype=np.float32),\n                    \"max\": np.zeros((0, hidden_dim), dtype=np.float32),\n                    \"min\": np.zeros((0, hidden_dim), dtype=np.float32),\n                }\n            except Exception:\n                return {}\n    \n        # Store outputs\n        raw_outputs = []\n    \n        for i in range(0, n, self.batch_size):\n            batch = texts[i:i + self.batch_size]\n            try:\n                tokens = self.tokenizer(\n                    batch,\n                    padding=\"max_length\",\n                    truncation=True,\n                    max_length=self.max_length,\n                    return_tensors=\"tf\",\n                )\n                token_ids_tf = tf.cast(tokens[\"input_ids\"], tf.int32)\n                attention_mask_tf = tf.cast(tokens[\"attention_mask\"], dtype=tf.int32)\n                model_inputs = {\"padding_mask\": attention_mask_tf, \"token_ids\": token_ids_tf}\n                outputs = self.model(model_inputs)\n                outputs_np = outputs.numpy()\n            except Exception:\n                tokens = self.tokenizer(\n                    [str(t) for t in batch],\n                    padding=\"max_length\",\n                    truncation=True,\n                    max_length=self.max_length,\n                    return_tensors=\"np\",\n                )\n                token_ids_tf = tf.convert_to_tensor(tokens[\"input_ids\"], dtype=tf.int32)\n                attention_mask_tf = tf.convert_to_tensor(tokens[\"attention_mask\"], dtype=tf.int32)\n                model_inputs = {\"padding_mask\": attention_mask_tf, \"token_ids\": token_ids_tf}\n                outputs = self.model(model_inputs)\n                outputs_np = outputs.numpy()\n    \n            raw_outputs.append(outputs_np)\n    \n        # Combine all batches\n        full_output = np.vstack(raw_outputs)  # shape: [n_samples, seq_len, hidden_dim]\n    \n        \n        mean_embeddings = np.mean(full_output, axis=1)\n        median_embeddings = np.median(full_output, axis=1)\n        max_embeddings = np.max(full_output, axis=1)\n        min_embeddings = np.min(full_output, axis=1)\n    \n        # Return per-sample dicts\n        return [\n            {       \n                \"text\": texts[i],\n                \"raw\": full_output[i],\n                \"mean\": mean_embeddings[i],\n                \"median\": median_embeddings[i],\n                \"max\": max_embeddings[i],\n                \"min\": min_embeddings[i],\n            }\n            for i in range(len(texts))\n        ]\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-09T12:27:14.126843Z","iopub.execute_input":"2025-09-09T12:27:14.127206Z","iopub.status.idle":"2025-09-09T12:27:14.168395Z","shell.execute_reply.started":"2025-09-09T12:27:14.127175Z","shell.execute_reply":"2025-09-09T12:27:14.167150Z"}},"outputs":[],"execution_count":380},{"cell_type":"markdown","source":"from sklearn.base import BaseEstimator, TransformerMixin\nfrom transformers import TFAutoModel, AutoTokenizer\nimport tensorflow as tf\nimport numpy as np\n\nclass HFEmbedder1(BaseEstimator, TransformerMixin):\n    def __init__(self, model_path=\"microsoft/deberta-v3-xsmall\", batch_size=4, max_length=512, enable_mixed_precision=True):\n        self.model_path = model_path\n        self.batch_size = batch_size\n        self.max_length = max_length\n        self.enable_mixed_precision = enable_mixed_precision\n\n        # Enable mixed precision if requested\n        if self.enable_mixed_precision:\n            try:\n                from tensorflow.keras import mixed_precision\n                mixed_precision.set_global_policy(\"mixed_float16\")\n            except Exception:\n                pass\n\n        # Load tokenizer and model from HuggingFace\n        self.tokenizer = AutoTokenizer.from_pretrained(self.model_path)\n        self.model = TFAutoModel.from_pretrained(self.model_path)\n\n    def fit(self, X, y=None):\n        return self\n\n    def transform(self, X):\n        import pandas as pd\n    \n        # Handle different input types from ColumnTransformer\n        if isinstance(X, pd.DataFrame):\n            # If multiple columns are passed, take the first one\n            if X.shape[1] > 1:\n                texts = X.iloc[:, 0].astype(str).tolist()\n            else:\n                texts = X.squeeze().astype(str).tolist()\n        elif hasattr(X, \"to_list\"):\n            texts = X.astype(str).to_list()\n        else:\n            texts = [str(x) for x in X]\n    \n        if not texts:\n            return np.empty((0, self.model.config.hidden_size), dtype=np.float32)\n    \n        # Tokenize\n        tokens = self.tokenizer(\n            texts,\n            padding=\"max_length\",\n            truncation=True,\n            max_length=self.max_length,\n            return_tensors=\"tf\"\n        )\n    \n        # Forward pass\n        outputs = self.model(**tokens)\n        embeddings = tf.reduce_mean(outputs.last_hidden_state, axis=1).numpy()\n    \n        return embeddings\n\n","metadata":{"execution":{"iopub.status.busy":"2025-09-06T07:41:34.146511Z","iopub.execute_input":"2025-09-06T07:41:34.146761Z","iopub.status.idle":"2025-09-06T07:41:34.165659Z","shell.execute_reply.started":"2025-09-06T07:41:34.146739Z","shell.execute_reply":"2025-09-06T07:41:34.165149Z"}}},{"cell_type":"code","source":"import re\nimport nltk\nfrom nltk.corpus import stopwords\nfrom nltk.stem import WordNetLemmatizer\n\nnltk.download(\"stopwords\")\nnltk.download(\"wordnet\")\n\nstop_words = set(stopwords.words(\"english\"))\nlemmatizer = WordNetLemmatizer()\n\ndef clean_text_for_common_words(text):\n    text = text.lower()\n    text = re.sub(r'[^\\w\\s]', '', text)\n    tokens = text.split()\n    return [lemmatizer.lemmatize(word) for word in tokens if word not in stop_words]\n\n\nclass CommonWordsTransformer(BaseEstimator, TransformerMixin):\n    def __init__(self):\n        pass\n\n    def fit(self, X, y=None):\n        return self\n\n    def transform(self, X):\n        common_meaningful_words_a = []\n        common_meaningful_words_b = []\n\n        for index, row in X.iterrows():\n            prompt_tokens = clean_text_for_common_words(row['prompt'])\n            response_a_tokens = clean_text_for_common_words(row['response_a'])\n            response_b_tokens = clean_text_for_common_words(row['response_b'])\n\n            common_meaningful_a = len(set(prompt_tokens) & set(response_a_tokens))\n            common_meaningful_b = len(set(prompt_tokens) & set(response_b_tokens))\n\n            common_meaningful_words_a.append(common_meaningful_a)\n            common_meaningful_words_b.append(common_meaningful_b)\n\n        return np.array([common_meaningful_words_a, common_meaningful_words_b]).T","metadata":{"trusted":true,"editable":false,"execution":{"iopub.status.busy":"2025-09-09T12:27:14.169642Z","iopub.execute_input":"2025-09-09T12:27:14.170042Z","iopub.status.idle":"2025-09-09T12:27:14.306606Z","shell.execute_reply.started":"2025-09-09T12:27:14.170018Z","shell.execute_reply":"2025-09-09T12:27:14.305025Z"}},"outputs":[{"name":"stderr","text":"[nltk_data] Downloading package stopwords to /usr/share/nltk_data...\n[nltk_data]   Package stopwords is already up-to-date!\n[nltk_data] Downloading package wordnet to /usr/share/nltk_data...\n[nltk_data]   Package wordnet is already up-to-date!\n","output_type":"stream"}],"execution_count":381},{"cell_type":"code","source":"X_train[\"prompt_clean\"] = X_train[\"prompt\"].apply(clean_text_for_common_words)\nX_train[\"response_a_clean\"] = X_train[\"response_a\"].apply(clean_text_for_common_words)\nX_train[\"response_b_clean\"] = X_train[\"response_b\"].apply(clean_text_for_common_words)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-09T12:27:14.307950Z","iopub.execute_input":"2025-09-09T12:27:14.308345Z","iopub.status.idle":"2025-09-09T12:27:14.338947Z","shell.execute_reply.started":"2025-09-09T12:27:14.308322Z","shell.execute_reply":"2025-09-09T12:27:14.337514Z"}},"outputs":[],"execution_count":382},{"cell_type":"markdown","source":"embedder = HFEmbedder(model_path=\"/kaggle/input/deberta_v3/keras/deberta_v3_extra_small_en/3\")\nX_train[\"prompt_clean\"] = X_train[\"prompt\"].apply(clean_text_for_common_words)\nX_train[\"response_a_clean\"] = X_train[\"response_a\"].apply(clean_text_for_common_words)\nX_train[\"response_b_clean\"] = X_train[\"response_b\"].apply(clean_text_for_common_words)\n\ncommon_words_transformer = CommonWordsTransformer()\n# Updated preprocessing transformer\npreprocessing = ColumnTransformer([\n    (\"prompt_embed\", embedder, \"prompt_clean\"),\n    (\"resp_a_embed\", embedder, \"response_a_clean\"),\n    (\"resp_b_embed\", embedder, \"response_a_clean\"),\n    (\"common_words\", common_words_transformer, [\"prompt\", \"response_a\", \"response_b\"]),\n    #(\"num\", \"passthrough\", [\"id\"])\n])\n\n","metadata":{"editable":false,"execution":{"iopub.status.busy":"2025-09-02T10:34:24.453915Z","iopub.execute_input":"2025-09-02T10:34:24.456071Z","iopub.status.idle":"2025-09-02T10:34:24.614454Z","shell.execute_reply.started":"2025-09-02T10:34:24.455996Z","shell.execute_reply":"2025-09-02T10:34:24.611660Z"}}},{"cell_type":"markdown","source":"class HFEmbedder2(BaseEstimator, TransformerMixin):\n    def __init__(self, model_path, batch_size=16, max_length=512, use_fast_tokenizer=True, enable_mixed_precision=True):\n        import tensorflow as tf\n        import numpy as np\n        import os\n        import multiprocessing\n\n        self.model_path = model_path\n        self.batch_size = int(batch_size)\n        self.max_length = min(int(max_length), 512)\n        self.use_fast_tokenizer = use_fast_tokenizer\n        self.enable_mixed_precision = enable_mixed_precision\n        self._cpu_count = multiprocessing.cpu_count()\n\n        # GPU memory growth\n        try:\n            gpus = tf.config.list_physical_devices(\"GPU\")\n            if gpus:\n                for g in gpus:\n                    tf.config.experimental.set_memory_growth(g, True)\n        except Exception:\n            pass\n\n        # Mixed precision\n        try:\n            if self.enable_mixed_precision:\n                from tensorflow.keras import mixed_precision\n                mixed_precision.set_global_policy(\"mixed_float16\")\n        except Exception:\n            pass\n\n        # Tokenizer\n        tokenizer_path = os.path.join(self.model_path, \"assets/tokenizer/vocabulary.spm\")\n        try:\n            if self.use_fast_tokenizer:\n                from transformers import DebertaV2TokenizerFast\n                self.tokenizer = DebertaV2TokenizerFast(vocab_file=tokenizer_path)\n            else:\n                from transformers import DebertaV2Tokenizer\n                self.tokenizer = DebertaV2Tokenizer(vocab_file=tokenizer_path)\n        except Exception:\n            from transformers import DebertaV2Tokenizer\n            self.tokenizer = DebertaV2Tokenizer(vocab_file=tokenizer_path)\n\n        self.tokenizer.model_max_length = self.max_length\n\n        # Auto-detect model config\n        config = self._detect_model_config()\n\n        # Load model\n        from keras_hub.src.models.deberta_v3.deberta_v3_backbone import DebertaV3Backbone\n        self.model = DebertaV3Backbone(\n            vocabulary_size=128100,\n            num_layers=config[\"num_layers\"],\n            num_heads=config[\"num_heads\"],\n            hidden_dim=config[\"hidden_dim\"],\n            intermediate_dim=config[\"intermediate_dim\"],\n            dropout=0.1,\n            max_sequence_length=512,\n            bucket_size=256\n        )\n\n        weights_path = os.path.join(self.model_path, \"model.weights.h5\")\n        self.model.load_weights(weights_path, skip_mismatch=True)\n\n\n        print(\"✅ Model input names:\", [input.name for input in self.model.inputs])\n\n        # Warm-up\n        try:\n            dummy_input = {\n                \"padding_mask\": tf.zeros((1, self.max_length), dtype=tf.int32),\n                \"token_ids\": tf.zeros((1, self.max_length), dtype=tf.int32),\n            }\n            _ = self.model(dummy_input)\n        except Exception:\n            pass\n\n    def _detect_model_config(self):\n        import os\n        import json\n\n        config_path = os.path.join(self.model_path, \"config.json\")\n        if os.path.exists(config_path):\n            try:\n                with open(config_path, \"r\") as f:\n                    config = json.load(f)\n                return {\n                    \"num_layers\": config.get(\"num_layers\", 12),\n                    \"num_heads\": config.get(\"num_attention_heads\", 12),\n                    \"hidden_dim\": config.get(\"hidden_size\", 768),\n                    \"intermediate_dim\": config.get(\"intermediate_size\", 3072),\n                }\n            except Exception as e:\n                print(f\"⚠️ Failed to read config.json: {e}\")\n\n        # Fallback: infer from folder name\n        path_lower = self.model_path.lower()\n        if \"small\" in path_lower:\n            return {\"num_layers\": 12, \"num_heads\": 6, \"hidden_dim\": 768, \"intermediate_dim\": 3072}\n        elif \"base\" in path_lower:\n            return {\"num_layers\": 12, \"num_heads\": 12, \"hidden_dim\": 768, \"intermediate_dim\": 3072}\n\n        print(\"⚠️ Could not auto-detect model config. Using default base config.\")\n        return {\"num_layers\": 12, \"num_heads\": 12, \"hidden_dim\": 768, \"intermediate_dim\": 3072}\n\n    def fit(self, X, y=None):\n        return self\n\n    def transform(self, X):\n        import tensorflow as tf\n        import numpy as np\n\n        if hasattr(X, \"to_list\"):\n            texts = X.to_list()\n        else:\n            texts = list(X)\n\n        def _to_text(item):\n            if isinstance(item, (list, tuple, np.ndarray)):\n                return \" \".join(str(x) for x in item if x)\n            return \"\" if item is None else str(item)\n\n        texts = [_to_text(t) for t in texts]\n        n = len(texts)\n        if n == 0:\n            try:\n                hidden_dim = int(self.model.output_shape[-1])\n                return np.zeros((0, hidden_dim), dtype=np.float32)\n            except Exception:\n                return np.empty((0,))\n\n        try:\n            if self.use_fast_tokenizer:\n                tokens_np = self.tokenizer(\n                    texts,\n                    padding=\"max_length\",\n                    truncation=True,\n                    max_length=self.max_length,\n                    return_tensors=\"np\",\n                )\n                input_ids = tf.cast(tokens_np[\"input_ids\"], tf.int32)\n                attention_mask = tf.cast(tokens_np[\"attention_mask\"], tf.int32)\n\n                ds = tf.data.Dataset.from_tensor_slices(\n                    {\"token_ids\": input_ids, \"padding_mask\": attention_mask}\n                ).batch(self.batch_size).prefetch(tf.data.AUTOTUNE)\n\n                outputs = self.model.predict(ds, verbose=0)\n                if isinstance(outputs, dict) and \"last_hidden_state\" in outputs:\n                    outputs = outputs[\"last_hidden_state\"]\n                embeddings = np.mean(outputs, axis=1)\n                return embeddings\n        except Exception as e:\n            print(f\"⚠️ Fast path failed: {e}\")\n\n        # Fallback\n        all_embeddings = []\n        for i in range(0, n, self.batch_size):\n            batch = texts[i:i + self.batch_size]\n            try:\n                tokens = self.tokenizer(\n                    batch,\n                    padding=\"max_length\",\n                    truncation=True,\n                    max_length=self.max_length,\n                    return_tensors=\"tf\",\n                )\n                token_ids_tf = tf.cast(tokens[\"input_ids\"], tf.int32)\n                attention_mask_tf = tf.cast(tokens[\"attention_mask\"], tf.int32)\n                model_inputs = {\"padding_mask\": attention_mask_tf, \"token_ids\": token_ids_tf}\n                outputs = self.model(model_inputs)\n                if isinstance(outputs, dict) and \"last_hidden_state\" in outputs:\n                    outputs = outputs[\"last_hidden_state\"]\n                embeddings = tf.reduce_mean(outputs, axis=1).numpy()\n            except Exception as e:\n                print(f\"⚠️ Batch fallback failed: {e}\")\n                embeddings = np.zeros((len(batch), self.model.output_shape[-1]), dtype=np.float32)\n\n            all_embeddings.append(embeddings)\n\n        return np.vstack(all_embeddings)\n","metadata":{"execution":{"iopub.status.busy":"2025-09-06T07:41:54.600803Z","iopub.execute_input":"2025-09-06T07:41:54.601073Z","iopub.status.idle":"2025-09-06T07:41:54.627854Z","shell.execute_reply.started":"2025-09-06T07:41:54.601055Z","shell.execute_reply":"2025-09-06T07:41:54.627040Z"}}},{"cell_type":"code","source":"from sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.utils.validation import check_is_fitted\nfrom sklearn.metrics.pairwise import cosine_similarity\n\nclass PromptResponseSimilarity(BaseEstimator, TransformerMixin):\n    def fit(self, X, y=None):\n        return self\n\n    def transform(self, X):\n        # X is a 2D array of shape (n_samples, 3 * embedding_dim)\n        n_samples, total_dim = X.shape\n        embedding_dim = total_dim // 3\n\n        prompt_embeds = X[:, :embedding_dim]\n        resp_a_embeds = X[:, embedding_dim:2*embedding_dim]\n        resp_b_embeds = X[:, 2*embedding_dim:]\n\n        sim_a = np.array([\n            cosine_similarity(p.reshape(1, -1), a.reshape(1, -1))[0, 0]\n            for p, a in zip(prompt_embeds, resp_a_embeds)\n        ])\n        sim_b = np.array([\n            cosine_similarity(p.reshape(1, -1), b.reshape(1, -1))[0, 0]\n            for p, b in zip(prompt_embeds, resp_b_embeds)\n        ])\n\n        return np.vstack([sim_a, sim_b]).T\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-09T12:27:14.340549Z","iopub.execute_input":"2025-09-09T12:27:14.341007Z","iopub.status.idle":"2025-09-09T12:27:14.354532Z","shell.execute_reply.started":"2025-09-09T12:27:14.340970Z","shell.execute_reply":"2025-09-09T12:27:14.353043Z"}},"outputs":[],"execution_count":383},{"cell_type":"code","source":"class RawEmbeddingSimilarity(BaseEstimator, TransformerMixin):\n    def fit(self, X, y=None):\n        return self\n\n    def transform(self, X):\n        prompt_embeds = X[\"prompt_embed\"].apply(lambda x: x[\"raw\"]).tolist()\n        resp_a_embeds = X[\"resp_a_embed\"].apply(lambda x: x[\"raw\"]).tolist()\n        resp_b_embeds = X[\"resp_b_embed\"].apply(lambda x: x[\"raw\"]).tolist()\n    \n        sim_a, sim_b = [], []\n        for p, a, b in zip(prompt_embeds, resp_a_embeds, resp_b_embeds):\n            sim_a.append(cosine_similarity(p.flatten().reshape(1, -1), a.flatten().reshape(1, -1))[0, 0])\n            sim_b.append(cosine_similarity(p.flatten().reshape(1, -1), b.flatten().reshape(1, -1))[0, 0])\n    \n        return np.vstack([sim_a, sim_b]).T\n\n        \nclass AggregatedEmbeddingSimilarity(BaseEstimator, TransformerMixin):\n    def __init__(self, agg_type=\"mean\"):\n        self.agg_type = agg_type\n\n    def fit(self, X, y=None):\n        return self\n\n    \n    def transform(self, X):\n        prompt_embeds = X[\"prompt_embed\"].apply(lambda x: x[self.agg_type]).tolist()\n        resp_a_embeds = X[\"resp_a_embed\"].apply(lambda x: x[self.agg_type]).tolist()\n        resp_b_embeds = X[\"resp_b_embed\"].apply(lambda x: x[self.agg_type]).tolist()\n    \n        sim_a = [cosine_similarity(p.reshape(1, -1), a.reshape(1, -1))[0, 0] for p, a in zip(prompt_embeds, resp_a_embeds)]\n        sim_b = [cosine_similarity(p.reshape(1, -1), b.reshape(1, -1))[0, 0] for p, b in zip(prompt_embeds, resp_b_embeds)]\n    \n        return np.vstack([sim_a, sim_b]).T\n\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-09T12:27:14.355855Z","iopub.execute_input":"2025-09-09T12:27:14.356320Z","iopub.status.idle":"2025-09-09T12:27:14.387168Z","shell.execute_reply.started":"2025-09-09T12:27:14.356294Z","shell.execute_reply":"2025-09-09T12:27:14.385807Z"}},"outputs":[],"execution_count":384},{"cell_type":"code","source":"from sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nimport numpy as np\nimport pandas as pd\n\nclass TFIDFAttentionEmbedder(BaseEstimator, TransformerMixin):\n    def __init__(self, tokenizer, max_length=512, embedding_dim=768):\n        self.tokenizer = tokenizer\n        self.vectorizer = TfidfVectorizer()\n        self.max_length = max_length\n        self.embedding_dim = embedding_dim\n\n    def fit(self, X, y=None):\n        texts = []\n\n        # Extract texts from various input formats\n        if isinstance(X, (list, np.ndarray)):\n            for row in X:\n                if isinstance(row, (list, tuple)):\n                    for item in row:\n                        if isinstance(item, dict):\n                            text = item.get(\"text\", \"\")\n                            if text.strip():\n                                texts.append(text)\n                elif isinstance(row, dict):\n                    text = row.get(\"text\", \"\")\n                    if text.strip():\n                        texts.append(text)\n        elif isinstance(X, pd.DataFrame):\n            for col in X.columns:\n                col_texts = X[col].apply(lambda x: x.get(\"text\", \"\") if isinstance(x, dict) else \"\").tolist()\n                texts.extend([t for t in col_texts if t.strip()])\n\n        if not texts:\n            raise ValueError(\"No valid texts found for TF-IDF fitting.\")\n\n        self.vectorizer.fit(texts)\n        return self\n\n    def transform(self, X):\n        weighted_embeddings = []\n    \n        for sample in X:\n            # If sample is a dict (expected format), extract fields\n            if isinstance(sample, dict):\n                text = sample.get(\"text\", \"\")\n                token_embeddings = sample.get(\"raw\", None)\n            else:\n                # Fallback: treat sample as plain text or unsupported format\n                text = str(sample)\n                token_embeddings = None\n    \n            if token_embeddings is None or len(text.strip()) == 0:\n                weighted_embeddings.append(np.zeros(self.embedding_dim))\n                continue\n    \n            tokens = self.tokenizer.tokenize(text)\n            tfidf_vector = self.vectorizer.transform([text]).toarray()[0]\n    \n            token_weights = []\n            for token in tokens[:self.max_length]:\n                idx = self.vectorizer.vocabulary_.get(token.lower(), None)\n                token_weights.append(tfidf_vector[idx] if idx is not None else 0.0)\n    \n            token_weights = np.array(token_weights)\n            token_embeddings = token_embeddings[:len(token_weights)]\n    \n            if token_weights.sum() > 0:\n                token_weights = token_weights / token_weights.sum()\n    \n            if token_weights.sum() == 0 or token_embeddings.shape[0] == 0:\n                weighted_embeddings.append(np.zeros(token_embeddings.shape[-1]))\n            else:\n                weighted = np.average(token_embeddings, axis=0, weights=token_weights)\n                weighted_embeddings.append(weighted)\n    \n        return np.array(weighted_embeddings)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-09T12:27:14.388297Z","iopub.execute_input":"2025-09-09T12:27:14.388536Z","iopub.status.idle":"2025-09-09T12:27:14.411827Z","shell.execute_reply.started":"2025-09-09T12:27:14.388517Z","shell.execute_reply":"2025-09-09T12:27:14.410634Z"}},"outputs":[],"execution_count":385},{"cell_type":"code","source":"embedder = HFEmbedder(model_path=\"/kaggle/input/deberta_v3/keras/deberta_v3_base_en/3\")\n#/kaggle/input/deberta_v3/keras/deberta_v3_base_en/3\ncommon_words_transformer = CommonWordsTransformer()\n# Updated preprocessing transformer\npreprocessing = ColumnTransformer([\n    (\"prompt_embed\", embedder, \"prompt_clean\"),\n    (\"resp_a_embed\", embedder, \"response_a_clean\"),\n    (\"resp_b_embed\", embedder, \"response_b_clean\"),\n    (\"common_words\", common_words_transformer, [\"prompt\", \"response_a\", \"response_b\"]),\n    #(\"num\", \"passthrough\", [\"id\"])\n])\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-09T12:27:14.413136Z","iopub.execute_input":"2025-09-09T12:27:14.413476Z","iopub.status.idle":"2025-09-09T12:27:33.091911Z","shell.execute_reply.started":"2025-09-09T12:27:14.413448Z","shell.execute_reply":"2025-09-09T12:27:33.090235Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/transformers/convert_slow_tokenizer.py:564: UserWarning: The sentencepiece tokenizer that you are converting to a fast tokenizer uses the byte fallback option which is not implemented in the fast tokenizers. In practice this means that the fast version of the tokenizer can produce unknown tokens whereas the sentencepiece version would have converted these unknown tokens into a sequence of byte tokens matching the original piece of text.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"✅ Model input names: ['padding_mask', 'token_ids']\n","output_type":"stream"}],"execution_count":386},{"cell_type":"code","source":"from sklearn.pipeline import Pipeline, FeatureUnion\nfrom sklearn.compose import ColumnTransformer\n\n# Embedding + similarity pipeline\nembedding_pipeline = Pipeline([\n    (\"embed_cols\", ColumnTransformer([\n        (\"prompt_embed\", embedder, \"prompt_clean\"),\n        (\"resp_a_embed\", embedder, \"response_a_clean\"),\n        (\"resp_b_embed\", embedder, \"response_b_clean\"),\n    ])),\n    (\"similarity\", PromptResponseSimilarity())\n])\n\n# Final preprocessing pipeline\npreprocessing = FeatureUnion([\n    (\"embedding_similarity\", embedding_pipeline),\n    (\"common_words\", ColumnTransformer([\n        (\"common_words\", common_words_transformer, [\"prompt\", \"response_a\", \"response_b\"])\n    ]))\n])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-09T12:27:33.093766Z","iopub.execute_input":"2025-09-09T12:27:33.094118Z","iopub.status.idle":"2025-09-09T12:27:33.314283Z","shell.execute_reply.started":"2025-09-09T12:27:33.094095Z","shell.execute_reply":"2025-09-09T12:27:33.312543Z"}},"outputs":[],"execution_count":387},{"cell_type":"code","source":"class DictWrapper(BaseEstimator, TransformerMixin):\n    def __init__(self, embedder):\n        self.embedder = embedder\n\n    def fit(self, X, y=None):\n        return self\n\n    def transform(self, X):\n        # Returns a 2D array of shape (n_samples, 1), each cell is a dict\n        embeddings = self.embedder.transform(X)\n        return np.array(embeddings).reshape(-1, 1)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-09T12:27:33.315036Z","iopub.execute_input":"2025-09-09T12:27:33.315330Z","iopub.status.idle":"2025-09-09T12:27:33.341419Z","shell.execute_reply.started":"2025-09-09T12:27:33.315296Z","shell.execute_reply":"2025-09-09T12:27:33.340106Z"}},"outputs":[],"execution_count":388},{"cell_type":"code","source":"from sklearn.pipeline import Pipeline, FeatureUnion\nfrom sklearn.compose import ColumnTransformer\n\n# Stage 1: Embedding\nembedding_stage = ColumnTransformer([\n    (\"prompt_embed\", DictWrapper(shared_embedder), \"prompt_clean\"),\n    (\"resp_a_embed\", DictWrapper(shared_embedder), \"response_a_clean\"),\n    (\"resp_b_embed\", DictWrapper(shared_embedder), \"response_b_clean\"),\n])\n\n# Stage 2: Feature extraction from embeddings\nembedding_features = FeatureUnion([\n    (\"embedding_similarity\", similarity_pipeline),\n    (\"tfidf_attention_embedding\", tfidf_attention_pipeline),\n    # You can optionally include raw similarity here\n    (\"raw_embedding_similarity\", raw_similarity_pipeline),\n])\n\n# Stage 3: Common words transformer (added separately)\ncommon_words_stage = ColumnTransformer([\n    (\"common_words\", common_words_transformer, [\"prompt\", \"response_a\", \"response_b\"])\n])\n\n# Final pipeline\nfinal_pipeline = Pipeline([\n    (\"embed_once\", embedding_stage),\n    (\"extract_embedding_features\", embedding_features),\n    (\"extract_common_words\", common_words_stage)\n])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-09T12:27:33.342880Z","iopub.execute_input":"2025-09-09T12:27:33.343255Z","iopub.status.idle":"2025-09-09T12:27:33.366379Z","shell.execute_reply.started":"2025-09-09T12:27:33.343219Z","shell.execute_reply":"2025-09-09T12:27:33.365392Z"}},"outputs":[],"execution_count":389},{"cell_type":"code","source":"#feature_selection = SelectKBest(score_func = chi2, k=6)\nfrom sklearn.feature_selection import SelectKBest, f_classif\n\nfeature_selection = SelectKBest(score_func=f_classif, k=6)\n","metadata":{"trusted":true,"editable":false,"execution":{"iopub.status.busy":"2025-09-09T12:27:33.367316Z","iopub.execute_input":"2025-09-09T12:27:33.367658Z","iopub.status.idle":"2025-09-09T12:27:33.398044Z","shell.execute_reply.started":"2025-09-09T12:27:33.367628Z","shell.execute_reply":"2025-09-09T12:27:33.397025Z"}},"outputs":[],"execution_count":390},{"cell_type":"code","source":"import gc\n\nchunk_size = 32\n\n# Split data into chunks\nchunks = [X_train[i:i + chunk_size] for i in range(0, len(X_train), chunk_size)]\ny_chunks = [y_train[i:i + chunk_size] for i in range(0, len(y_train), chunk_size)]\n\n# Use the final pipeline\nmy_pipeline = final_pipeline\n\n# Stage 1: Fit embed_once\nmy_pipeline.named_steps[\"embed_once\"].fit(X_train)\nembedded_train = my_pipeline.named_steps[\"embed_once\"].transform(X_train)\n\n# Convert embedded output to DataFrame with correct column names\nembedded_train_df = pd.DataFrame([\n    {\n        \"prompt_embed\": x[0],\n        \"resp_a_embed\": x[1],\n        \"resp_b_embed\": x[2]\n    } for x in embedded_train\n])\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-09T12:27:33.399410Z","iopub.execute_input":"2025-09-09T12:27:33.399778Z"}},"outputs":[{"name":"stdout","text":"✅ Model input names: ['padding_mask', 'token_ids']\n","output_type":"stream"}],"execution_count":null},{"cell_type":"code","source":"embedded_train_df = pd.DataFrame([\n    {\n        \"prompt_embed\": x[0],\n        \"resp_a_embed\": x[1],\n        \"resp_b_embed\": x[2]\n    } for x in embedded_train\n])\nembedded_train_df[\"prompt_embed\"][1]['mean'].shape\nprint(embedded_train_df[\"prompt_embed\"][1].keys())\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"embedded_train_df[\"prompt_embed\"][7]['text']","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"embedded_train_df[\"prompt_embed\"][7]['raw']","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(embedded_train_df.columns.tolist())","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Combine all three columns and extract \"text\" from each dict\nall_texts = pd.concat([\n    embedded_train_df[\"prompt_embed\"],\n    embedded_train_df[\"resp_a_embed\"],\n    embedded_train_df[\"resp_b_embed\"]\n], ignore_index=True)\n\n# Extract the \"text\" field from each dict\nall_texts = all_texts.apply(lambda x: x.get(\"text\", \"\") if isinstance(x, dict) else \"\").tolist()\n\n# Filter out empty strings\nall_texts = [t for t in all_texts if t.strip()]\n\n# Now fit\ntfidf_embedder = TFIDFAttentionEmbedder(tokenizer=shared_embedder.tokenizer)\ntfidf_embedder.vectorizer.fit(all_texts)\n\n\n# Step 3: Transform each column separately\nprompt_tfidf_embeds = tfidf_embedder.transform(embedded_train_df[\"prompt_embed\"])\nresp_a_tfidf_embeds = tfidf_embedder.transform(embedded_train_df[\"resp_a_embed\"])\nresp_b_tfidf_embeds = tfidf_embedder.transform(embedded_train_df[\"resp_b_embed\"])\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Fit TFIDF vectorizer\nall_texts = (\n    X_train[\"prompt_clean\"].astype(str).tolist() +\n    X_train[\"response_a_clean\"].astype(str).tolist() +\n    X_train[\"response_b_clean\"].astype(str).tolist()\n)\n# Fit the full pipeline or at least the feature_extraction step\nmy_pipeline.named_steps[\"extract_embedding_features\"].fit(embedded_train_df)\nmy_pipeline.named_steps[\"extract_common_words\"].fit(X_train)\n# Now you can access the fitted transformer\ntfidf_attention_ct = dict(my_pipeline.named_steps[\"extract_embedding_features\"].transformer_list)[\"tfidf_attention_embedding\"]\n\n\ntfidf_embedder = tfidf_attention_ct.named_transformers_[\"tfidf_attention\"]\n\n# Fit the TF-IDF vectorizer\ntfidf_embedder.vectorizer.fit(all_texts)\n\n\n# Fit feature_extraction with a DataFrame\nmy_pipeline.named_steps[\"extract_embedding_features\"].fit(embedded_train_df)\n# Output file\noutput_file = \"X_final_incremental.csv\"\n\n# Process each chunk\nfor i, chunk in enumerate(chunks):\n    print(f\"Transforming and writing chunk {i+1}/{len(chunks)}\")\n\n    # Embed chunk\n    embedded_chunk = my_pipeline.named_steps[\"embed_once\"].transform(chunk)\n\n    # Convert to DataFrame\n    embedded_chunk_df = pd.DataFrame([\n        {\n            \"prompt_embed\": x[0],\n            \"resp_a_embed\": x[1],\n            \"resp_b_embed\": x[2]\n        } for x in embedded_chunk\n    ])\n\n    # Feature extraction from embeddings\n    embedding_features_chunk = my_pipeline.named_steps[\"extract_embedding_features\"].transform(embedded_chunk_df)\n\n    # Common words features\n    common_words_chunk = my_pipeline.named_steps[\"extract_common_words\"].transform(chunk)\n\n    # Combine both feature sets horizontally\n    from scipy.sparse import hstack\n    final_features_chunk = hstack([embedding_features_chunk, common_words_chunk])\n\n    # Save to CSV\n    df_chunk = pd.DataFrame(final_features_chunk.toarray())  # Convert sparse matrix to dense\n    df_chunk.to_csv(output_file, index=False, mode='w' if i == 0 else 'a', header=(i == 0))\n\n    # Cleanup\n    del embedded_chunk, embedded_chunk_df, embedding_features_chunk, common_words_chunk, final_features_chunk, df_chunk\n    gc.collect()\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"model = XGBClassifier(\n    objective=\"multi:softprob\",  \n    num_class=3,                  \n    eval_metric=\"mlogloss\",       \n    n_estimators=300,\n    learning_rate=0.1,\n    max_depth=6,\n    random_state=42\n)","metadata":{"trusted":true,"editable":false},"outputs":[],"execution_count":null},{"cell_type":"code","source":"my_pipeline = Pipeline([\n    (\"preprocessing\", preprocessing),\n    #(\"feature_selection\", feature_selection),\n    (\"model\", model)\n])\nmy_pipeline","metadata":{"trusted":true,"editable":false},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X_final=pd.read_csv(\"X_final_incremental.csv\")\ny_final=y_train","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X_final","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.model_selection import cross_val_score\n\nscores = cross_val_score(model, X_final, y_final, cv=3, scoring=\"accuracy\")\nprint(\"Cross-validated Accuracy:\", scores.mean())\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"model.fit(X_final, y_final)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df_test[\"prompt_clean\"] = df_test[\"prompt\"].apply(clean_text_for_common_words)\ndf_test[\"response_a_clean\"] = df_test[\"response_a\"].apply(clean_text_for_common_words)\ndf_test[\"response_b_clean\"] = df_test[\"response_b\"].apply(clean_text_for_common_words)","metadata":{"trusted":true,"editable":false},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from transformers import DebertaV2Tokenizer\nimport torch\nimport numpy as np\nfrom keras_hub.src.models.deberta_v3.deberta_v3_backbone import DebertaV3Backbone\nimport tensorflow as tf\n\n# Configuration\nmodel_path = \"/kaggle/input/deberta_v3/keras/deberta_v3_small_en/3\"\nvocab_file = f\"{model_path}/assets/tokenizer/vocabulary.spm\"\nweights_file = f\"{model_path}/model.weights.h5\"\n\n# Initialize tokenizer\ntokenizer = DebertaV2Tokenizer(vocab_file=vocab_file)\nprint(\"✅ Tokenizer initialized:\", type(tokenizer))\n\n# Initialize model with architecture matching the weights\nmodel = DebertaV3Backbone(\n    vocabulary_size=128100,\n    num_layers=12,\n    num_heads=12,  # <-- updated\n    hidden_dim=768,\n    intermediate_dim=3072,\n    dropout=0.1,\n    max_sequence_length=512,\n    bucket_size=256\n)\n\nmodel.load_weights(weights_file, skip_mismatch=True)\nprint(\"✅ Model loaded and weights applied.\")\n\n# Display model summary\ntry:\n    model.summary()\nexcept Exception as e:\n    print(\"⚠️ Could not display model summary:\", e)\n\n# Example input text\ntext = \"DeBERTa is a powerful transformer model.\"\n\n# Tokenize the input\ntokens = tokenizer(text, return_tensors=\"pt\")\ninput_ids = tokens[\"input_ids\"]\nattention_mask = tokens[\"attention_mask\"]\n\n# Convert token IDs to token strings\ntoken_names = tokenizer.convert_ids_to_tokens(input_ids[0])\nprint(\"✅ Token names:\", token_names)\n\n# Convert PyTorch tensors to NumPy arrays\ntoken_ids_np = input_ids.cpu().numpy()\npadding_mask_np = attention_mask.cpu().numpy()\n\n# Convert to TensorFlow tensors\nmodel_inputs = {\n    \"token_ids\": tf.convert_to_tensor(token_ids_np),\n    \"padding_mask\": tf.convert_to_tensor(padding_mask_np)\n}\n\n# Run forward pass\nprint(\"🚀 Running model forward pass...\")\noutputs = model(model_inputs)\n\n# Inspect model output\nif isinstance(outputs, dict):\n    print(\"✅ Model output keys:\", outputs.keys())\n    if \"last_hidden_state\" in outputs:\n        hidden_state = outputs[\"last_hidden_state\"]\n        print(\"Last hidden state shape:\", hidden_state.shape)\n\n        # Mean pooling\n        embeddings = tf.reduce_mean(hidden_state, axis=1).numpy()\n        print(\"✅ Mean pooled embeddings shape:\", embeddings.shape)\n    else:\n        print(\"⚠️ 'last_hidden_state' not found in model output.\")\nelse:\n    print(\"⚠️ Model returned a non-dict output:\", type(outputs))\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"for i, layer in enumerate(model.layers):\n    try:\n        print(f\"{i}: {layer.name} - {layer.output_shape}\")\n    except AttributeError:\n        print(f\"{i}: {layer.name} - (no output_shape)\")\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"\nmodel.summary()\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# import h5py\nwith h5py.File(weights_file, \"r\") as f:\n    print(list(f.keys()))\n","metadata":{}}]}
{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":86518,"databundleVersionId":9809560,"isSourceIdPinned":false,"sourceType":"competition"},{"sourceId":205020,"sourceType":"modelInstanceVersion","isSourceIdPinned":true,"modelInstanceId":4685,"modelId":2820}],"dockerImageVersionId":31090,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np \nimport pandas as pd \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.feature_selection import SelectKBest, chi2\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import cross_val_score\n\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"editable":false,"execution":{"iopub.status.busy":"2025-09-04T22:45:15.477435Z","iopub.execute_input":"2025-09-04T22:45:15.477622Z","iopub.status.idle":"2025-09-04T22:45:16.969123Z","shell.execute_reply.started":"2025-09-04T22:45:15.477602Z","shell.execute_reply":"2025-09-04T22:45:16.968376Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/deberta_v3/keras/deberta_v3_small_en/3/config.json\n/kaggle/input/deberta_v3/keras/deberta_v3_small_en/3/tokenizer.json\n/kaggle/input/deberta_v3/keras/deberta_v3_small_en/3/metadata.json\n/kaggle/input/deberta_v3/keras/deberta_v3_small_en/3/model.weights.h5\n/kaggle/input/deberta_v3/keras/deberta_v3_small_en/3/assets/tokenizer/vocabulary.spm\n/kaggle/input/llm-classification-finetuning/sample_submission.csv\n/kaggle/input/llm-classification-finetuning/train.csv\n/kaggle/input/llm-classification-finetuning/test.csv\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"\n\n#!pip install -q sentence-transformers\n\nfrom sentence_transformers import SentenceTransformer\n\n#model = SentenceTransformer(\"all-mpnet-base-v2\")\n","metadata":{"trusted":true,"editable":false,"execution":{"iopub.status.busy":"2025-09-04T22:45:16.970455Z","iopub.execute_input":"2025-09-04T22:45:16.970766Z","iopub.status.idle":"2025-09-04T22:45:42.346264Z","shell.execute_reply.started":"2025-09-04T22:45:16.970746Z","shell.execute_reply":"2025-09-04T22:45:42.345725Z"}},"outputs":[{"name":"stderr","text":"2025-09-04 22:45:29.078356: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nE0000 00:00:1757025929.247311      36 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\nE0000 00:00:1757025929.307640      36 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"\n#model.save(\"/kaggle/working/all-mpnet-base-v2\")\n","metadata":{"trusted":true,"editable":false,"execution":{"iopub.status.busy":"2025-09-04T22:45:42.347131Z","iopub.execute_input":"2025-09-04T22:45:42.347962Z","iopub.status.idle":"2025-09-04T22:45:42.350948Z","shell.execute_reply.started":"2025-09-04T22:45:42.347935Z","shell.execute_reply":"2025-09-04T22:45:42.350290Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"from transformers import AutoModel, AutoTokenizer\n\n#tokenizer = AutoTokenizer.from_pretrained(\"/kaggle/input/qwen-llm\")\n#model = AutoModel.from_pretrained(\"/kaggle/input/qwen-llm\")\n\n","metadata":{"trusted":true,"editable":false,"execution":{"iopub.status.busy":"2025-09-04T22:45:42.351764Z","iopub.execute_input":"2025-09-04T22:45:42.352053Z","iopub.status.idle":"2025-09-04T22:45:42.404469Z","shell.execute_reply.started":"2025-09-04T22:45:42.352030Z","shell.execute_reply":"2025-09-04T22:45:42.403849Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"submission_test = pd.read_csv(\"/kaggle/input/llm-classification-finetuning/sample_submission.csv\")\nsubmission_test","metadata":{"trusted":true,"editable":false,"execution":{"iopub.status.busy":"2025-09-04T22:45:42.406259Z","iopub.execute_input":"2025-09-04T22:45:42.407102Z","iopub.status.idle":"2025-09-04T22:45:42.441923Z","shell.execute_reply.started":"2025-09-04T22:45:42.407081Z","shell.execute_reply":"2025-09-04T22:45:42.441375Z"}},"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"        id  winner_model_a  winner_model_b  winner_tie\n0   136060        0.333333        0.333333    0.333333\n1   211333        0.333333        0.333333    0.333333\n2  1233961        0.333333        0.333333    0.333333","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>winner_model_a</th>\n      <th>winner_model_b</th>\n      <th>winner_tie</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>136060</td>\n      <td>0.333333</td>\n      <td>0.333333</td>\n      <td>0.333333</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>211333</td>\n      <td>0.333333</td>\n      <td>0.333333</td>\n      <td>0.333333</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1233961</td>\n      <td>0.333333</td>\n      <td>0.333333</td>\n      <td>0.333333</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":5},{"cell_type":"code","source":"df_train = pd.read_csv(\"/kaggle/input/llm-classification-finetuning/train.csv\")\ndf_train","metadata":{"trusted":true,"editable":false,"execution":{"iopub.status.busy":"2025-09-04T22:45:42.442520Z","iopub.execute_input":"2025-09-04T22:45:42.442700Z","iopub.status.idle":"2025-09-04T22:45:45.379178Z","shell.execute_reply.started":"2025-09-04T22:45:42.442685Z","shell.execute_reply":"2025-09-04T22:45:45.378511Z"}},"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"               id             model_a              model_b  \\\n0           30192  gpt-4-1106-preview           gpt-4-0613   \n1           53567           koala-13b           gpt-4-0613   \n2           65089  gpt-3.5-turbo-0613       mistral-medium   \n3           96401    llama-2-13b-chat  mistral-7b-instruct   \n4          198779           koala-13b   gpt-3.5-turbo-0314   \n...           ...                 ...                  ...   \n57472  4294656694          gpt-4-0613             claude-1   \n57473  4294692063          claude-2.0     llama-2-13b-chat   \n57474  4294710549            claude-1           alpaca-13b   \n57475  4294899228              palm-2       tulu-2-dpo-70b   \n57476  4294947231  gemini-pro-dev-api   gpt-4-1106-preview   \n\n                                                  prompt  \\\n0      [\"Is it morally right to try to have a certain...   \n1      [\"What is the difference between marriage lice...   \n2      [\"explain function calling. how would you call...   \n3      [\"How can I create a test set for a very rare ...   \n4      [\"What is the best way to travel from Tel-Aviv...   \n...                                                  ...   \n57472  [\"A simple mnemonic for \\u03c0:\\n\\\"How I wish ...   \n57473  [\"In python, implement a naive Bayes with gaus...   \n57474  [\"is it unethical to work on building weapons?...   \n57475  [\"If a bait contains 0,0025% bromadiolon then ...   \n57476  [\"three kids eat three apples in three days, h...   \n\n                                              response_a  \\\n0      [\"The question of whether it is morally right ...   \n1      [\"A marriage license is a legal document that ...   \n2      [\"Function calling is the process of invoking ...   \n3      [\"Creating a test set for a very rare category...   \n4      [\"The best way to travel from Tel Aviv to Jeru...   \n...                                                  ...   \n57472  [\"Sure, let's break it down:\\n\\n1. \\\"How\\\" has...   \n57473  [\"Here is an implementation of a naive Bayes c...   \n57474  [\"Working on weapons technology raises some et...   \n57475  [\"Bromadiolone is a rodenticide which is most ...   \n57476                                      [\"27 apples\"]   \n\n                                              response_b  winner_model_a  \\\n0      [\"As an AI, I don't have personal beliefs or o...               1   \n1      [\"A marriage license and a marriage certificat...               0   \n2      [\"Function calling is the process of invoking ...               0   \n3      [\"When building a classifier for a very rare c...               1   \n4      [\"The best way to travel from Tel-Aviv to Jeru...               0   \n...                                                  ...             ...   \n57472  [\"Here is how that mnemonic represents the dig...               1   \n57473  [\"Sure! Here's an implementation of a naive Ba...               1   \n57474  [\"It depends on the context. Weapons can be us...               1   \n57475  [\"As an AI language model, I do not promote or...               0   \n57476  [\"If three kids eat three apples in three days...               1   \n\n       winner_model_b  winner_tie  \n0                   0           0  \n1                   1           0  \n2                   0           1  \n3                   0           0  \n4                   1           0  \n...               ...         ...  \n57472               0           0  \n57473               0           0  \n57474               0           0  \n57475               1           0  \n57476               0           0  \n\n[57477 rows x 9 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>model_a</th>\n      <th>model_b</th>\n      <th>prompt</th>\n      <th>response_a</th>\n      <th>response_b</th>\n      <th>winner_model_a</th>\n      <th>winner_model_b</th>\n      <th>winner_tie</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>30192</td>\n      <td>gpt-4-1106-preview</td>\n      <td>gpt-4-0613</td>\n      <td>[\"Is it morally right to try to have a certain...</td>\n      <td>[\"The question of whether it is morally right ...</td>\n      <td>[\"As an AI, I don't have personal beliefs or o...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>53567</td>\n      <td>koala-13b</td>\n      <td>gpt-4-0613</td>\n      <td>[\"What is the difference between marriage lice...</td>\n      <td>[\"A marriage license is a legal document that ...</td>\n      <td>[\"A marriage license and a marriage certificat...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>65089</td>\n      <td>gpt-3.5-turbo-0613</td>\n      <td>mistral-medium</td>\n      <td>[\"explain function calling. how would you call...</td>\n      <td>[\"Function calling is the process of invoking ...</td>\n      <td>[\"Function calling is the process of invoking ...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>96401</td>\n      <td>llama-2-13b-chat</td>\n      <td>mistral-7b-instruct</td>\n      <td>[\"How can I create a test set for a very rare ...</td>\n      <td>[\"Creating a test set for a very rare category...</td>\n      <td>[\"When building a classifier for a very rare c...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>198779</td>\n      <td>koala-13b</td>\n      <td>gpt-3.5-turbo-0314</td>\n      <td>[\"What is the best way to travel from Tel-Aviv...</td>\n      <td>[\"The best way to travel from Tel Aviv to Jeru...</td>\n      <td>[\"The best way to travel from Tel-Aviv to Jeru...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>57472</th>\n      <td>4294656694</td>\n      <td>gpt-4-0613</td>\n      <td>claude-1</td>\n      <td>[\"A simple mnemonic for \\u03c0:\\n\\\"How I wish ...</td>\n      <td>[\"Sure, let's break it down:\\n\\n1. \\\"How\\\" has...</td>\n      <td>[\"Here is how that mnemonic represents the dig...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>57473</th>\n      <td>4294692063</td>\n      <td>claude-2.0</td>\n      <td>llama-2-13b-chat</td>\n      <td>[\"In python, implement a naive Bayes with gaus...</td>\n      <td>[\"Here is an implementation of a naive Bayes c...</td>\n      <td>[\"Sure! Here's an implementation of a naive Ba...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>57474</th>\n      <td>4294710549</td>\n      <td>claude-1</td>\n      <td>alpaca-13b</td>\n      <td>[\"is it unethical to work on building weapons?...</td>\n      <td>[\"Working on weapons technology raises some et...</td>\n      <td>[\"It depends on the context. Weapons can be us...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>57475</th>\n      <td>4294899228</td>\n      <td>palm-2</td>\n      <td>tulu-2-dpo-70b</td>\n      <td>[\"If a bait contains 0,0025% bromadiolon then ...</td>\n      <td>[\"Bromadiolone is a rodenticide which is most ...</td>\n      <td>[\"As an AI language model, I do not promote or...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>57476</th>\n      <td>4294947231</td>\n      <td>gemini-pro-dev-api</td>\n      <td>gpt-4-1106-preview</td>\n      <td>[\"three kids eat three apples in three days, h...</td>\n      <td>[\"27 apples\"]</td>\n      <td>[\"If three kids eat three apples in three days...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>57477 rows × 9 columns</p>\n</div>"},"metadata":{}}],"execution_count":6},{"cell_type":"code","source":"df_test = pd.read_csv(\"/kaggle/input/llm-classification-finetuning/test.csv\")\ndf_test","metadata":{"trusted":true,"editable":false,"execution":{"iopub.status.busy":"2025-09-04T22:45:45.379986Z","iopub.execute_input":"2025-09-04T22:45:45.380247Z","iopub.status.idle":"2025-09-04T22:45:45.391787Z","shell.execute_reply.started":"2025-09-04T22:45:45.380216Z","shell.execute_reply":"2025-09-04T22:45:45.391136Z"}},"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"        id                                             prompt  \\\n0   136060  [\"I have three oranges today, I ate an orange ...   \n1   211333  [\"You are a mediator in a heated political deb...   \n2  1233961  [\"How to initialize the classification head wh...   \n\n                                          response_a  \\\n0                    [\"You have two oranges today.\"]   \n1  [\"Thank you for sharing the details of the sit...   \n2  [\"When you want to initialize the classificati...   \n\n                                          response_b  \n0  [\"You still have three oranges. Eating an oran...  \n1  [\"Mr Reddy and Ms Blue both have valid points ...  \n2  [\"To initialize the classification head when p...  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>prompt</th>\n      <th>response_a</th>\n      <th>response_b</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>136060</td>\n      <td>[\"I have three oranges today, I ate an orange ...</td>\n      <td>[\"You have two oranges today.\"]</td>\n      <td>[\"You still have three oranges. Eating an oran...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>211333</td>\n      <td>[\"You are a mediator in a heated political deb...</td>\n      <td>[\"Thank you for sharing the details of the sit...</td>\n      <td>[\"Mr Reddy and Ms Blue both have valid points ...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1233961</td>\n      <td>[\"How to initialize the classification head wh...</td>\n      <td>[\"When you want to initialize the classificati...</td>\n      <td>[\"To initialize the classification head when p...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":7},{"cell_type":"code","source":"df_train.info()","metadata":{"trusted":true,"editable":false,"execution":{"iopub.status.busy":"2025-09-04T22:45:45.392589Z","iopub.execute_input":"2025-09-04T22:45:45.392838Z","iopub.status.idle":"2025-09-04T22:45:45.427995Z","shell.execute_reply.started":"2025-09-04T22:45:45.392798Z","shell.execute_reply":"2025-09-04T22:45:45.427324Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 57477 entries, 0 to 57476\nData columns (total 9 columns):\n #   Column          Non-Null Count  Dtype \n---  ------          --------------  ----- \n 0   id              57477 non-null  int64 \n 1   model_a         57477 non-null  object\n 2   model_b         57477 non-null  object\n 3   prompt          57477 non-null  object\n 4   response_a      57477 non-null  object\n 5   response_b      57477 non-null  object\n 6   winner_model_a  57477 non-null  int64 \n 7   winner_model_b  57477 non-null  int64 \n 8   winner_tie      57477 non-null  int64 \ndtypes: int64(4), object(5)\nmemory usage: 3.9+ MB\n","output_type":"stream"}],"execution_count":8},{"cell_type":"code","source":"df_train=df_train.head(50000)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-04T22:45:45.428700Z","iopub.execute_input":"2025-09-04T22:45:45.428911Z","iopub.status.idle":"2025-09-04T22:45:45.432316Z","shell.execute_reply.started":"2025-09-04T22:45:45.428888Z","shell.execute_reply":"2025-09-04T22:45:45.431657Z"}},"outputs":[],"execution_count":9},{"cell_type":"code","source":"df_train","metadata":{"trusted":true,"editable":false,"execution":{"iopub.status.busy":"2025-09-04T22:45:45.432979Z","iopub.execute_input":"2025-09-04T22:45:45.433144Z","iopub.status.idle":"2025-09-04T22:45:45.451055Z","shell.execute_reply.started":"2025-09-04T22:45:45.433130Z","shell.execute_reply":"2025-09-04T22:45:45.450482Z"}},"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"               id             model_a                    model_b  \\\n0           30192  gpt-4-1106-preview                 gpt-4-0613   \n1           53567           koala-13b                 gpt-4-0613   \n2           65089  gpt-3.5-turbo-0613             mistral-medium   \n3           96401    llama-2-13b-chat        mistral-7b-instruct   \n4          198779           koala-13b         gpt-3.5-turbo-0314   \n...           ...                 ...                        ...   \n49995  3733824558        wizardlm-13b     codellama-34b-instruct   \n49996  3733868143  gpt-4-0125-preview                 gpt-4-0613   \n49997  3733960318        dolly-v2-12b                 alpaca-13b   \n49998  3733981321          claude-2.1  openhermes-2.5-mistral-7b   \n49999  3734131702        wizardlm-70b                 vicuna-33b   \n\n                                                  prompt  \\\n0      [\"Is it morally right to try to have a certain...   \n1      [\"What is the difference between marriage lice...   \n2      [\"explain function calling. how would you call...   \n3      [\"How can I create a test set for a very rare ...   \n4      [\"What is the best way to travel from Tel-Aviv...   \n...                                                  ...   \n49995  [\"In what ways do modern psychological approac...   \n49996  [\"True or false: Sometimes you have to see dis...   \n49997  [\"\\nA farmer went to a market and purchased a ...   \n49998  [\"Attitude of a person with a time measured at...   \n49999                     [\"Describe Don't Starve game\"]   \n\n                                              response_a  \\\n0      [\"The question of whether it is morally right ...   \n1      [\"A marriage license is a legal document that ...   \n2      [\"Function calling is the process of invoking ...   \n3      [\"Creating a test set for a very rare category...   \n4      [\"The best way to travel from Tel Aviv to Jeru...   \n...                                                  ...   \n49995  [\"Modern psychological approaches to child rea...   \n49996  [\"True. In various contexts such as work, educ...   \n49997  [\"The first step is to realise that this is a ...   \n49998  [\"I do not have enough context to determine th...   \n49999  [\"Don't Starve is a survival action-adventure ...   \n\n                                              response_b  winner_model_a  \\\n0      [\"As an AI, I don't have personal beliefs or o...               1   \n1      [\"A marriage license and a marriage certificat...               0   \n2      [\"Function calling is the process of invoking ...               0   \n3      [\"When building a classifier for a very rare c...               1   \n4      [\"The best way to travel from Tel-Aviv to Jeru...               0   \n...                                                  ...             ...   \n49995  [\"Modern psychological approaches to child rea...               0   \n49996  [\"True. In many professions and life situation...               1   \n49997  [\"1. The farmer should first decide which of h...               0   \n49998  [\"A person with a time value of 100,000,000,00...               0   \n49999  [\"Don't Starve is a single-player survival sim...               0   \n\n       winner_model_b  winner_tie  \n0                   0           0  \n1                   1           0  \n2                   0           1  \n3                   0           0  \n4                   1           0  \n...               ...         ...  \n49995               0           1  \n49996               0           0  \n49997               1           0  \n49998               0           1  \n49999               1           0  \n\n[50000 rows x 9 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>model_a</th>\n      <th>model_b</th>\n      <th>prompt</th>\n      <th>response_a</th>\n      <th>response_b</th>\n      <th>winner_model_a</th>\n      <th>winner_model_b</th>\n      <th>winner_tie</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>30192</td>\n      <td>gpt-4-1106-preview</td>\n      <td>gpt-4-0613</td>\n      <td>[\"Is it morally right to try to have a certain...</td>\n      <td>[\"The question of whether it is morally right ...</td>\n      <td>[\"As an AI, I don't have personal beliefs or o...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>53567</td>\n      <td>koala-13b</td>\n      <td>gpt-4-0613</td>\n      <td>[\"What is the difference between marriage lice...</td>\n      <td>[\"A marriage license is a legal document that ...</td>\n      <td>[\"A marriage license and a marriage certificat...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>65089</td>\n      <td>gpt-3.5-turbo-0613</td>\n      <td>mistral-medium</td>\n      <td>[\"explain function calling. how would you call...</td>\n      <td>[\"Function calling is the process of invoking ...</td>\n      <td>[\"Function calling is the process of invoking ...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>96401</td>\n      <td>llama-2-13b-chat</td>\n      <td>mistral-7b-instruct</td>\n      <td>[\"How can I create a test set for a very rare ...</td>\n      <td>[\"Creating a test set for a very rare category...</td>\n      <td>[\"When building a classifier for a very rare c...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>198779</td>\n      <td>koala-13b</td>\n      <td>gpt-3.5-turbo-0314</td>\n      <td>[\"What is the best way to travel from Tel-Aviv...</td>\n      <td>[\"The best way to travel from Tel Aviv to Jeru...</td>\n      <td>[\"The best way to travel from Tel-Aviv to Jeru...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>49995</th>\n      <td>3733824558</td>\n      <td>wizardlm-13b</td>\n      <td>codellama-34b-instruct</td>\n      <td>[\"In what ways do modern psychological approac...</td>\n      <td>[\"Modern psychological approaches to child rea...</td>\n      <td>[\"Modern psychological approaches to child rea...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>49996</th>\n      <td>3733868143</td>\n      <td>gpt-4-0125-preview</td>\n      <td>gpt-4-0613</td>\n      <td>[\"True or false: Sometimes you have to see dis...</td>\n      <td>[\"True. In various contexts such as work, educ...</td>\n      <td>[\"True. In many professions and life situation...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>49997</th>\n      <td>3733960318</td>\n      <td>dolly-v2-12b</td>\n      <td>alpaca-13b</td>\n      <td>[\"\\nA farmer went to a market and purchased a ...</td>\n      <td>[\"The first step is to realise that this is a ...</td>\n      <td>[\"1. The farmer should first decide which of h...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>49998</th>\n      <td>3733981321</td>\n      <td>claude-2.1</td>\n      <td>openhermes-2.5-mistral-7b</td>\n      <td>[\"Attitude of a person with a time measured at...</td>\n      <td>[\"I do not have enough context to determine th...</td>\n      <td>[\"A person with a time value of 100,000,000,00...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>49999</th>\n      <td>3734131702</td>\n      <td>wizardlm-70b</td>\n      <td>vicuna-33b</td>\n      <td>[\"Describe Don't Starve game\"]</td>\n      <td>[\"Don't Starve is a survival action-adventure ...</td>\n      <td>[\"Don't Starve is a single-player survival sim...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>50000 rows × 9 columns</p>\n</div>"},"metadata":{}}],"execution_count":10},{"cell_type":"code","source":"df_train.isnull().sum()","metadata":{"trusted":true,"editable":false,"execution":{"iopub.status.busy":"2025-09-04T22:45:45.451865Z","iopub.execute_input":"2025-09-04T22:45:45.452170Z","iopub.status.idle":"2025-09-04T22:45:45.480086Z","shell.execute_reply.started":"2025-09-04T22:45:45.452153Z","shell.execute_reply":"2025-09-04T22:45:45.479552Z"}},"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"id                0\nmodel_a           0\nmodel_b           0\nprompt            0\nresponse_a        0\nresponse_b        0\nwinner_model_a    0\nwinner_model_b    0\nwinner_tie        0\ndtype: int64"},"metadata":{}}],"execution_count":11},{"cell_type":"code","source":"X = df_train.drop(['model_a', 'model_b', 'winner_model_a', 'winner_model_b', 'winner_tie'], axis = 1)\nX","metadata":{"trusted":true,"editable":false,"execution":{"iopub.status.busy":"2025-09-04T22:45:45.480642Z","iopub.execute_input":"2025-09-04T22:45:45.480850Z","iopub.status.idle":"2025-09-04T22:45:45.491223Z","shell.execute_reply.started":"2025-09-04T22:45:45.480810Z","shell.execute_reply":"2025-09-04T22:45:45.490704Z"}},"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"               id                                             prompt  \\\n0           30192  [\"Is it morally right to try to have a certain...   \n1           53567  [\"What is the difference between marriage lice...   \n2           65089  [\"explain function calling. how would you call...   \n3           96401  [\"How can I create a test set for a very rare ...   \n4          198779  [\"What is the best way to travel from Tel-Aviv...   \n...           ...                                                ...   \n49995  3733824558  [\"In what ways do modern psychological approac...   \n49996  3733868143  [\"True or false: Sometimes you have to see dis...   \n49997  3733960318  [\"\\nA farmer went to a market and purchased a ...   \n49998  3733981321  [\"Attitude of a person with a time measured at...   \n49999  3734131702                     [\"Describe Don't Starve game\"]   \n\n                                              response_a  \\\n0      [\"The question of whether it is morally right ...   \n1      [\"A marriage license is a legal document that ...   \n2      [\"Function calling is the process of invoking ...   \n3      [\"Creating a test set for a very rare category...   \n4      [\"The best way to travel from Tel Aviv to Jeru...   \n...                                                  ...   \n49995  [\"Modern psychological approaches to child rea...   \n49996  [\"True. In various contexts such as work, educ...   \n49997  [\"The first step is to realise that this is a ...   \n49998  [\"I do not have enough context to determine th...   \n49999  [\"Don't Starve is a survival action-adventure ...   \n\n                                              response_b  \n0      [\"As an AI, I don't have personal beliefs or o...  \n1      [\"A marriage license and a marriage certificat...  \n2      [\"Function calling is the process of invoking ...  \n3      [\"When building a classifier for a very rare c...  \n4      [\"The best way to travel from Tel-Aviv to Jeru...  \n...                                                  ...  \n49995  [\"Modern psychological approaches to child rea...  \n49996  [\"True. In many professions and life situation...  \n49997  [\"1. The farmer should first decide which of h...  \n49998  [\"A person with a time value of 100,000,000,00...  \n49999  [\"Don't Starve is a single-player survival sim...  \n\n[50000 rows x 4 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>prompt</th>\n      <th>response_a</th>\n      <th>response_b</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>30192</td>\n      <td>[\"Is it morally right to try to have a certain...</td>\n      <td>[\"The question of whether it is morally right ...</td>\n      <td>[\"As an AI, I don't have personal beliefs or o...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>53567</td>\n      <td>[\"What is the difference between marriage lice...</td>\n      <td>[\"A marriage license is a legal document that ...</td>\n      <td>[\"A marriage license and a marriage certificat...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>65089</td>\n      <td>[\"explain function calling. how would you call...</td>\n      <td>[\"Function calling is the process of invoking ...</td>\n      <td>[\"Function calling is the process of invoking ...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>96401</td>\n      <td>[\"How can I create a test set for a very rare ...</td>\n      <td>[\"Creating a test set for a very rare category...</td>\n      <td>[\"When building a classifier for a very rare c...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>198779</td>\n      <td>[\"What is the best way to travel from Tel-Aviv...</td>\n      <td>[\"The best way to travel from Tel Aviv to Jeru...</td>\n      <td>[\"The best way to travel from Tel-Aviv to Jeru...</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>49995</th>\n      <td>3733824558</td>\n      <td>[\"In what ways do modern psychological approac...</td>\n      <td>[\"Modern psychological approaches to child rea...</td>\n      <td>[\"Modern psychological approaches to child rea...</td>\n    </tr>\n    <tr>\n      <th>49996</th>\n      <td>3733868143</td>\n      <td>[\"True or false: Sometimes you have to see dis...</td>\n      <td>[\"True. In various contexts such as work, educ...</td>\n      <td>[\"True. In many professions and life situation...</td>\n    </tr>\n    <tr>\n      <th>49997</th>\n      <td>3733960318</td>\n      <td>[\"\\nA farmer went to a market and purchased a ...</td>\n      <td>[\"The first step is to realise that this is a ...</td>\n      <td>[\"1. The farmer should first decide which of h...</td>\n    </tr>\n    <tr>\n      <th>49998</th>\n      <td>3733981321</td>\n      <td>[\"Attitude of a person with a time measured at...</td>\n      <td>[\"I do not have enough context to determine th...</td>\n      <td>[\"A person with a time value of 100,000,000,00...</td>\n    </tr>\n    <tr>\n      <th>49999</th>\n      <td>3734131702</td>\n      <td>[\"Describe Don't Starve game\"]</td>\n      <td>[\"Don't Starve is a survival action-adventure ...</td>\n      <td>[\"Don't Starve is a single-player survival sim...</td>\n    </tr>\n  </tbody>\n</table>\n<p>50000 rows × 4 columns</p>\n</div>"},"metadata":{}}],"execution_count":12},{"cell_type":"code","source":"y = df_train[['winner_model_a', 'winner_model_b', 'winner_tie']].values\n\ny = np.argmax(y, axis=1)\ny","metadata":{"trusted":true,"editable":false,"execution":{"iopub.status.busy":"2025-09-04T22:45:45.491932Z","iopub.execute_input":"2025-09-04T22:45:45.492184Z","iopub.status.idle":"2025-09-04T22:45:45.507742Z","shell.execute_reply.started":"2025-09-04T22:45:45.492164Z","shell.execute_reply":"2025-09-04T22:45:45.507221Z"}},"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"array([0, 1, 2, ..., 1, 2, 1])"},"metadata":{}}],"execution_count":13},{"cell_type":"code","source":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size =0.2, random_state = 42)","metadata":{"trusted":true,"editable":false,"execution":{"iopub.status.busy":"2025-09-04T22:45:45.510559Z","iopub.execute_input":"2025-09-04T22:45:45.510724Z","iopub.status.idle":"2025-09-04T22:45:45.523692Z","shell.execute_reply.started":"2025-09-04T22:45:45.510712Z","shell.execute_reply":"2025-09-04T22:45:45.523191Z"}},"outputs":[],"execution_count":14},{"cell_type":"code","source":"X_train","metadata":{"trusted":true,"editable":false,"execution":{"iopub.status.busy":"2025-09-04T22:45:45.524330Z","iopub.execute_input":"2025-09-04T22:45:45.524509Z","iopub.status.idle":"2025-09-04T22:45:45.532394Z","shell.execute_reply.started":"2025-09-04T22:45:45.524495Z","shell.execute_reply":"2025-09-04T22:45:45.531871Z"}},"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"               id                                             prompt  \\\n39087  2913654161  [\"generate some super interesting unique promp...   \n30893  2294325725  [\"IF I have an apple and I throw it onto the g...   \n45278  3374593543  [\"Please summarize \\\"The Gernsback Continuum,\\...   \n16398  1224483371  [\"If there are 10 books in a room and I read 2...   \n13653  1015437448  [\"Can you describe the plot of Robbie Williams...   \n...           ...                                                ...   \n11284   835203841                        [\"How to make mulled wine\"]   \n44732  3333832652                 [\"What is the capital of France?\"]   \n38158  2840606458                     [\"Draw a dog using ASCII art\"]   \n860      62750940                          [\"How to wear a bikini?\"]   \n15795  1180878567  [\"Can you tell me what was going on with all t...   \n\n                                              response_a  \\\n39087  [\"1. If you could create a new form of artisti...   \n30893  [\"If you throw an apple onto the ground, it wi...   \n45278  [\"\\\"The Gernsback Continuum\\\" is a short story...   \n16398  [\"If there are 10 books in a room and you read...   \n13653  [\"Robbie Williams' music video for \\\"Road to M...   \n...                                                  ...   \n11284  [\"Here is a basic recipe for mulled wine:\\n\\nI...   \n44732  [\"Paris is the capital and largest city of Fra...   \n38158                        [\"\\/_\\/\\\\  \\n( o.o )\\n> ^\"]   \n860    [\"Wearing a bikini can be a fun and comfortabl...   \n15795  [\"The direwolves, which are also known as dire...   \n\n                                              response_b  \n39087  [\"1. If you could learn any language instantly...  \n30893  [\"If you throw an apple onto the ground, the n...  \n45278  [\"Here is a summary of \\\"The Gernsback Continu...  \n16398  [\"If you read 2 books and there were initially...  \n13653  [\"\\\"Road to Mandalay\\\" is a song by British si...  \n...                                                  ...  \n11284  [\"Mulled wine is a delicious and warming bever...  \n44732                [\"The capital of France is Paris.\"]  \n38158  [\"Here is a dog drawn with ASCII art:\\n\\n     ...  \n860    [\"Here are the basic steps to wear a bikini:\\n...  \n15795  [\"Sure! On the night of the Red Wedding, all o...  \n\n[40000 rows x 4 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>prompt</th>\n      <th>response_a</th>\n      <th>response_b</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>39087</th>\n      <td>2913654161</td>\n      <td>[\"generate some super interesting unique promp...</td>\n      <td>[\"1. If you could create a new form of artisti...</td>\n      <td>[\"1. If you could learn any language instantly...</td>\n    </tr>\n    <tr>\n      <th>30893</th>\n      <td>2294325725</td>\n      <td>[\"IF I have an apple and I throw it onto the g...</td>\n      <td>[\"If you throw an apple onto the ground, it wi...</td>\n      <td>[\"If you throw an apple onto the ground, the n...</td>\n    </tr>\n    <tr>\n      <th>45278</th>\n      <td>3374593543</td>\n      <td>[\"Please summarize \\\"The Gernsback Continuum,\\...</td>\n      <td>[\"\\\"The Gernsback Continuum\\\" is a short story...</td>\n      <td>[\"Here is a summary of \\\"The Gernsback Continu...</td>\n    </tr>\n    <tr>\n      <th>16398</th>\n      <td>1224483371</td>\n      <td>[\"If there are 10 books in a room and I read 2...</td>\n      <td>[\"If there are 10 books in a room and you read...</td>\n      <td>[\"If you read 2 books and there were initially...</td>\n    </tr>\n    <tr>\n      <th>13653</th>\n      <td>1015437448</td>\n      <td>[\"Can you describe the plot of Robbie Williams...</td>\n      <td>[\"Robbie Williams' music video for \\\"Road to M...</td>\n      <td>[\"\\\"Road to Mandalay\\\" is a song by British si...</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>11284</th>\n      <td>835203841</td>\n      <td>[\"How to make mulled wine\"]</td>\n      <td>[\"Here is a basic recipe for mulled wine:\\n\\nI...</td>\n      <td>[\"Mulled wine is a delicious and warming bever...</td>\n    </tr>\n    <tr>\n      <th>44732</th>\n      <td>3333832652</td>\n      <td>[\"What is the capital of France?\"]</td>\n      <td>[\"Paris is the capital and largest city of Fra...</td>\n      <td>[\"The capital of France is Paris.\"]</td>\n    </tr>\n    <tr>\n      <th>38158</th>\n      <td>2840606458</td>\n      <td>[\"Draw a dog using ASCII art\"]</td>\n      <td>[\"\\/_\\/\\\\  \\n( o.o )\\n&gt; ^\"]</td>\n      <td>[\"Here is a dog drawn with ASCII art:\\n\\n     ...</td>\n    </tr>\n    <tr>\n      <th>860</th>\n      <td>62750940</td>\n      <td>[\"How to wear a bikini?\"]</td>\n      <td>[\"Wearing a bikini can be a fun and comfortabl...</td>\n      <td>[\"Here are the basic steps to wear a bikini:\\n...</td>\n    </tr>\n    <tr>\n      <th>15795</th>\n      <td>1180878567</td>\n      <td>[\"Can you tell me what was going on with all t...</td>\n      <td>[\"The direwolves, which are also known as dire...</td>\n      <td>[\"Sure! On the night of the Red Wedding, all o...</td>\n    </tr>\n  </tbody>\n</table>\n<p>40000 rows × 4 columns</p>\n</div>"},"metadata":{}}],"execution_count":15},{"cell_type":"code","source":"X_test","metadata":{"trusted":true,"editable":false,"execution":{"iopub.status.busy":"2025-09-04T22:45:45.533061Z","iopub.execute_input":"2025-09-04T22:45:45.533297Z","iopub.status.idle":"2025-09-04T22:45:45.548736Z","shell.execute_reply.started":"2025-09-04T22:45:45.533273Z","shell.execute_reply":"2025-09-04T22:45:45.548222Z"}},"outputs":[{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"               id                                             prompt  \\\n33553  2492680525  [\"is ti true i need to have pagefile  so that ...   \n9427    701020433  [\"What are good strategies to handle situation...   \n199      15828515  [\"Explain the Hamilton dynamics of a simple Ha...   \n12447   922334196  [\"hello, give me a short visual description of...   \n39489  2941429181  [\"me and my girlfriend want to live 6-12 month...   \n...           ...                                                ...   \n28567  2121305240  [\"i own10 cow today i had sold 1 yesterday how...   \n25079  1865252645        [\"What's the diff between air and oxygen?\"]   \n18707  1398294299  [\"How complex is the strategy in the board gam...   \n15200  1133596846  [\"What predictions CAN make regarding myopia p...   \n5857    441036120  [\"using the world of warcraft lua language and...   \n\n                                              response_a  \\\n33553  [\"No, that's not entirely accurate. The purpos...   \n9427   [\"Handling situations you are afraid of can be...   \n199    [\"Hamilton dynamics refers to the mathematical...   \n12447  [\"The Fool tarot card is often depicted as a y...   \n39489  [\"Based on your preferences for nature, calmne...   \n...                                                  ...   \n28567  [\"If you sold one cow yesterday, then you will...   \n25079  [\"Air and oxygen are not the same thing. Air i...   \n18707  [\"Here's a quick overview of the strategic com...   \n15200  [\"I'm sorry, but I cannot provide specific pre...   \n5857   [\"\\/run local cursorPos = {x=100, y=100} curso...   \n\n                                              response_b  \n33553  [\"The pagefile, also known as a swap file or v...  \n9427   [\"Handling situations you are afraid of can be...  \n199    [\"Sure! I'll do my best to explain the Hamilto...  \n12447  [\"The Fool is a tarot card that represents a n...  \n39489  [\"Portugal sounds like a great choice for a 6-...  \n...                                                  ...  \n28567  [\"If you own 10 cows today and sold 1 yesterda...  \n25079  [\"Air and oxygen are closely related, but they...  \n18707  [\"The board game Concordia has a moderate leve...  \n15200  [\"Based on your provided information, the foll...  \n5857   [\"Here is a World of Warcraft macro that posit...  \n\n[10000 rows x 4 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>prompt</th>\n      <th>response_a</th>\n      <th>response_b</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>33553</th>\n      <td>2492680525</td>\n      <td>[\"is ti true i need to have pagefile  so that ...</td>\n      <td>[\"No, that's not entirely accurate. The purpos...</td>\n      <td>[\"The pagefile, also known as a swap file or v...</td>\n    </tr>\n    <tr>\n      <th>9427</th>\n      <td>701020433</td>\n      <td>[\"What are good strategies to handle situation...</td>\n      <td>[\"Handling situations you are afraid of can be...</td>\n      <td>[\"Handling situations you are afraid of can be...</td>\n    </tr>\n    <tr>\n      <th>199</th>\n      <td>15828515</td>\n      <td>[\"Explain the Hamilton dynamics of a simple Ha...</td>\n      <td>[\"Hamilton dynamics refers to the mathematical...</td>\n      <td>[\"Sure! I'll do my best to explain the Hamilto...</td>\n    </tr>\n    <tr>\n      <th>12447</th>\n      <td>922334196</td>\n      <td>[\"hello, give me a short visual description of...</td>\n      <td>[\"The Fool tarot card is often depicted as a y...</td>\n      <td>[\"The Fool is a tarot card that represents a n...</td>\n    </tr>\n    <tr>\n      <th>39489</th>\n      <td>2941429181</td>\n      <td>[\"me and my girlfriend want to live 6-12 month...</td>\n      <td>[\"Based on your preferences for nature, calmne...</td>\n      <td>[\"Portugal sounds like a great choice for a 6-...</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>28567</th>\n      <td>2121305240</td>\n      <td>[\"i own10 cow today i had sold 1 yesterday how...</td>\n      <td>[\"If you sold one cow yesterday, then you will...</td>\n      <td>[\"If you own 10 cows today and sold 1 yesterda...</td>\n    </tr>\n    <tr>\n      <th>25079</th>\n      <td>1865252645</td>\n      <td>[\"What's the diff between air and oxygen?\"]</td>\n      <td>[\"Air and oxygen are not the same thing. Air i...</td>\n      <td>[\"Air and oxygen are closely related, but they...</td>\n    </tr>\n    <tr>\n      <th>18707</th>\n      <td>1398294299</td>\n      <td>[\"How complex is the strategy in the board gam...</td>\n      <td>[\"Here's a quick overview of the strategic com...</td>\n      <td>[\"The board game Concordia has a moderate leve...</td>\n    </tr>\n    <tr>\n      <th>15200</th>\n      <td>1133596846</td>\n      <td>[\"What predictions CAN make regarding myopia p...</td>\n      <td>[\"I'm sorry, but I cannot provide specific pre...</td>\n      <td>[\"Based on your provided information, the foll...</td>\n    </tr>\n    <tr>\n      <th>5857</th>\n      <td>441036120</td>\n      <td>[\"using the world of warcraft lua language and...</td>\n      <td>[\"\\/run local cursorPos = {x=100, y=100} curso...</td>\n      <td>[\"Here is a World of Warcraft macro that posit...</td>\n    </tr>\n  </tbody>\n</table>\n<p>10000 rows × 4 columns</p>\n</div>"},"metadata":{}}],"execution_count":16},{"cell_type":"code","source":"y_train","metadata":{"trusted":true,"editable":false,"execution":{"iopub.status.busy":"2025-09-04T22:45:45.549464Z","iopub.execute_input":"2025-09-04T22:45:45.549683Z","iopub.status.idle":"2025-09-04T22:45:45.561344Z","shell.execute_reply.started":"2025-09-04T22:45:45.549668Z","shell.execute_reply":"2025-09-04T22:45:45.560802Z"}},"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"array([1, 1, 1, ..., 2, 1, 1])"},"metadata":{}}],"execution_count":17},{"cell_type":"code","source":"catagorical_feature = [col for col in X.columns if X[col].dtype == 'object']\ncatagorical_feature","metadata":{"trusted":true,"editable":false,"execution":{"iopub.status.busy":"2025-09-04T22:45:45.562069Z","iopub.execute_input":"2025-09-04T22:45:45.562450Z","iopub.status.idle":"2025-09-04T22:45:45.574339Z","shell.execute_reply.started":"2025-09-04T22:45:45.562428Z","shell.execute_reply":"2025-09-04T22:45:45.573698Z"}},"outputs":[{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"['prompt', 'response_a', 'response_b']"},"metadata":{}}],"execution_count":18},{"cell_type":"code","source":"from sentence_transformers import SentenceTransformer\nfrom sklearn.base import BaseEstimator, TransformerMixin\n\nfrom sklearn.compose import ColumnTransformer\n\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.feature_selection import SelectKBest, chi2\n\n\nfrom sentence_transformers import SentenceTransformer\nimport torch","metadata":{"trusted":true,"editable":false,"execution":{"iopub.status.busy":"2025-09-04T22:45:45.575148Z","iopub.execute_input":"2025-09-04T22:45:45.575388Z","iopub.status.idle":"2025-09-04T22:45:45.588344Z","shell.execute_reply.started":"2025-09-04T22:45:45.575365Z","shell.execute_reply":"2025-09-04T22:45:45.587626Z"}},"outputs":[],"execution_count":19},{"cell_type":"markdown","source":"from sentence_transformers import SentenceTransformer\nfrom sklearn.base import BaseEstimator, TransformerMixin\n\nfrom sklearn.compose import ColumnTransformer\n\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.feature_selection import SelectKBest, chi2\n\n\nfrom sentence_transformers import SentenceTransformer\nimport torch\n\nclass HFEmbedder(BaseEstimator, TransformerMixin):\n    def __init__(self, model_name=\"all-mpnet-base-v2\"):\n        self.model_name = model_name  \n        self.model = SentenceTransformer(model_name)\n        if torch.cuda.is_available():\n            self.model = self.model.to(\"cuda\")\n\n    def fit(self, X, y=None):\n        return self\n\n    def transform(self, X):\n        return self.model.encode(X.tolist(), show_progress_bar=False, device=\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\n\n# Example usage in ColumnTransformer\npreprocessing = ColumnTransformer([\n    (\"prompt_embed\", HFEmbedder(), \"prompt\"),\n    (\"resp_a_embed\", HFEmbedder(), \"response_a\"),\n    (\"resp_b_embed\", HFEmbedder(), \"response_b\"),\n    (\"num\", \"passthrough\", [\"id\"])\n])\n","metadata":{"execution":{"iopub.status.busy":"2025-08-23T12:09:38.196345Z","iopub.execute_input":"2025-08-23T12:09:38.197094Z","iopub.status.idle":"2025-08-23T12:09:43.999261Z","shell.execute_reply.started":"2025-08-23T12:09:38.197069Z","shell.execute_reply":"2025-08-23T12:09:43.998604Z"},"editable":false}},{"cell_type":"code","source":"","metadata":{"trusted":true,"editable":false},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"from sentence_transformers import SentenceTransformer\nfrom sklearn.base import BaseEstimator, TransformerMixin\n\nfrom sklearn.compose import ColumnTransformer\n\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.feature_selection import SelectKBest, chi2\n\n\nfrom sentence_transformers import SentenceTransformer\nimport torch\nimport torch\n\nclass HFEmbedder(BaseEstimator, TransformerMixin):\n    def __init__(self, model_path=\"/kaggle/input/open-minilm-l6-v2\",use_auth_token=False , local_files_only=True,batch_size=8, use_cuda=True):\n        self.model_path = model_path\n        self.batch_size = batch_size\n        self.use_cuda = use_cuda and torch.cuda.is_available()\n        self.model = SentenceTransformer(self.model_path)\n        if self.use_cuda:\n            self.model = self.model.to(\"cuda\")\n\n    def fit(self, X, y=None):\n        return self\n\n    def transform(self, X):\n        texts = X.tolist()\n        all_embeddings = []\n\n        for i in range(0, len(texts), self.batch_size):\n            batch = texts[i:i + self.batch_size]\n            embeddings = self.model.encode(\n                batch,\n                show_progress_bar=False,\n                device=\"cuda\" if self.use_cuda else \"cpu\"\n            )\n            all_embeddings.append(embeddings)\n\n        return np.vstack(all_embeddings)\n\n","metadata":{"execution":{"iopub.status.busy":"2025-08-24T00:06:01.592096Z","iopub.execute_input":"2025-08-24T00:06:01.592776Z","iopub.status.idle":"2025-08-24T00:06:01.599761Z","shell.execute_reply.started":"2025-08-24T00:06:01.592751Z","shell.execute_reply":"2025-08-24T00:06:01.59901Z"},"editable":false}},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras import layers, models\n\ndef build_deberta_v3_model(config):\n    # Extract config values\n    vocab_size = config[\"vocabulary_size\"]\n    num_layers = config[\"num_layers\"]\n    num_heads = config[\"num_heads\"]\n    hidden_dim = config[\"hidden_dim\"]\n    intermediate_dim = config[\"intermediate_dim\"]\n    dropout_rate = config[\"dropout\"]\n    max_seq_len = config[\"max_sequence_length\"]\n\n    # Input layers\n    input_ids = layers.Input(shape=(max_seq_len,), dtype=tf.int32, name=\"input_ids\")\n    attention_mask = layers.Input(shape=(max_seq_len,), dtype=tf.int32, name=\"attention_mask\")\n\n    # Embedding layer\n    embedding_layer = layers.Embedding(input_dim=vocab_size, output_dim=hidden_dim)(input_ids)\n\n    # Positional encoding (simplified)\n    position_embeddings = layers.Embedding(input_dim=max_seq_len, output_dim=hidden_dim)(tf.range(start=0, limit=max_seq_len, delta=1))\n    position_embeddings = tf.expand_dims(position_embeddings, axis=0)\n    x = embedding_layer + position_embeddings\n\n    # Transformer blocks\n    for _ in range(num_layers):\n        attention_output = layers.MultiHeadAttention(num_heads=num_heads, key_dim=hidden_dim)(x, x, attention_mask=attention_mask)\n        attention_output = layers.Dropout(dropout_rate)(attention_output)\n        attention_output = layers.LayerNormalization()(x + attention_output)\n\n        ffn_output = layers.Dense(intermediate_dim, activation='gelu')(attention_output)\n        ffn_output = layers.Dense(hidden_dim)(ffn_output)\n        ffn_output = layers.Dropout(dropout_rate)(ffn_output)\n        x = layers.LayerNormalization()(attention_output + ffn_output)\n\n    # Output (for embedding use, you might just return x)\n    pooled_output = layers.GlobalAveragePooling1D()(x)\n\n    model = models.Model(inputs=[input_ids, attention_mask], outputs=pooled_output)\n    return model\n","metadata":{"trusted":true,"editable":false,"execution":{"iopub.status.busy":"2025-09-04T22:45:45.589091Z","iopub.execute_input":"2025-09-04T22:45:45.589289Z","iopub.status.idle":"2025-09-04T22:45:45.657678Z","shell.execute_reply.started":"2025-09-04T22:45:45.589274Z","shell.execute_reply":"2025-09-04T22:45:45.657024Z"}},"outputs":[],"execution_count":20},{"cell_type":"markdown","source":"from transformers import AutoTokenizer, AutoModel\nfrom sklearn.base import BaseEstimator, TransformerMixin\nfrom transformers import AutoTokenizer, AutoModel\nfrom transformers import DebertaV2Tokenizer\nfrom tensorflow.keras.models import load_model\nimport torch\nimport numpy as np\nfrom keras_hub.src.models.deberta_v3.deberta_v3_backbone import DebertaV3Backbone\n\nconfig = {\n    \"vocabulary_size\": 128100,\n    \"num_layers\": 12,\n    \"num_heads\": 6,\n    \"hidden_dim\": 384,\n    \"intermediate_dim\": 1536,\n    \"dropout\": 0.1,\n    \"max_sequence_length\": 512,\n    \"bucket_size\": 256\n}\n\n\nclass HFEmbedder(BaseEstimator, TransformerMixin):\n    def __init__(self, model_path=\"/kaggle/input/deberta_v3/keras/deberta_v3_extra_small_en/3\", batch_size=8, use_cuda=True):\n        self.model_path = model_path\n        self.batch_size = batch_size\n        self.use_cuda = use_cuda and torch.cuda.is_available()\n        self.tokenizer = DebertaV2Tokenizer(vocab_file=\"/kaggle/input/deberta_v3/keras/deberta_v3_extra_small_en/3/assets/tokenizer/vocabulary.spm\")\n        #self.tokenizer = AutoTokenizer.from_pretrained(self.model_path)\n        #self.model = AutoModel.from_pretrained(self.model_path)\n        self.model =  DebertaV3Backbone(\n            vocabulary_size=128100,\n            num_layers=12,\n            num_heads=6,\n            hidden_dim=384,\n            intermediate_dim=1536,\n            dropout=0.1,\n            max_sequence_length=512,\n            bucket_size=256\n        )\n  # Define your model architecture here\n        self.model.load_weights(\"/kaggle/input/deberta_v3/keras/deberta_v3_extra_small_en/3/model.weights.h5\")\n        print([input.name for input in self.model.inputs])\n\n        if self.use_cuda:\n            self.model = self.model#.to(\"cuda\")\n\n    def fit(self, X, y=None):\n        return self\n\n    def transform(self, X):\n        texts = X.tolist()\n        all_embeddings = []\n\n        for i in range(0, len(texts), self.batch_size):\n            batch = texts[i:i + self.batch_size]\n            inputs = self.tokenizer(batch, padding=True, truncation=True, return_tensors=\"pt\")\n            \n            inputs = self.tokenizer(batch, padding=True, truncation=True, return_tensors=\"pt\")\n            \n            # Rename keys to match model input expectations\n            model_inputs = {\n                \"padding_mask\": inputs[\"attention_mask\"],\n                \"token_ids\": inputs[\"input_ids\"]\n            }\n            \n            if self.use_cuda:\n                model_inputs = {k: v.to(\"cuda\") for k, v in model_inputs.items()}\n            \n            with torch.no_grad():\n                outputs = self.model(model_inputs) \n\n            # Mean pooling over token embeddings\n            embeddings = outputs.last_hidden_state.mean(dim=1).cpu().numpy()\n            all_embeddings.append(embeddings)\n\n        return np.vstack(all_embeddings)\n","metadata":{"editable":false,"execution":{"iopub.status.busy":"2025-09-02T08:53:23.227426Z","iopub.execute_input":"2025-09-02T08:53:23.227655Z","iopub.status.idle":"2025-09-02T08:53:24.187917Z","shell.execute_reply.started":"2025-09-02T08:53:23.227636Z","shell.execute_reply":"2025-09-02T08:53:24.187308Z"}}},{"cell_type":"markdown","source":"from transformers import DebertaV2Tokenizer\nfrom sklearn.base import BaseEstimator, TransformerMixin\nimport torch\nimport numpy as np\nimport tensorflow as tf\nfrom keras_hub.src.models.deberta_v3.deberta_v3_backbone import DebertaV3Backbone\n\n\nclass HFEmbedder(BaseEstimator, TransformerMixin):\n    def __init__(self, model_path=\"/kaggle/input/deberta_v3/keras/deberta_v3_extra_small_en/3\", batch_size=4):\n        self.model_path = model_path\n        self.batch_size = batch_size\n\n        # Load tokenizer\n        self.tokenizer = DebertaV2Tokenizer(vocab_file=f\"{self.model_path}/assets/tokenizer/vocabulary.spm\")\n\n        # Load model\n        self.model = DebertaV3Backbone(\n            vocabulary_size=128100,\n            num_layers=12,\n            num_heads=6,\n            hidden_dim=384,\n            intermediate_dim=1536,\n            dropout=0.1,\n            max_sequence_length=512,\n            bucket_size=256\n        )\n        self.model.load_weights(f\"{self.model_path}/model.weights.h5\")\n\n        print(\"✅ Model input names:\", [input.name for input in self.model.inputs])\n\n    def fit(self, X, y=None):\n        return self\n\n    def transform(self, X):\n        texts = X.tolist()\n        all_embeddings = []\n\n        for i in range(0, len(texts), self.batch_size):\n            batch = texts[i:i + self.batch_size]\n\n            # Tokenize using PyTorch tokenizer\n            tokens = self.tokenizer(batch, padding=True, truncation=True, return_tensors=\"pt\")\n\n            # Convert PyTorch tensors to NumPy arrays\n            padding_mask_np = tokens[\"attention_mask\"].cpu().numpy()\n            token_ids_np = tokens[\"input_ids\"].cpu().numpy()\n\n            # Convert to TensorFlow tensors\n            model_inputs = {\n                \"padding_mask\": tf.convert_to_tensor(padding_mask_np),\n                \"token_ids\": tf.convert_to_tensor(token_ids_np)\n            }\n\n            # Forward pass\n            outputs = self.model(model_inputs)  # returns a tensor directly\n\n            # Mean pooling and convert to NumPy\n            embeddings = tf.reduce_mean(outputs, axis=1).numpy()\n            all_embeddings.append(embeddings)\n\n        return np.vstack(all_embeddings)\n\n# ...existing code...\nfrom transformers import DebertaV2Tokenizer\nfrom sklearn.base import BaseEstimator, TransformerMixin\nimport torch\nimport numpy as np\nimport tensorflow as tf\nfrom keras_hub.src.models.deberta_v3.deberta_v3_backbone import DebertaV3Backbone\n\nclass HFEmbedder(BaseEstimator, TransformerMixin):\n    def __init__(self, model_path=\"/kaggle/input/deberta_v3/keras/deberta_v3_extra_small_en/3\", batch_size=4, max_length=512):\n        self.model_path = model_path\n        self.batch_size = batch_size\n        # enforce and cap max token length to backbone capacity\n        self.max_length = min(int(max_length), 512)\n\n        # Load tokenizer and set model max length\n        self.tokenizer = DebertaV2Tokenizer(vocab_file=f\"{self.model_path}/assets/tokenizer/vocabulary.spm\")\n        self.tokenizer.model_max_length = self.max_length\n\n        # Load model backbone\n        self.model = DebertaV3Backbone(\n            vocabulary_size=128100,\n            num_layers=12,\n            num_heads=6,\n            hidden_dim=384,\n            intermediate_dim=1536,\n            dropout=0.1,\n            max_sequence_length=512,\n            bucket_size=256\n        )\n        self.model.load_weights(f\"{self.model_path}/model.weights.h5\")\n\n        print(\"✅ Model input names:\", [input.name for input in self.model.inputs])\n\n    def fit(self, X, y=None):\n        return self\n\n    def transform(self, X):\n        # Accept pandas Series / DataFrame / numpy array / list\n        if hasattr(X, \"to_list\"):\n            texts = X.to_list()\n        else:\n            texts = list(X)\n\n        # Coerce each row to a single text string.\n        def _to_text(item):\n            if isinstance(item, (list, tuple, np.ndarray)):\n                if len(item) == 0:\n                    return \"\"\n                if len(item) == 1:\n                    return str(item[0])\n                return \" \".join(str(x) for x in item)\n            return \"\" if item is None else str(item)\n\n        texts = [_to_text(t) for t in texts]\n        all_embeddings = []\n\n        for i in range(0, len(texts), self.batch_size):\n            batch = texts[i:i + self.batch_size]\n\n            # Tokenize with fixed max length so TF model receives fixed-size inputs\n            tokens = self.tokenizer(\n                batch,\n                padding=\"max_length\",\n                truncation=True,\n                max_length=self.max_length,\n                return_tensors=\"pt\",\n            )\n\n            # Convert PyTorch tensors to NumPy arrays\n            padding_mask_np = tokens[\"attention_mask\"].cpu().numpy()\n            token_ids_np = tokens[\"input_ids\"].cpu().numpy()\n\n            # Convert to TensorFlow tensors for the Keras backbone\n            model_inputs = {\n                \"padding_mask\": tf.convert_to_tensor(padding_mask_np),\n                \"token_ids\": tf.convert_to_tensor(token_ids_np)\n            }\n\n            # Forward pass (returns tensor [batch, seq_len, hidden])\n            outputs = self.model(model_inputs)\n\n            # Mean pooling across sequence length, convert to NumPy\n            embeddings = tf.reduce_mean(outputs, axis=1).numpy()\n            all_embeddings.append(embeddings)\n\n        return np.vstack(all_embeddings)\n\n\n# ...existing code...\nclass HFEmbedder(BaseEstimator, TransformerMixin):\n    def __init__(self, model_path=\"/kaggle/input/deberta_v3/keras/deberta_v3_extra_small_en/3\", batch_size=4, max_length=512):\n        import tensorflow as tf\n        import numpy as np\n\n        self.model_path = model_path\n        self.batch_size = batch_size\n        # enforce and cap max token length to backbone capacity\n        self.max_length = min(int(max_length), 512)\n\n        # Make TF GPU usage explicit / safe\n        try:\n            gpus = tf.config.list_physical_devices(\"GPU\")\n            if gpus:\n                for g in gpus:\n                    tf.config.experimental.set_memory_growth(g, True)\n        except Exception:\n            pass\n\n        # Load tokenizer and set model max length\n        self.tokenizer = DebertaV2Tokenizer(vocab_file=f\"{self.model_path}/assets/tokenizer/vocabulary.spm\")\n        self.tokenizer.model_max_length = self.max_length\n\n        # Load model backbone (Keras)\n        self.model = DebertaV3Backbone(\n            vocabulary_size=128100,\n            num_layers=12,\n            num_heads=6,\n            hidden_dim=384,\n            intermediate_dim=1536,\n            dropout=0.1,\n            max_sequence_length=512,\n            bucket_size=256\n        )\n        self.model.load_weights(f\"{self.model_path}/model.weights.h5\")\n\n        print(\"✅ Model input names:\", [input.name for input in self.model.inputs])\n        # optional: warm-up call with zeros to ensure TF places variables on GPU if available\n        try:\n            import tensorflow as tf\n            dummy_input = {\n                \"padding_mask\": tf.zeros((1, self.max_length), dtype=tf.int32),\n                \"token_ids\": tf.zeros((1, self.max_length), dtype=tf.int32),\n            }\n            _ = self.model(dummy_input)\n        except Exception:\n            pass\n\n    def fit(self, X, y=None):\n        return self\n\n    def transform(self, X):\n        import tensorflow as tf\n        import numpy as np\n\n        # Accept pandas Series / DataFrame / numpy array / list\n        if hasattr(X, \"to_list\"):\n            texts = X.to_list()\n        else:\n            texts = list(X)\n\n        # Coerce each row to a single text string.\n        def _to_text(item):\n            if isinstance(item, (list, tuple, np.ndarray)):\n                if len(item) == 0:\n                    return \"\"\n                if len(item) == 1:\n                    return str(item[0])\n                return \" \".join(str(x) for x in item)\n            return \"\" if item is None else str(item)\n\n        texts = [_to_text(t) for t in texts]\n        all_embeddings = []\n        hidden_dim = None\n        try:\n            # Try to infer hidden dim from model output_shape (Keras style)\n            hidden_dim = int(self.model.output_shape[-1])\n        except Exception:\n            hidden_dim = None\n\n        for i in range(0, len(texts), self.batch_size):\n            batch = texts[i:i + self.batch_size]\n\n            # Tokenize directly to TensorFlow tensors to avoid PyTorch tensors and extra copies\n            try:\n                tokens = self.tokenizer(\n                    batch,\n                    padding=\"max_length\",\n                    truncation=True,\n                    max_length=self.max_length,\n                    return_tensors=\"tf\",   # <-- use \"tf\" to get TF tensors directly\n                )\n            except Exception:\n                # fallback: tokenize each item separately and return numpy then convert to tf\n                tokens = self.tokenizer(\n                    [str(t) for t in batch],\n                    padding=\"max_length\",\n                    truncation=True,\n                    max_length=self.max_length,\n                    return_tensors=\"np\",\n                )\n                # convert np arrays to tf tensors\n                tokens = {k: tf.convert_to_tensor(v, dtype=tf.int32) for k, v in tokens.items()}\n\n            # Ensure integer dtype expected by TF/Keras\n            token_ids_tf = tf.cast(tokens[\"input_ids\"], tf.int32)\n            attention_mask_tf = tf.cast(tokens[\"attention_mask\"], tf.int32)\n\n            model_inputs = {\n                \"padding_mask\": attention_mask_tf,\n                \"token_ids\": token_ids_tf\n            }\n\n            # Forward pass (Keras/TF will place ops on GPU if available)\n            outputs = self.model(model_inputs)  # [batch, seq_len, hidden]\n\n            # Mean pooling across sequence length, convert to NumPy for downstream sklearn pipelines\n            embeddings = tf.reduce_mean(outputs, axis=1).numpy()\n            all_embeddings.append(embeddings)\n\n            # update hidden_dim if unknown\n            if hidden_dim is None:\n                try:\n                    hidden_dim = int(embeddings.shape[1])\n                except Exception:\n                    hidden_dim = None\n\n        if not all_embeddings:\n            # return an empty 2D array with known hidden dim if possible\n            if hidden_dim is not None:\n                return np.zeros((0, hidden_dim), dtype=np.float32)\n            return np.empty((0,))\n\n        return np.vstack(all_embeddings)\n# ...existing\n\nfrom transformers import DebertaV2Tokenizer\nfrom sklearn.base import BaseEstimator, TransformerMixin\nimport torch\nimport numpy as np\nimport tensorflow as tf\nfrom keras_hub.src.models.deberta_v3.deberta_v3_backbone import DebertaV3Backbone\nimport os # Import os module\n\nclass HFEmbedder(BaseEstimator, TransformerMixin):\n    def __init__(self, model_path, batch_size=8, max_length=512, use_fast_tokenizer=True, enable_mixed_precision=True):\n        import tensorflow as tf\n        import numpy as np\n        import os\n        import multiprocessing\n\n        self.model_path = model_path\n        self.batch_size = int(batch_size)\n        self.max_length = min(int(max_length), 512)\n        self.use_fast_tokenizer = use_fast_tokenizer\n        self.enable_mixed_precision = enable_mixed_precision # Add this line to store the parameter\n        self._cpu_count = multiprocessing.cpu_count()\n\n        # Make TF GPU usage explicit / safe\n        try:\n            gpus = tf.config.list_physical_devices(\"GPU\")\n            if gpus:\n                for g in gpus:\n                    tf.config.experimental.set_memory_growth(g, True)\n        except Exception:\n            pass\n\n        # optionally use mixed precision on GPUs (speeds up fp16 capable GPUs)\n        try:\n            if self.enable_mixed_precision: # Use self.enable_mixed_precision\n                from tensorflow.keras import mixed_precision\n                mixed_precision.set_global_policy(\"mixed_float16\")\n        except Exception:\n            pass\n\n        # Load tokenizer (prefer fast tokenizer if available)\n        try:\n            if self.use_fast_tokenizer:\n                from transformers import DebertaV2TokenizerFast as _TokFast\n                self.tokenizer = _TokFast(vocab_file=os.path.join(self.model_path, \"assets/tokenizer/vocabulary.spm\")) # Use os.path.join\n            else:\n                from transformers import DebertaV2Tokenizer as _Tok\n                self.tokenizer = _Tok(vocab_file=os.path.join(self.model_path, \"assets/tokenizer/vocabulary.spm\")) # Use os.path.join\n        except Exception:\n            # fallback to original import name/location\n            try:\n                from transformers import DebertaV2Tokenizer as _Tok\n                self.tokenizer = _Tok(vocab_file=os.path.join(self.model_path, \"assets/tokenizer/vocabulary.spm\")) # Use os.path.join\n            except Exception:\n                raise\n\n        self.tokenizer.model_max_length = self.max_length\n\n        # Load model backbone (Keras)\n        self.model = DebertaV3Backbone(\n            vocabulary_size=128100,\n            num_layers=12,\n            num_heads=6,\n            hidden_dim=384,\n            intermediate_dim=1536,\n            dropout=0.1,\n            max_sequence_length=512,\n            bucket_size=256\n        )\n        self.model.load_weights(os.path.join(self.model_path, \"model.weights.h5\")) # Use os.path.join\n\n        print(\"✅ Model input names:\", [input.name for input in self.model.inputs])\n        # optional: warm-up call with zeros to ensure TF places variables on GPU if available\n        try:\n            import tensorflow as tf\n            dummy_input = {\n                \"padding_mask\": tf.zeros((1, self.max_length), dtype=tf.int32),\n                \"token_ids\": tf.zeros((1, self.max_length), dtype=tf.int32),\n            }\n            _ = self.model(dummy_input)\n        except Exception:\n            pass\n\n    def fit(self, X, y=None):\n        return self\n\n    def transform(self, X):\n        import tensorflow as tf\n        import numpy as np\n\n        # Accept pandas Series / DataFrame / numpy array / list\n        if hasattr(X, \"to_list\"):\n            texts = X.to_list()\n        else:\n            texts = list(X)\n\n        # Coerce each row to a single text string.\n        def _to_text(item):\n            if isinstance(item, (list, tuple, np.ndarray)):\n                if len(item) == 0:\n                    return \"\"\n                if len(item) == 1:\n                    return str(item[0])\n                return \" \".join(str(x) for x in item)\n            return \"\" if item is None else str(item)\n\n        texts = [_to_text(t) for t in texts]\n        n = len(texts)\n        if n == 0:\n            # no data -> return empty with inferred dim if possible\n            try:\n                hidden_dim = int(self.model.output_shape[-1])\n                return np.zeros((0, hidden_dim), dtype=np.float32)\n            except Exception:\n                return np.empty((0,))\n\n        # If tokenizer is \"fast\" we can tokenize the whole dataset in one call (fast, Rust-backed)\n        try:\n            if self.use_fast_tokenizer:\n                # Vectorized tokenization to numpy arrays (fast)\n                tokens_np = self.tokenizer(\n                    texts,\n                    padding=\"max_length\",\n                    truncation=True,\n                    max_length=self.max_length,\n                    return_tensors=\"np\",\n                )\n                # Build a tf.data.Dataset to feed the model efficiently (reduces Python overhead)\n                input_ids = tf.cast(tokens_np[\"input_ids\"], tf.int32)\n                attention_mask = tf.cast(tokens_np[\"attention_mask\"], tf.int32)\n\n                ds = tf.data.Dataset.from_tensor_slices(\n                    {\"token_ids\": input_ids, \"padding_mask\": attention_mask}\n                )\n                ds = ds.batch(max(1, self.batch_size)).prefetch(tf.data.AUTOTUNE)\n\n                # Use model.predict on the dataset so Keras can optimize execution and improve GPU utilization\n                outputs = self.model.predict(ds, verbose=0)\n                embeddings = np.mean(outputs, axis=1)\n                return embeddings\n        except Exception:\n            # fall back to batching loop below if anything fails\n            pass\n\n        # Fallback: batch-tokenize and call model per-batch (keeps fewer copies)\n        all_embeddings = []\n        hidden_dim = None\n        try:\n            hidden_dim = int(self.model.output_shape[-1])\n        except Exception:\n            hidden_dim = None\n\n        for i in range(0, n, self.batch_size):\n            batch = texts[i:i + self.batch_size]\n            # Tokenize directly to TensorFlow tensors where possible (reduces copies)\n            try:\n                tokens = self.tokenizer(\n                    batch,\n                    padding=\"max_length\",\n                    truncation=True,\n                    max_length=self.max_length,\n                    return_tensors=\"tf\",\n                )\n                token_ids_tf = tf.cast(tokens[\"input_ids\"], tf.int32)\n                attention_mask_tf = tf.cast(tokens[\"attention_mask\"], dtype=tf.int32)\n                model_inputs = {\"padding_mask\": attention_mask_tf, \"token_ids\": token_ids_tf}\n                outputs = self.model(model_inputs)\n                embeddings = tf.reduce_mean(outputs, axis=1).numpy()\n            except Exception:\n                # safest fallback: numpy tokenization then tf convert\n                tokens = self.tokenizer(\n                    [str(t) for t in batch],\n                    padding=\"max_length\",\n                    truncation=True,\n                    max_length=self.max_length,\n                    return_tensors=\"np\",\n                )\n                token_ids_tf = tf.convert_to_tensor(tokens[\"input_ids\"], dtype=tf.int32)\n                attention_mask_tf = tf.convert_to_tensor(tokens[\"attention_mask\"], dtype=tf.int32)\n                model_inputs = {\"padding_mask\": attention_mask_tf, \"token_ids\": token_ids_tf}\n                outputs = self.model(model_inputs)\n                embeddings = tf.reduce_mean(outputs, axis=1).numpy()\n\n            all_embeddings.append(embeddings)\n            if hidden_dim is None:\n                try:\n                    hidden_dim = int(embeddings.shape[1])\n                except Exception:\n                    hidden_dim = None\n\n        if not all_embeddings:\n            if hidden_dim is not None:\n                return np.zeros((0, hidden_dim), dtype=np.float32)\n            return np.empty((0,))\n\n        return np.vstack(all_embeddings)","metadata":{"editable":false,"execution":{"iopub.status.busy":"2025-09-01T11:11:36.366153Z","iopub.execute_input":"2025-09-01T11:11:36.366354Z","iopub.status.idle":"2025-09-01T11:11:36.402906Z","shell.execute_reply.started":"2025-09-01T11:11:36.366339Z","shell.execute_reply":"2025-09-01T11:11:36.402327Z"}}},{"cell_type":"code","source":"\n\nfrom transformers import DebertaV2Tokenizer\nfrom sklearn.base import BaseEstimator, TransformerMixin\nimport torch\nimport numpy as np\nimport tensorflow as tf\nfrom keras_hub.src.models.deberta_v3.deberta_v3_backbone import DebertaV3Backbone\nimport os # Import os module\n\nclass HFEmbedder2(BaseEstimator, TransformerMixin):\n    def __init__(self, model_path=\"/kaggle/input/deberta_v3/keras/deberta_v3_small_en/3\", batch_size=16, max_length=512, use_fast_tokenizer=True, enable_mixed_precision=True):\n        import tensorflow as tf\n        import numpy as np\n        import os\n        import multiprocessing\n\n        self.model_path = model_path\n        self.batch_size = int(batch_size)\n        self.max_length = min(int(max_length), 512)\n        self.use_fast_tokenizer = use_fast_tokenizer\n        self.enable_mixed_precision = enable_mixed_precision # Add this line to store the parameter\n        self._cpu_count = multiprocessing.cpu_count()\n\n        # Make TF GPU usage explicit / safe\n        try:\n            gpus = tf.config.list_physical_devices(\"GPU\")\n            if gpus:\n                for g in gpus:\n                    tf.config.experimental.set_memory_growth(g, True)\n        except Exception:\n            pass\n\n        # optionally use mixed precision on GPUs (speeds up fp16 capable GPUs)\n        try:\n            if self.enable_mixed_precision: # Use self.enable_mixed_precision\n                from tensorflow.keras import mixed_precision\n                mixed_precision.set_global_policy(\"mixed_float16\")\n        except Exception:\n            pass\n\n        # Load tokenizer (prefer fast tokenizer if available)\n        try:\n            if self.use_fast_tokenizer:\n                from transformers import DebertaV2TokenizerFast as _TokFast\n                self.tokenizer = _TokFast(vocab_file=os.path.join(self.model_path, \"assets/tokenizer/vocabulary.spm\")) # Use os.path.join\n            else:\n                from transformers import DebertaV2Tokenizer as _Tok\n                self.tokenizer = _Tok(vocab_file=os.path.join(self.model_path, \"assets/tokenizer/vocabulary.spm\")) # Use os.path.join\n        except Exception:\n            # fallback to original import name/location\n            try:\n                from transformers import DebertaV2Tokenizer as _Tok\n                self.tokenizer = _Tok(vocab_file=os.path.join(self.model_path, \"assets/tokenizer/vocabulary.spm\")) # Use os.path.join\n            except Exception:\n                raise\n\n        self.tokenizer.model_max_length = self.max_length\n\n        # Load model backbone (Keras)\n        config = self._detect_model_config()\n        self.model = DebertaV3Backbone(\n            vocabulary_size=128100,\n            num_layers=config[\"num_layers\"],\n            num_heads=config[\"num_heads\"],\n            hidden_dim=config[\"hidden_dim\"],\n            intermediate_dim=config[\"intermediate_dim\"],\n            dropout=0.1,\n            max_sequence_length=512,\n            bucket_size=256\n        )\n\n\n        self.model.load_weights(os.path.join(self.model_path, \"model.weights.h5\")) # Use os.path.join\n\n        print(\"✅ Model input names:\", [input.name for input in self.model.inputs])\n        # optional: warm-up call with zeros to ensure TF places variables on GPU if available\n        try:\n            import tensorflow as tf\n            dummy_input = {\n                \"padding_mask\": tf.zeros((1, self.max_length), dtype=tf.int32),\n                \"token_ids\": tf.zeros((1, self.max_length), dtype=tf.int32),\n            }\n            _ = self.model(dummy_input)\n        except Exception:\n            pass\n    def _detect_model_config(self):\n            import os\n            import json\n        \n            config_path = os.path.join(self.model_path, \"config.json\")\n            if os.path.exists(config_path):\n                try:\n                    with open(config_path, \"r\") as f:\n                        config = json.load(f)\n                    return {\n                        \"num_layers\": config.get(\"num_layers\", 12),\n                        \"num_heads\": config.get(\"num_attention_heads\", 12),\n                        \"hidden_dim\": config.get(\"hidden_size\", 768),\n                        \"intermediate_dim\": config.get(\"intermediate_size\", 3072),\n                    }\n                except Exception as e:\n                    print(f\"⚠️ Failed to read config.json: {e}\")\n        \n            # Fallback: infer from folder name\n            path_lower = self.model_path.lower()\n            if \"small\" in path_lower:\n                return {\n                    \"num_layers\": 12,\n                    \"num_heads\": 6,\n                    \"hidden_dim\": 768,\n                    \"intermediate_dim\": 3072,\n                }\n            elif \"base\" in path_lower:\n                return {\n                    \"num_layers\": 12,\n                    \"num_heads\": 12,\n                    \"hidden_dim\": 768,\n                    \"intermediate_dim\": 3072,\n                }\n        \n            print(\"⚠️ Could not auto-detect model config. Using default base config.\")\n            return {\n                \"num_layers\": 12,\n                \"num_heads\": 12,\n                \"hidden_dim\": 768,\n                \"intermediate_dim\": 3072,\n            }\n\n\n    def fit(self, X, y=None):\n        return self\n\n    def transform(self, X):\n        import tensorflow as tf\n        import numpy as np\n\n        # Accept pandas Series / DataFrame / numpy array / list\n        if hasattr(X, \"to_list\"):\n            texts = X.to_list()\n        else:\n            texts = list(X)\n\n        # Coerce each row to a single text string.\n        def _to_text(item):\n            if isinstance(item, (list, tuple, np.ndarray)):\n                if len(item) == 0:\n                    return \"\"\n                if len(item) == 1:\n                    return str(item[0])\n                return \" \".join(str(x) for x in item)\n            return \"\" if item is None else str(item)\n\n        texts = [_to_text(t) for t in texts]\n        n = len(texts)\n        if n == 0:\n            # no data -> return empty with inferred dim if possible\n            try:\n                hidden_dim = int(self.model.output_shape[-1])\n                return np.zeros((0, hidden_dim), dtype=np.float32)\n            except Exception:\n                return np.empty((0,))\n\n        # If tokenizer is \"fast\" we can tokenize the whole dataset in one call (fast, Rust-backed)\n        try:\n            if self.use_fast_tokenizer:\n                # Vectorized tokenization to numpy arrays (fast)\n                tokens_np = self.tokenizer(\n                    texts,\n                    padding=\"max_length\",\n                    truncation=True,\n                    max_length=self.max_length,\n                    return_tensors=\"np\",\n                )\n                # Build a tf.data.Dataset to feed the model efficiently (reduces Python overhead)\n                input_ids = tf.cast(tokens_np[\"input_ids\"], tf.int32)\n                attention_mask = tf.cast(tokens_np[\"attention_mask\"], tf.int32)\n\n                ds = tf.data.Dataset.from_tensor_slices(\n                    {\"token_ids\": input_ids, \"padding_mask\": attention_mask}\n                )\n                ds = ds.batch(max(1, self.batch_size)).prefetch(tf.data.AUTOTUNE)\n\n                # Use model.predict on the dataset so Keras can optimize execution and improve GPU utilization\n                outputs = self.model.predict(ds, verbose=0)\n                embeddings = np.mean(outputs, axis=1)\n                return embeddings\n        except Exception:\n            # fall back to batching loop below if anything fails\n            pass\n\n        # Fallback: batch-tokenize and call model per-batch (keeps fewer copies)\n        all_embeddings = []\n        hidden_dim = None\n        try:\n            hidden_dim = int(self.model.output_shape[-1])\n        except Exception:\n            hidden_dim = None\n\n        for i in range(0, n, self.batch_size):\n            batch = texts[i:i + self.batch_size]\n            # Tokenize directly to TensorFlow tensors where possible (reduces copies)\n            try:\n                tokens = self.tokenizer(\n                    batch,\n                    padding=\"max_length\",\n                    truncation=True,\n                    max_length=self.max_length,\n                    return_tensors=\"tf\",\n                )\n                token_ids_tf = tf.cast(tokens[\"input_ids\"], tf.int32)\n                attention_mask_tf = tf.cast(tokens[\"attention_mask\"], dtype=tf.int32)\n                model_inputs = {\"padding_mask\": attention_mask_tf, \"token_ids\": token_ids_tf}\n                outputs = self.model(model_inputs)\n                embeddings = tf.reduce_mean(outputs, axis=1).numpy()\n            except Exception:\n                # safest fallback: numpy tokenization then tf convert\n                tokens = self.tokenizer(\n                    [str(t) for t in batch],\n                    padding=\"max_length\",\n                    truncation=True,\n                    max_length=self.max_length,\n                    return_tensors=\"np\",\n                )\n                token_ids_tf = tf.convert_to_tensor(tokens[\"input_ids\"], dtype=tf.int32)\n                attention_mask_tf = tf.convert_to_tensor(tokens[\"attention_mask\"], dtype=tf.int32)\n                model_inputs = {\"padding_mask\": attention_mask_tf, \"token_ids\": token_ids_tf}\n                outputs = self.model(model_inputs)\n                embeddings = tf.reduce_mean(outputs, axis=1).numpy()\n\n            all_embeddings.append(embeddings)\n            if hidden_dim is None:\n                try:\n                    hidden_dim = int(embeddings.shape[1])\n                except Exception:\n                    hidden_dim = None\n\n        if not all_embeddings:\n            if hidden_dim is not None:\n                return np.zeros((0, hidden_dim), dtype=np.float32)\n            return np.empty((0,))\n\n        return np.vstack(all_embeddings)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-04T22:45:45.658523Z","iopub.execute_input":"2025-09-04T22:45:45.658769Z","iopub.status.idle":"2025-09-04T22:45:46.533625Z","shell.execute_reply.started":"2025-09-04T22:45:45.658748Z","shell.execute_reply":"2025-09-04T22:45:46.533083Z"}},"outputs":[],"execution_count":21},{"cell_type":"code","source":"from sklearn.base import BaseEstimator, TransformerMixin\nfrom transformers import TFAutoModel, AutoTokenizer\nimport tensorflow as tf\nimport numpy as np\n\nclass HFEmbedder1(BaseEstimator, TransformerMixin):\n    def __init__(self, model_path=\"microsoft/deberta-v3-xsmall\", batch_size=4, max_length=512, enable_mixed_precision=True):\n        self.model_path = model_path\n        self.batch_size = batch_size\n        self.max_length = max_length\n        self.enable_mixed_precision = enable_mixed_precision\n\n        # Enable mixed precision if requested\n        if self.enable_mixed_precision:\n            try:\n                from tensorflow.keras import mixed_precision\n                mixed_precision.set_global_policy(\"mixed_float16\")\n            except Exception:\n                pass\n\n        # Load tokenizer and model from HuggingFace\n        self.tokenizer = AutoTokenizer.from_pretrained(self.model_path)\n        self.model = TFAutoModel.from_pretrained(self.model_path)\n\n    def fit(self, X, y=None):\n        return self\n\n    def transform(self, X):\n        import pandas as pd\n    \n        # Handle different input types from ColumnTransformer\n        if isinstance(X, pd.DataFrame):\n            # If multiple columns are passed, take the first one\n            if X.shape[1] > 1:\n                texts = X.iloc[:, 0].astype(str).tolist()\n            else:\n                texts = X.squeeze().astype(str).tolist()\n        elif hasattr(X, \"to_list\"):\n            texts = X.astype(str).to_list()\n        else:\n            texts = [str(x) for x in X]\n    \n        if not texts:\n            return np.empty((0, self.model.config.hidden_size), dtype=np.float32)\n    \n        # Tokenize\n        tokens = self.tokenizer(\n            texts,\n            padding=\"max_length\",\n            truncation=True,\n            max_length=self.max_length,\n            return_tensors=\"tf\"\n        )\n    \n        # Forward pass\n        outputs = self.model(**tokens)\n        embeddings = tf.reduce_mean(outputs.last_hidden_state, axis=1).numpy()\n    \n        return embeddings\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-04T22:45:46.534296Z","iopub.execute_input":"2025-09-04T22:45:46.534479Z","iopub.status.idle":"2025-09-04T22:45:46.542481Z","shell.execute_reply.started":"2025-09-04T22:45:46.534464Z","shell.execute_reply":"2025-09-04T22:45:46.541809Z"}},"outputs":[],"execution_count":22},{"cell_type":"code","source":"import re\nimport nltk\nfrom nltk.corpus import stopwords\nfrom nltk.stem import WordNetLemmatizer\n\nnltk.download(\"stopwords\")\nnltk.download(\"wordnet\")\n\nstop_words = set(stopwords.words(\"english\"))\nlemmatizer = WordNetLemmatizer()\n\ndef clean_text_for_common_words(text):\n    text = text.lower()\n    text = re.sub(r'[^\\w\\s]', '', text)\n    tokens = text.split()\n    return [lemmatizer.lemmatize(word) for word in tokens if word not in stop_words]\n\n\nclass CommonWordsTransformer(BaseEstimator, TransformerMixin):\n    def __init__(self):\n        pass\n\n    def fit(self, X, y=None):\n        return self\n\n    def transform(self, X):\n        common_meaningful_words_a = []\n        common_meaningful_words_b = []\n\n        for index, row in X.iterrows():\n            prompt_tokens = clean_text_for_common_words(row['prompt'])\n            response_a_tokens = clean_text_for_common_words(row['response_a'])\n            response_b_tokens = clean_text_for_common_words(row['response_b'])\n\n            common_meaningful_a = len(set(prompt_tokens) & set(response_a_tokens))\n            common_meaningful_b = len(set(prompt_tokens) & set(response_b_tokens))\n\n            common_meaningful_words_a.append(common_meaningful_a)\n            common_meaningful_words_b.append(common_meaningful_b)\n\n        return np.array([common_meaningful_words_a, common_meaningful_words_b]).T","metadata":{"trusted":true,"editable":false,"execution":{"iopub.status.busy":"2025-09-04T22:45:46.543254Z","iopub.execute_input":"2025-09-04T22:45:46.543514Z","iopub.status.idle":"2025-09-04T22:45:47.037450Z","shell.execute_reply.started":"2025-09-04T22:45:46.543492Z","shell.execute_reply":"2025-09-04T22:45:47.036831Z"}},"outputs":[{"name":"stderr","text":"[nltk_data] Downloading package stopwords to /usr/share/nltk_data...\n[nltk_data]   Package stopwords is already up-to-date!\n[nltk_data] Downloading package wordnet to /usr/share/nltk_data...\n[nltk_data]   Package wordnet is already up-to-date!\n","output_type":"stream"}],"execution_count":23},{"cell_type":"code","source":"X_train[\"prompt_clean\"] = X_train[\"prompt\"].apply(clean_text_for_common_words)\nX_train[\"response_a_clean\"] = X_train[\"response_a\"].apply(clean_text_for_common_words)\nX_train[\"response_b_clean\"] = X_train[\"response_b\"].apply(clean_text_for_common_words)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-04T22:45:47.038123Z","iopub.execute_input":"2025-09-04T22:45:47.038369Z","iopub.status.idle":"2025-09-04T22:46:30.245420Z","shell.execute_reply.started":"2025-09-04T22:45:47.038347Z","shell.execute_reply":"2025-09-04T22:46:30.244861Z"}},"outputs":[],"execution_count":24},{"cell_type":"markdown","source":"embedder = HFEmbedder(model_path=\"/kaggle/input/deberta_v3/keras/deberta_v3_extra_small_en/3\")\nX_train[\"prompt_clean\"] = X_train[\"prompt\"].apply(clean_text_for_common_words)\nX_train[\"response_a_clean\"] = X_train[\"response_a\"].apply(clean_text_for_common_words)\nX_train[\"response_b_clean\"] = X_train[\"response_b\"].apply(clean_text_for_common_words)\n\ncommon_words_transformer = CommonWordsTransformer()\n# Updated preprocessing transformer\npreprocessing = ColumnTransformer([\n    (\"prompt_embed\", embedder, \"prompt_clean\"),\n    (\"resp_a_embed\", embedder, \"response_a_clean\"),\n    (\"resp_b_embed\", embedder, \"response_a_clean\"),\n    (\"common_words\", common_words_transformer, [\"prompt\", \"response_a\", \"response_b\"]),\n    #(\"num\", \"passthrough\", [\"id\"])\n])\n\n","metadata":{"editable":false,"execution":{"iopub.status.busy":"2025-09-02T10:34:24.453915Z","iopub.execute_input":"2025-09-02T10:34:24.456071Z","iopub.status.idle":"2025-09-02T10:34:24.614454Z","shell.execute_reply.started":"2025-09-02T10:34:24.455996Z","shell.execute_reply":"2025-09-02T10:34:24.611660Z"}}},{"cell_type":"code","source":"class HFEmbedder(BaseEstimator, TransformerMixin):\n    def __init__(self, model_path, batch_size=16, max_length=512, use_fast_tokenizer=True, enable_mixed_precision=True):\n        import tensorflow as tf\n        import numpy as np\n        import os\n        import multiprocessing\n\n        self.model_path = model_path\n        self.batch_size = int(batch_size)\n        self.max_length = min(int(max_length), 512)\n        self.use_fast_tokenizer = use_fast_tokenizer\n        self.enable_mixed_precision = enable_mixed_precision\n        self._cpu_count = multiprocessing.cpu_count()\n\n        # GPU memory growth\n        try:\n            gpus = tf.config.list_physical_devices(\"GPU\")\n            if gpus:\n                for g in gpus:\n                    tf.config.experimental.set_memory_growth(g, True)\n        except Exception:\n            pass\n\n        # Mixed precision\n        try:\n            if self.enable_mixed_precision:\n                from tensorflow.keras import mixed_precision\n                mixed_precision.set_global_policy(\"mixed_float16\")\n        except Exception:\n            pass\n\n        # Tokenizer\n        tokenizer_path = os.path.join(self.model_path, \"assets/tokenizer/vocabulary.spm\")\n        try:\n            if self.use_fast_tokenizer:\n                from transformers import DebertaV2TokenizerFast\n                self.tokenizer = DebertaV2TokenizerFast(vocab_file=tokenizer_path)\n            else:\n                from transformers import DebertaV2Tokenizer\n                self.tokenizer = DebertaV2Tokenizer(vocab_file=tokenizer_path)\n        except Exception:\n            from transformers import DebertaV2Tokenizer\n            self.tokenizer = DebertaV2Tokenizer(vocab_file=tokenizer_path)\n\n        self.tokenizer.model_max_length = self.max_length\n\n        # Auto-detect model config\n        config = self._detect_model_config()\n\n        # Load model\n        from keras_hub.src.models.deberta_v3.deberta_v3_backbone import DebertaV3Backbone\n        self.model = DebertaV3Backbone(\n            vocabulary_size=128100,\n            num_layers=config[\"num_layers\"],\n            num_heads=config[\"num_heads\"],\n            hidden_dim=config[\"hidden_dim\"],\n            intermediate_dim=config[\"intermediate_dim\"],\n            dropout=0.1,\n            max_sequence_length=512,\n            bucket_size=256\n        )\n\n        weights_path = os.path.join(self.model_path, \"model.weights.h5\")\n        self.model.load_weights(weights_path, skip_mismatch=True)\n\n\n        print(\"✅ Model input names:\", [input.name for input in self.model.inputs])\n\n        # Warm-up\n        try:\n            dummy_input = {\n                \"padding_mask\": tf.zeros((1, self.max_length), dtype=tf.int32),\n                \"token_ids\": tf.zeros((1, self.max_length), dtype=tf.int32),\n            }\n            _ = self.model(dummy_input)\n        except Exception:\n            pass\n\n    def _detect_model_config(self):\n        import os\n        import json\n\n        config_path = os.path.join(self.model_path, \"config.json\")\n        if os.path.exists(config_path):\n            try:\n                with open(config_path, \"r\") as f:\n                    config = json.load(f)\n                return {\n                    \"num_layers\": config.get(\"num_layers\", 12),\n                    \"num_heads\": config.get(\"num_attention_heads\", 12),\n                    \"hidden_dim\": config.get(\"hidden_size\", 768),\n                    \"intermediate_dim\": config.get(\"intermediate_size\", 3072),\n                }\n            except Exception as e:\n                print(f\"⚠️ Failed to read config.json: {e}\")\n\n        # Fallback: infer from folder name\n        path_lower = self.model_path.lower()\n        if \"small\" in path_lower:\n            return {\"num_layers\": 12, \"num_heads\": 6, \"hidden_dim\": 768, \"intermediate_dim\": 3072}\n        elif \"base\" in path_lower:\n            return {\"num_layers\": 12, \"num_heads\": 12, \"hidden_dim\": 768, \"intermediate_dim\": 3072}\n\n        print(\"⚠️ Could not auto-detect model config. Using default base config.\")\n        return {\"num_layers\": 12, \"num_heads\": 12, \"hidden_dim\": 768, \"intermediate_dim\": 3072}\n\n    def fit(self, X, y=None):\n        return self\n\n    def transform(self, X):\n        import tensorflow as tf\n        import numpy as np\n\n        if hasattr(X, \"to_list\"):\n            texts = X.to_list()\n        else:\n            texts = list(X)\n\n        def _to_text(item):\n            if isinstance(item, (list, tuple, np.ndarray)):\n                return \" \".join(str(x) for x in item if x)\n            return \"\" if item is None else str(item)\n\n        texts = [_to_text(t) for t in texts]\n        n = len(texts)\n        if n == 0:\n            try:\n                hidden_dim = int(self.model.output_shape[-1])\n                return np.zeros((0, hidden_dim), dtype=np.float32)\n            except Exception:\n                return np.empty((0,))\n\n        try:\n            if self.use_fast_tokenizer:\n                tokens_np = self.tokenizer(\n                    texts,\n                    padding=\"max_length\",\n                    truncation=True,\n                    max_length=self.max_length,\n                    return_tensors=\"np\",\n                )\n                input_ids = tf.cast(tokens_np[\"input_ids\"], tf.int32)\n                attention_mask = tf.cast(tokens_np[\"attention_mask\"], tf.int32)\n\n                ds = tf.data.Dataset.from_tensor_slices(\n                    {\"token_ids\": input_ids, \"padding_mask\": attention_mask}\n                ).batch(self.batch_size).prefetch(tf.data.AUTOTUNE)\n\n                outputs = self.model.predict(ds, verbose=0)\n                if isinstance(outputs, dict) and \"last_hidden_state\" in outputs:\n                    outputs = outputs[\"last_hidden_state\"]\n                embeddings = np.mean(outputs, axis=1)\n                return embeddings\n        except Exception as e:\n            print(f\"⚠️ Fast path failed: {e}\")\n\n        # Fallback\n        all_embeddings = []\n        for i in range(0, n, self.batch_size):\n            batch = texts[i:i + self.batch_size]\n            try:\n                tokens = self.tokenizer(\n                    batch,\n                    padding=\"max_length\",\n                    truncation=True,\n                    max_length=self.max_length,\n                    return_tensors=\"tf\",\n                )\n                token_ids_tf = tf.cast(tokens[\"input_ids\"], tf.int32)\n                attention_mask_tf = tf.cast(tokens[\"attention_mask\"], tf.int32)\n                model_inputs = {\"padding_mask\": attention_mask_tf, \"token_ids\": token_ids_tf}\n                outputs = self.model(model_inputs)\n                if isinstance(outputs, dict) and \"last_hidden_state\" in outputs:\n                    outputs = outputs[\"last_hidden_state\"]\n                embeddings = tf.reduce_mean(outputs, axis=1).numpy()\n            except Exception as e:\n                print(f\"⚠️ Batch fallback failed: {e}\")\n                embeddings = np.zeros((len(batch), self.model.output_shape[-1]), dtype=np.float32)\n\n            all_embeddings.append(embeddings)\n\n        return np.vstack(all_embeddings)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-04T22:46:30.246076Z","iopub.execute_input":"2025-09-04T22:46:30.246291Z","iopub.status.idle":"2025-09-04T22:46:30.265161Z","shell.execute_reply.started":"2025-09-04T22:46:30.246274Z","shell.execute_reply":"2025-09-04T22:46:30.264582Z"}},"outputs":[],"execution_count":25},{"cell_type":"code","source":"embedder = HFEmbedder(model_path=\"/kaggle/input/deberta_v3/keras/deberta_v3_small_en/3\")\n#/kaggle/input/deberta_v3/keras/deberta_v3_base_en/3\ncommon_words_transformer = CommonWordsTransformer()\n# Updated preprocessing transformer\npreprocessing = ColumnTransformer([\n    (\"prompt_embed\", embedder, \"prompt_clean\"),\n    (\"resp_a_embed\", embedder, \"response_a_clean\"),\n    (\"resp_b_embed\", embedder, \"response_b_clean\"),\n    (\"common_words\", common_words_transformer, [\"prompt\", \"response_a\", \"response_b\"]),\n    #(\"num\", \"passthrough\", [\"id\"])\n])\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-04T22:46:30.265779Z","iopub.execute_input":"2025-09-04T22:46:30.266057Z","iopub.status.idle":"2025-09-04T22:46:43.106082Z","shell.execute_reply.started":"2025-09-04T22:46:30.266037Z","shell.execute_reply":"2025-09-04T22:46:43.105301Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/transformers/convert_slow_tokenizer.py:564: UserWarning: The sentencepiece tokenizer that you are converting to a fast tokenizer uses the byte fallback option which is not implemented in the fast tokenizers. In practice this means that the fast version of the tokenizer can produce unknown tokens whereas the sentencepiece version would have converted these unknown tokens into a sequence of byte tokens matching the original piece of text.\n  warnings.warn(\nI0000 00:00:1757025992.720832      36 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n/usr/local/lib/python3.11/dist-packages/keras/src/saving/saving_lib.py:629: UserWarning: A total of 48 objects could not be loaded. Example error message for object <Dense name=feedforward_intermediate_dense, built=True>:\n\nLayer 'feedforward_intermediate_dense' expected 2 variables, but received 0 variables during loading. Expected: ['kernel', 'bias']\n\nList of objects that could not be loaded:\n[<Dense name=feedforward_intermediate_dense, built=True>, <LayerNormalization name=feedforward_layer_norm, built=True>, <Dense name=feedforward_output_dense, built=True>, <EinsumDense name=key, built=True>, <EinsumDense name=attention_output, built=True>, <EinsumDense name=query, built=True>, <EinsumDense name=value, built=True>, <LayerNormalization name=self_attention_layer_norm, built=True>, <Dense name=feedforward_intermediate_dense, built=True>, <LayerNormalization name=feedforward_layer_norm, built=True>, <Dense name=feedforward_output_dense, built=True>, <EinsumDense name=key, built=True>, <EinsumDense name=attention_output, built=True>, <EinsumDense name=query, built=True>, <EinsumDense name=value, built=True>, <LayerNormalization name=self_attention_layer_norm, built=True>, <Dense name=feedforward_intermediate_dense, built=True>, <LayerNormalization name=feedforward_layer_norm, built=True>, <Dense name=feedforward_output_dense, built=True>, <EinsumDense name=key, built=True>, <EinsumDense name=attention_output, built=True>, <EinsumDense name=query, built=True>, <EinsumDense name=value, built=True>, <LayerNormalization name=self_attention_layer_norm, built=True>, <Dense name=feedforward_intermediate_dense, built=True>, <LayerNormalization name=feedforward_layer_norm, built=True>, <Dense name=feedforward_output_dense, built=True>, <EinsumDense name=key, built=True>, <EinsumDense name=attention_output, built=True>, <EinsumDense name=query, built=True>, <EinsumDense name=value, built=True>, <LayerNormalization name=self_attention_layer_norm, built=True>, <Dense name=feedforward_intermediate_dense, built=True>, <LayerNormalization name=feedforward_layer_norm, built=True>, <Dense name=feedforward_output_dense, built=True>, <EinsumDense name=key, built=True>, <EinsumDense name=attention_output, built=True>, <EinsumDense name=query, built=True>, <EinsumDense name=value, built=True>, <LayerNormalization name=self_attention_layer_norm, built=True>, <Dense name=feedforward_intermediate_dense, built=True>, <LayerNormalization name=feedforward_layer_norm, built=True>, <Dense name=feedforward_output_dense, built=True>, <EinsumDense name=key, built=True>, <EinsumDense name=attention_output, built=True>, <EinsumDense name=query, built=True>, <EinsumDense name=value, built=True>, <LayerNormalization name=self_attention_layer_norm, built=True>]\n  warnings.warn(msg)\n","output_type":"stream"},{"name":"stdout","text":"✅ Model input names: ['padding_mask', 'token_ids']\n","output_type":"stream"}],"execution_count":26},{"cell_type":"code","source":"preprocessing","metadata":{"trusted":true,"editable":false,"execution":{"iopub.status.busy":"2025-09-04T22:46:43.106893Z","iopub.execute_input":"2025-09-04T22:46:43.107085Z","iopub.status.idle":"2025-09-04T22:46:43.121809Z","shell.execute_reply.started":"2025-09-04T22:46:43.107070Z","shell.execute_reply":"2025-09-04T22:46:43.121212Z"}},"outputs":[{"execution_count":27,"output_type":"execute_result","data":{"text/plain":"ColumnTransformer(transformers=[('prompt_embed',\n                                 HFEmbedder(model_path='/kaggle/input/deberta_v3/keras/deberta_v3_small_en/3'),\n                                 'prompt_clean'),\n                                ('resp_a_embed',\n                                 HFEmbedder(model_path='/kaggle/input/deberta_v3/keras/deberta_v3_small_en/3'),\n                                 'response_a_clean'),\n                                ('resp_b_embed',\n                                 HFEmbedder(model_path='/kaggle/input/deberta_v3/keras/deberta_v3_small_en/3'),\n                                 'response_b_clean'),\n                                ('common_words', CommonWordsTransformer(),\n                                 ['prompt', 'response_a', 'response_b'])])","text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>ColumnTransformer(transformers=[(&#x27;prompt_embed&#x27;,\n                                 HFEmbedder(model_path=&#x27;/kaggle/input/deberta_v3/keras/deberta_v3_small_en/3&#x27;),\n                                 &#x27;prompt_clean&#x27;),\n                                (&#x27;resp_a_embed&#x27;,\n                                 HFEmbedder(model_path=&#x27;/kaggle/input/deberta_v3/keras/deberta_v3_small_en/3&#x27;),\n                                 &#x27;response_a_clean&#x27;),\n                                (&#x27;resp_b_embed&#x27;,\n                                 HFEmbedder(model_path=&#x27;/kaggle/input/deberta_v3/keras/deberta_v3_small_en/3&#x27;),\n                                 &#x27;response_b_clean&#x27;),\n                                (&#x27;common_words&#x27;, CommonWordsTransformer(),\n                                 [&#x27;prompt&#x27;, &#x27;response_a&#x27;, &#x27;response_b&#x27;])])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">ColumnTransformer</label><div class=\"sk-toggleable__content\"><pre>ColumnTransformer(transformers=[(&#x27;prompt_embed&#x27;,\n                                 HFEmbedder(model_path=&#x27;/kaggle/input/deberta_v3/keras/deberta_v3_small_en/3&#x27;),\n                                 &#x27;prompt_clean&#x27;),\n                                (&#x27;resp_a_embed&#x27;,\n                                 HFEmbedder(model_path=&#x27;/kaggle/input/deberta_v3/keras/deberta_v3_small_en/3&#x27;),\n                                 &#x27;response_a_clean&#x27;),\n                                (&#x27;resp_b_embed&#x27;,\n                                 HFEmbedder(model_path=&#x27;/kaggle/input/deberta_v3/keras/deberta_v3_small_en/3&#x27;),\n                                 &#x27;response_b_clean&#x27;),\n                                (&#x27;common_words&#x27;, CommonWordsTransformer(),\n                                 [&#x27;prompt&#x27;, &#x27;response_a&#x27;, &#x27;response_b&#x27;])])</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">prompt_embed</label><div class=\"sk-toggleable__content\"><pre>prompt_clean</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">HFEmbedder</label><div class=\"sk-toggleable__content\"><pre>HFEmbedder(model_path=&#x27;/kaggle/input/deberta_v3/keras/deberta_v3_small_en/3&#x27;)</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">resp_a_embed</label><div class=\"sk-toggleable__content\"><pre>response_a_clean</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">HFEmbedder</label><div class=\"sk-toggleable__content\"><pre>HFEmbedder(model_path=&#x27;/kaggle/input/deberta_v3/keras/deberta_v3_small_en/3&#x27;)</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">resp_b_embed</label><div class=\"sk-toggleable__content\"><pre>response_b_clean</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">HFEmbedder</label><div class=\"sk-toggleable__content\"><pre>HFEmbedder(model_path=&#x27;/kaggle/input/deberta_v3/keras/deberta_v3_small_en/3&#x27;)</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" ><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">common_words</label><div class=\"sk-toggleable__content\"><pre>[&#x27;prompt&#x27;, &#x27;response_a&#x27;, &#x27;response_b&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" ><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">CommonWordsTransformer</label><div class=\"sk-toggleable__content\"><pre>CommonWordsTransformer()</pre></div></div></div></div></div></div></div></div></div></div>"},"metadata":{}}],"execution_count":27},{"cell_type":"code","source":"#feature_selection = SelectKBest(score_func = chi2, k=6)\nfrom sklearn.feature_selection import SelectKBest, f_classif\n\nfeature_selection = SelectKBest(score_func=f_classif, k=6)\n","metadata":{"trusted":true,"editable":false,"execution":{"iopub.status.busy":"2025-09-04T22:46:43.122413Z","iopub.execute_input":"2025-09-04T22:46:43.122586Z","iopub.status.idle":"2025-09-04T22:46:43.126696Z","shell.execute_reply.started":"2025-09-04T22:46:43.122564Z","shell.execute_reply":"2025-09-04T22:46:43.126061Z"}},"outputs":[],"execution_count":28},{"cell_type":"code","source":"\nimport gc\n\nchunk_size = 32\nchunks = [X_train[i:i + chunk_size] for i in range(0, len(X_train), chunk_size)]\ny_chunks = [y_train[i:i + chunk_size] for i in range(0, len(y_train), chunk_size)]\n\n# Fit the preprocessing step once on the full training data\nmy_pipeline = Pipeline([\n    (\"preprocessing\", preprocessing),\n])\nmy_pipeline.named_steps['preprocessing'].fit(X_train)\n\n# File to write incrementally\noutput_file = \"X_final_incremental.csv\"\n\n# Process and write each chunk\nfor i, chunk in enumerate(chunks):\n    print(f\"Transforming and writing chunk {i+1}/{len(chunks)}\")\n    processed_chunk = my_pipeline.named_steps['preprocessing'].transform(chunk)\n    df_chunk = pd.DataFrame(processed_chunk)\n\n    # Write header only for the first chunk\n    if i == 0:\n        df_chunk.to_csv(output_file, index=False, mode='w')\n    else:\n        df_chunk.to_csv(output_file, index=False, mode='a', header=(i == 0))\n\n    # Free memory\n    del processed_chunk, df_chunk\n    gc.collect()\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-04T22:46:43.127472Z","iopub.execute_input":"2025-09-04T22:46:43.127717Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"model = XGBClassifier(\n    objective=\"multi:softprob\",  \n    num_class=3,                  \n    eval_metric=\"mlogloss\",       \n    n_estimators=300,\n    learning_rate=0.1,\n    max_depth=6,\n    random_state=42\n)","metadata":{"trusted":true,"editable":false},"outputs":[],"execution_count":null},{"cell_type":"code","source":"my_pipeline = Pipeline([\n    (\"preprocessing\", preprocessing),\n    #(\"feature_selection\", feature_selection),\n    (\"model\", model)\n])\nmy_pipeline","metadata":{"trusted":true,"editable":false},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X_final=pd.read_csv(\"X_final_incremental.csv\")\ny_final=y_train","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.model_selection import cross_val_score\n\nscores = cross_val_score(model, X_final, y_final, cv=3, scoring=\"accuracy\")\nprint(\"Cross-validated Accuracy:\", scores.mean())\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"model.fit(X_final, y_final)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df_test[\"prompt_clean\"] = df_test[\"prompt\"].apply(clean_text_for_common_words)\ndf_test[\"response_a_clean\"] = df_test[\"response_a\"].apply(clean_text_for_common_words)\ndf_test[\"response_b_clean\"] = df_test[\"response_b\"].apply(clean_text_for_common_words)","metadata":{"trusted":true,"editable":false},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from transformers import DebertaV2Tokenizer\nimport torch\nimport numpy as np\nfrom keras_hub.src.models.deberta_v3.deberta_v3_backbone import DebertaV3Backbone\nimport tensorflow as tf\n\n# Configuration\nmodel_path = \"/kaggle/input/deberta_v3/keras/deberta_v3_small_en/3\"\nvocab_file = f\"{model_path}/assets/tokenizer/vocabulary.spm\"\nweights_file = f\"{model_path}/model.weights.h5\"\n\n# Initialize tokenizer\ntokenizer = DebertaV2Tokenizer(vocab_file=vocab_file)\nprint(\"✅ Tokenizer initialized:\", type(tokenizer))\n\n# Initialize model with architecture matching the weights\nmodel = DebertaV3Backbone(\n    vocabulary_size=128100,\n    num_layers=12,\n    num_heads=12,  # <-- updated\n    hidden_dim=768,\n    intermediate_dim=3072,\n    dropout=0.1,\n    max_sequence_length=512,\n    bucket_size=256\n)\n\nmodel.load_weights(weights_file, skip_mismatch=True)\nprint(\"✅ Model loaded and weights applied.\")\n\n# Display model summary\ntry:\n    model.summary()\nexcept Exception as e:\n    print(\"⚠️ Could not display model summary:\", e)\n\n# Example input text\ntext = \"DeBERTa is a powerful transformer model.\"\n\n# Tokenize the input\ntokens = tokenizer(text, return_tensors=\"pt\")\ninput_ids = tokens[\"input_ids\"]\nattention_mask = tokens[\"attention_mask\"]\n\n# Convert token IDs to token strings\ntoken_names = tokenizer.convert_ids_to_tokens(input_ids[0])\nprint(\"✅ Token names:\", token_names)\n\n# Convert PyTorch tensors to NumPy arrays\ntoken_ids_np = input_ids.cpu().numpy()\npadding_mask_np = attention_mask.cpu().numpy()\n\n# Convert to TensorFlow tensors\nmodel_inputs = {\n    \"token_ids\": tf.convert_to_tensor(token_ids_np),\n    \"padding_mask\": tf.convert_to_tensor(padding_mask_np)\n}\n\n# Run forward pass\nprint(\"🚀 Running model forward pass...\")\noutputs = model(model_inputs)\n\n# Inspect model output\nif isinstance(outputs, dict):\n    print(\"✅ Model output keys:\", outputs.keys())\n    if \"last_hidden_state\" in outputs:\n        hidden_state = outputs[\"last_hidden_state\"]\n        print(\"Last hidden state shape:\", hidden_state.shape)\n\n        # Mean pooling\n        embeddings = tf.reduce_mean(hidden_state, axis=1).numpy()\n        print(\"✅ Mean pooled embeddings shape:\", embeddings.shape)\n    else:\n        print(\"⚠️ 'last_hidden_state' not found in model output.\")\nelse:\n    print(\"⚠️ Model returned a non-dict output:\", type(outputs))\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"for i, layer in enumerate(model.layers):\n    try:\n        print(f\"{i}: {layer.name} - {layer.output_shape}\")\n    except AttributeError:\n        print(f\"{i}: {layer.name} - (no output_shape)\")\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"\nmodel.summary()\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import h5py\nwith h5py.File(weights_file, \"r\") as f:\n    print(list(f.keys()))\n","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}
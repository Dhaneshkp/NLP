{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":86518,"databundleVersionId":9809560,"sourceType":"competition"},{"sourceId":205013,"sourceType":"modelInstanceVersion","modelInstanceId":4686,"modelId":2820}],"dockerImageVersionId":31090,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np \nimport pandas as pd \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.feature_selection import SelectKBest, chi2\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import cross_val_score\n\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","metadata":{"_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","execution":{"iopub.status.busy":"2025-09-20T11:35:51.430055Z","iopub.execute_input":"2025-09-20T11:35:51.430233Z","iopub.status.idle":"2025-09-20T11:35:52.673144Z","shell.execute_reply.started":"2025-09-20T11:35:51.430215Z","shell.execute_reply":"2025-09-20T11:35:52.672476Z"},"trusted":true},"outputs":[{"name":"stdout","text":"/kaggle/input/deberta_v3/keras/deberta_v3_small_en/3/config.json\n/kaggle/input/deberta_v3/keras/deberta_v3_small_en/3/tokenizer.json\n/kaggle/input/deberta_v3/keras/deberta_v3_small_en/3/metadata.json\n/kaggle/input/deberta_v3/keras/deberta_v3_small_en/3/model.weights.h5\n/kaggle/input/deberta_v3/keras/deberta_v3_small_en/3/assets/tokenizer/vocabulary.spm\n/kaggle/input/llm-classification-finetuning/sample_submission.csv\n/kaggle/input/llm-classification-finetuning/train.csv\n/kaggle/input/llm-classification-finetuning/test.csv\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"\n\n#!pip install -q sentence-transformers\n\nfrom sentence_transformers import SentenceTransformer\n\n#model = SentenceTransformer(\"all-mpnet-base-v2\")\n","metadata":{"execution":{"iopub.status.busy":"2025-09-20T11:35:52.674502Z","iopub.execute_input":"2025-09-20T11:35:52.674862Z","iopub.status.idle":"2025-09-20T11:36:17.802647Z","shell.execute_reply.started":"2025-09-20T11:35:52.674843Z","shell.execute_reply":"2025-09-20T11:36:17.801889Z"},"trusted":true},"outputs":[{"name":"stderr","text":"2025-09-20 11:36:05.025099: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nE0000 00:00:1758368165.172587      36 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\nE0000 00:00:1758368165.215763      36 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"\n#model.save(\"/kaggle/working/all-mpnet-base-v2\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-20T11:36:17.803485Z","iopub.execute_input":"2025-09-20T11:36:17.804021Z","iopub.status.idle":"2025-09-20T11:36:17.807543Z","shell.execute_reply.started":"2025-09-20T11:36:17.804001Z","shell.execute_reply":"2025-09-20T11:36:17.806685Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"from transformers import AutoModel, AutoTokenizer\n\n#tokenizer = AutoTokenizer.from_pretrained(\"/kaggle/input/qwen-llm\")\n#model = AutoModel.from_pretrained(\"/kaggle/input/qwen-llm\")\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-20T11:36:17.808366Z","iopub.execute_input":"2025-09-20T11:36:17.808638Z","iopub.status.idle":"2025-09-20T11:36:17.838859Z","shell.execute_reply.started":"2025-09-20T11:36:17.808615Z","shell.execute_reply":"2025-09-20T11:36:17.838227Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"submission_test = pd.read_csv(\"/kaggle/input/llm-classification-finetuning/sample_submission.csv\")\nsubmission_test","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-20T11:36:17.839558Z","iopub.execute_input":"2025-09-20T11:36:17.839816Z","iopub.status.idle":"2025-09-20T11:36:17.876080Z","shell.execute_reply.started":"2025-09-20T11:36:17.839792Z","shell.execute_reply":"2025-09-20T11:36:17.875428Z"}},"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"        id  winner_model_a  winner_model_b  winner_tie\n0   136060        0.333333        0.333333    0.333333\n1   211333        0.333333        0.333333    0.333333\n2  1233961        0.333333        0.333333    0.333333","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>winner_model_a</th>\n      <th>winner_model_b</th>\n      <th>winner_tie</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>136060</td>\n      <td>0.333333</td>\n      <td>0.333333</td>\n      <td>0.333333</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>211333</td>\n      <td>0.333333</td>\n      <td>0.333333</td>\n      <td>0.333333</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1233961</td>\n      <td>0.333333</td>\n      <td>0.333333</td>\n      <td>0.333333</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":5},{"cell_type":"code","source":"df_train = pd.read_csv(\"/kaggle/input/llm-classification-finetuning/train.csv\")\ndf_train","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-20T11:36:17.876697Z","iopub.execute_input":"2025-09-20T11:36:17.876909Z","iopub.status.idle":"2025-09-20T11:36:20.892320Z","shell.execute_reply.started":"2025-09-20T11:36:17.876893Z","shell.execute_reply":"2025-09-20T11:36:20.891727Z"}},"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"               id             model_a              model_b  \\\n0           30192  gpt-4-1106-preview           gpt-4-0613   \n1           53567           koala-13b           gpt-4-0613   \n2           65089  gpt-3.5-turbo-0613       mistral-medium   \n3           96401    llama-2-13b-chat  mistral-7b-instruct   \n4          198779           koala-13b   gpt-3.5-turbo-0314   \n...           ...                 ...                  ...   \n57472  4294656694          gpt-4-0613             claude-1   \n57473  4294692063          claude-2.0     llama-2-13b-chat   \n57474  4294710549            claude-1           alpaca-13b   \n57475  4294899228              palm-2       tulu-2-dpo-70b   \n57476  4294947231  gemini-pro-dev-api   gpt-4-1106-preview   \n\n                                                  prompt  \\\n0      [\"Is it morally right to try to have a certain...   \n1      [\"What is the difference between marriage lice...   \n2      [\"explain function calling. how would you call...   \n3      [\"How can I create a test set for a very rare ...   \n4      [\"What is the best way to travel from Tel-Aviv...   \n...                                                  ...   \n57472  [\"A simple mnemonic for \\u03c0:\\n\\\"How I wish ...   \n57473  [\"In python, implement a naive Bayes with gaus...   \n57474  [\"is it unethical to work on building weapons?...   \n57475  [\"If a bait contains 0,0025% bromadiolon then ...   \n57476  [\"three kids eat three apples in three days, h...   \n\n                                              response_a  \\\n0      [\"The question of whether it is morally right ...   \n1      [\"A marriage license is a legal document that ...   \n2      [\"Function calling is the process of invoking ...   \n3      [\"Creating a test set for a very rare category...   \n4      [\"The best way to travel from Tel Aviv to Jeru...   \n...                                                  ...   \n57472  [\"Sure, let's break it down:\\n\\n1. \\\"How\\\" has...   \n57473  [\"Here is an implementation of a naive Bayes c...   \n57474  [\"Working on weapons technology raises some et...   \n57475  [\"Bromadiolone is a rodenticide which is most ...   \n57476                                      [\"27 apples\"]   \n\n                                              response_b  winner_model_a  \\\n0      [\"As an AI, I don't have personal beliefs or o...               1   \n1      [\"A marriage license and a marriage certificat...               0   \n2      [\"Function calling is the process of invoking ...               0   \n3      [\"When building a classifier for a very rare c...               1   \n4      [\"The best way to travel from Tel-Aviv to Jeru...               0   \n...                                                  ...             ...   \n57472  [\"Here is how that mnemonic represents the dig...               1   \n57473  [\"Sure! Here's an implementation of a naive Ba...               1   \n57474  [\"It depends on the context. Weapons can be us...               1   \n57475  [\"As an AI language model, I do not promote or...               0   \n57476  [\"If three kids eat three apples in three days...               1   \n\n       winner_model_b  winner_tie  \n0                   0           0  \n1                   1           0  \n2                   0           1  \n3                   0           0  \n4                   1           0  \n...               ...         ...  \n57472               0           0  \n57473               0           0  \n57474               0           0  \n57475               1           0  \n57476               0           0  \n\n[57477 rows x 9 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>model_a</th>\n      <th>model_b</th>\n      <th>prompt</th>\n      <th>response_a</th>\n      <th>response_b</th>\n      <th>winner_model_a</th>\n      <th>winner_model_b</th>\n      <th>winner_tie</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>30192</td>\n      <td>gpt-4-1106-preview</td>\n      <td>gpt-4-0613</td>\n      <td>[\"Is it morally right to try to have a certain...</td>\n      <td>[\"The question of whether it is morally right ...</td>\n      <td>[\"As an AI, I don't have personal beliefs or o...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>53567</td>\n      <td>koala-13b</td>\n      <td>gpt-4-0613</td>\n      <td>[\"What is the difference between marriage lice...</td>\n      <td>[\"A marriage license is a legal document that ...</td>\n      <td>[\"A marriage license and a marriage certificat...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>65089</td>\n      <td>gpt-3.5-turbo-0613</td>\n      <td>mistral-medium</td>\n      <td>[\"explain function calling. how would you call...</td>\n      <td>[\"Function calling is the process of invoking ...</td>\n      <td>[\"Function calling is the process of invoking ...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>96401</td>\n      <td>llama-2-13b-chat</td>\n      <td>mistral-7b-instruct</td>\n      <td>[\"How can I create a test set for a very rare ...</td>\n      <td>[\"Creating a test set for a very rare category...</td>\n      <td>[\"When building a classifier for a very rare c...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>198779</td>\n      <td>koala-13b</td>\n      <td>gpt-3.5-turbo-0314</td>\n      <td>[\"What is the best way to travel from Tel-Aviv...</td>\n      <td>[\"The best way to travel from Tel Aviv to Jeru...</td>\n      <td>[\"The best way to travel from Tel-Aviv to Jeru...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>57472</th>\n      <td>4294656694</td>\n      <td>gpt-4-0613</td>\n      <td>claude-1</td>\n      <td>[\"A simple mnemonic for \\u03c0:\\n\\\"How I wish ...</td>\n      <td>[\"Sure, let's break it down:\\n\\n1. \\\"How\\\" has...</td>\n      <td>[\"Here is how that mnemonic represents the dig...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>57473</th>\n      <td>4294692063</td>\n      <td>claude-2.0</td>\n      <td>llama-2-13b-chat</td>\n      <td>[\"In python, implement a naive Bayes with gaus...</td>\n      <td>[\"Here is an implementation of a naive Bayes c...</td>\n      <td>[\"Sure! Here's an implementation of a naive Ba...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>57474</th>\n      <td>4294710549</td>\n      <td>claude-1</td>\n      <td>alpaca-13b</td>\n      <td>[\"is it unethical to work on building weapons?...</td>\n      <td>[\"Working on weapons technology raises some et...</td>\n      <td>[\"It depends on the context. Weapons can be us...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>57475</th>\n      <td>4294899228</td>\n      <td>palm-2</td>\n      <td>tulu-2-dpo-70b</td>\n      <td>[\"If a bait contains 0,0025% bromadiolon then ...</td>\n      <td>[\"Bromadiolone is a rodenticide which is most ...</td>\n      <td>[\"As an AI language model, I do not promote or...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>57476</th>\n      <td>4294947231</td>\n      <td>gemini-pro-dev-api</td>\n      <td>gpt-4-1106-preview</td>\n      <td>[\"three kids eat three apples in three days, h...</td>\n      <td>[\"27 apples\"]</td>\n      <td>[\"If three kids eat three apples in three days...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>57477 rows × 9 columns</p>\n</div>"},"metadata":{}}],"execution_count":6},{"cell_type":"code","source":"df_test = pd.read_csv(\"/kaggle/input/llm-classification-finetuning/test.csv\")\ndf_test","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-20T11:36:20.894333Z","iopub.execute_input":"2025-09-20T11:36:20.894575Z","iopub.status.idle":"2025-09-20T11:36:20.904978Z","shell.execute_reply.started":"2025-09-20T11:36:20.894557Z","shell.execute_reply":"2025-09-20T11:36:20.904389Z"}},"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"        id                                             prompt  \\\n0   136060  [\"I have three oranges today, I ate an orange ...   \n1   211333  [\"You are a mediator in a heated political deb...   \n2  1233961  [\"How to initialize the classification head wh...   \n\n                                          response_a  \\\n0                    [\"You have two oranges today.\"]   \n1  [\"Thank you for sharing the details of the sit...   \n2  [\"When you want to initialize the classificati...   \n\n                                          response_b  \n0  [\"You still have three oranges. Eating an oran...  \n1  [\"Mr Reddy and Ms Blue both have valid points ...  \n2  [\"To initialize the classification head when p...  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>prompt</th>\n      <th>response_a</th>\n      <th>response_b</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>136060</td>\n      <td>[\"I have three oranges today, I ate an orange ...</td>\n      <td>[\"You have two oranges today.\"]</td>\n      <td>[\"You still have three oranges. Eating an oran...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>211333</td>\n      <td>[\"You are a mediator in a heated political deb...</td>\n      <td>[\"Thank you for sharing the details of the sit...</td>\n      <td>[\"Mr Reddy and Ms Blue both have valid points ...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1233961</td>\n      <td>[\"How to initialize the classification head wh...</td>\n      <td>[\"When you want to initialize the classificati...</td>\n      <td>[\"To initialize the classification head when p...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":7},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"df_train.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-20T11:36:20.905564Z","iopub.execute_input":"2025-09-20T11:36:20.905788Z","iopub.status.idle":"2025-09-20T11:36:20.987485Z","shell.execute_reply.started":"2025-09-20T11:36:20.905761Z","shell.execute_reply":"2025-09-20T11:36:20.986904Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 57477 entries, 0 to 57476\nData columns (total 9 columns):\n #   Column          Non-Null Count  Dtype \n---  ------          --------------  ----- \n 0   id              57477 non-null  int64 \n 1   model_a         57477 non-null  object\n 2   model_b         57477 non-null  object\n 3   prompt          57477 non-null  object\n 4   response_a      57477 non-null  object\n 5   response_b      57477 non-null  object\n 6   winner_model_a  57477 non-null  int64 \n 7   winner_model_b  57477 non-null  int64 \n 8   winner_tie      57477 non-null  int64 \ndtypes: int64(4), object(5)\nmemory usage: 3.9+ MB\n","output_type":"stream"}],"execution_count":8},{"cell_type":"code","source":"#df_train=df_train.head(30000)\n\n#)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-20T11:36:20.988288Z","iopub.execute_input":"2025-09-20T11:36:20.988557Z","iopub.status.idle":"2025-09-20T11:36:20.991997Z","shell.execute_reply.started":"2025-09-20T11:36:20.988535Z","shell.execute_reply":"2025-09-20T11:36:20.991362Z"}},"outputs":[],"execution_count":9},{"cell_type":"code","source":"df_train","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-20T11:36:20.992572Z","iopub.execute_input":"2025-09-20T11:36:20.992827Z","iopub.status.idle":"2025-09-20T11:36:21.013769Z","shell.execute_reply.started":"2025-09-20T11:36:20.992808Z","shell.execute_reply":"2025-09-20T11:36:21.013147Z"}},"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"               id             model_a              model_b  \\\n0           30192  gpt-4-1106-preview           gpt-4-0613   \n1           53567           koala-13b           gpt-4-0613   \n2           65089  gpt-3.5-turbo-0613       mistral-medium   \n3           96401    llama-2-13b-chat  mistral-7b-instruct   \n4          198779           koala-13b   gpt-3.5-turbo-0314   \n...           ...                 ...                  ...   \n57472  4294656694          gpt-4-0613             claude-1   \n57473  4294692063          claude-2.0     llama-2-13b-chat   \n57474  4294710549            claude-1           alpaca-13b   \n57475  4294899228              palm-2       tulu-2-dpo-70b   \n57476  4294947231  gemini-pro-dev-api   gpt-4-1106-preview   \n\n                                                  prompt  \\\n0      [\"Is it morally right to try to have a certain...   \n1      [\"What is the difference between marriage lice...   \n2      [\"explain function calling. how would you call...   \n3      [\"How can I create a test set for a very rare ...   \n4      [\"What is the best way to travel from Tel-Aviv...   \n...                                                  ...   \n57472  [\"A simple mnemonic for \\u03c0:\\n\\\"How I wish ...   \n57473  [\"In python, implement a naive Bayes with gaus...   \n57474  [\"is it unethical to work on building weapons?...   \n57475  [\"If a bait contains 0,0025% bromadiolon then ...   \n57476  [\"three kids eat three apples in three days, h...   \n\n                                              response_a  \\\n0      [\"The question of whether it is morally right ...   \n1      [\"A marriage license is a legal document that ...   \n2      [\"Function calling is the process of invoking ...   \n3      [\"Creating a test set for a very rare category...   \n4      [\"The best way to travel from Tel Aviv to Jeru...   \n...                                                  ...   \n57472  [\"Sure, let's break it down:\\n\\n1. \\\"How\\\" has...   \n57473  [\"Here is an implementation of a naive Bayes c...   \n57474  [\"Working on weapons technology raises some et...   \n57475  [\"Bromadiolone is a rodenticide which is most ...   \n57476                                      [\"27 apples\"]   \n\n                                              response_b  winner_model_a  \\\n0      [\"As an AI, I don't have personal beliefs or o...               1   \n1      [\"A marriage license and a marriage certificat...               0   \n2      [\"Function calling is the process of invoking ...               0   \n3      [\"When building a classifier for a very rare c...               1   \n4      [\"The best way to travel from Tel-Aviv to Jeru...               0   \n...                                                  ...             ...   \n57472  [\"Here is how that mnemonic represents the dig...               1   \n57473  [\"Sure! Here's an implementation of a naive Ba...               1   \n57474  [\"It depends on the context. Weapons can be us...               1   \n57475  [\"As an AI language model, I do not promote or...               0   \n57476  [\"If three kids eat three apples in three days...               1   \n\n       winner_model_b  winner_tie  \n0                   0           0  \n1                   1           0  \n2                   0           1  \n3                   0           0  \n4                   1           0  \n...               ...         ...  \n57472               0           0  \n57473               0           0  \n57474               0           0  \n57475               1           0  \n57476               0           0  \n\n[57477 rows x 9 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>model_a</th>\n      <th>model_b</th>\n      <th>prompt</th>\n      <th>response_a</th>\n      <th>response_b</th>\n      <th>winner_model_a</th>\n      <th>winner_model_b</th>\n      <th>winner_tie</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>30192</td>\n      <td>gpt-4-1106-preview</td>\n      <td>gpt-4-0613</td>\n      <td>[\"Is it morally right to try to have a certain...</td>\n      <td>[\"The question of whether it is morally right ...</td>\n      <td>[\"As an AI, I don't have personal beliefs or o...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>53567</td>\n      <td>koala-13b</td>\n      <td>gpt-4-0613</td>\n      <td>[\"What is the difference between marriage lice...</td>\n      <td>[\"A marriage license is a legal document that ...</td>\n      <td>[\"A marriage license and a marriage certificat...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>65089</td>\n      <td>gpt-3.5-turbo-0613</td>\n      <td>mistral-medium</td>\n      <td>[\"explain function calling. how would you call...</td>\n      <td>[\"Function calling is the process of invoking ...</td>\n      <td>[\"Function calling is the process of invoking ...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>96401</td>\n      <td>llama-2-13b-chat</td>\n      <td>mistral-7b-instruct</td>\n      <td>[\"How can I create a test set for a very rare ...</td>\n      <td>[\"Creating a test set for a very rare category...</td>\n      <td>[\"When building a classifier for a very rare c...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>198779</td>\n      <td>koala-13b</td>\n      <td>gpt-3.5-turbo-0314</td>\n      <td>[\"What is the best way to travel from Tel-Aviv...</td>\n      <td>[\"The best way to travel from Tel Aviv to Jeru...</td>\n      <td>[\"The best way to travel from Tel-Aviv to Jeru...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>57472</th>\n      <td>4294656694</td>\n      <td>gpt-4-0613</td>\n      <td>claude-1</td>\n      <td>[\"A simple mnemonic for \\u03c0:\\n\\\"How I wish ...</td>\n      <td>[\"Sure, let's break it down:\\n\\n1. \\\"How\\\" has...</td>\n      <td>[\"Here is how that mnemonic represents the dig...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>57473</th>\n      <td>4294692063</td>\n      <td>claude-2.0</td>\n      <td>llama-2-13b-chat</td>\n      <td>[\"In python, implement a naive Bayes with gaus...</td>\n      <td>[\"Here is an implementation of a naive Bayes c...</td>\n      <td>[\"Sure! Here's an implementation of a naive Ba...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>57474</th>\n      <td>4294710549</td>\n      <td>claude-1</td>\n      <td>alpaca-13b</td>\n      <td>[\"is it unethical to work on building weapons?...</td>\n      <td>[\"Working on weapons technology raises some et...</td>\n      <td>[\"It depends on the context. Weapons can be us...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>57475</th>\n      <td>4294899228</td>\n      <td>palm-2</td>\n      <td>tulu-2-dpo-70b</td>\n      <td>[\"If a bait contains 0,0025% bromadiolon then ...</td>\n      <td>[\"Bromadiolone is a rodenticide which is most ...</td>\n      <td>[\"As an AI language model, I do not promote or...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>57476</th>\n      <td>4294947231</td>\n      <td>gemini-pro-dev-api</td>\n      <td>gpt-4-1106-preview</td>\n      <td>[\"three kids eat three apples in three days, h...</td>\n      <td>[\"27 apples\"]</td>\n      <td>[\"If three kids eat three apples in three days...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>57477 rows × 9 columns</p>\n</div>"},"metadata":{}}],"execution_count":10},{"cell_type":"code","source":"df_train.isnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-20T11:36:21.014444Z","iopub.execute_input":"2025-09-20T11:36:21.015127Z","iopub.status.idle":"2025-09-20T11:36:21.052856Z","shell.execute_reply.started":"2025-09-20T11:36:21.015111Z","shell.execute_reply":"2025-09-20T11:36:21.052086Z"}},"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"id                0\nmodel_a           0\nmodel_b           0\nprompt            0\nresponse_a        0\nresponse_b        0\nwinner_model_a    0\nwinner_model_b    0\nwinner_tie        0\ndtype: int64"},"metadata":{}}],"execution_count":11},{"cell_type":"code","source":"X = df_train.drop(['model_a', 'model_b', 'winner_model_a', 'winner_model_b', 'winner_tie'], axis = 1)\nX","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-20T11:36:21.053733Z","iopub.execute_input":"2025-09-20T11:36:21.053952Z","iopub.status.idle":"2025-09-20T11:36:21.074928Z","shell.execute_reply.started":"2025-09-20T11:36:21.053927Z","shell.execute_reply":"2025-09-20T11:36:21.074218Z"}},"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"               id                                             prompt  \\\n0           30192  [\"Is it morally right to try to have a certain...   \n1           53567  [\"What is the difference between marriage lice...   \n2           65089  [\"explain function calling. how would you call...   \n3           96401  [\"How can I create a test set for a very rare ...   \n4          198779  [\"What is the best way to travel from Tel-Aviv...   \n...           ...                                                ...   \n57472  4294656694  [\"A simple mnemonic for \\u03c0:\\n\\\"How I wish ...   \n57473  4294692063  [\"In python, implement a naive Bayes with gaus...   \n57474  4294710549  [\"is it unethical to work on building weapons?...   \n57475  4294899228  [\"If a bait contains 0,0025% bromadiolon then ...   \n57476  4294947231  [\"three kids eat three apples in three days, h...   \n\n                                              response_a  \\\n0      [\"The question of whether it is morally right ...   \n1      [\"A marriage license is a legal document that ...   \n2      [\"Function calling is the process of invoking ...   \n3      [\"Creating a test set for a very rare category...   \n4      [\"The best way to travel from Tel Aviv to Jeru...   \n...                                                  ...   \n57472  [\"Sure, let's break it down:\\n\\n1. \\\"How\\\" has...   \n57473  [\"Here is an implementation of a naive Bayes c...   \n57474  [\"Working on weapons technology raises some et...   \n57475  [\"Bromadiolone is a rodenticide which is most ...   \n57476                                      [\"27 apples\"]   \n\n                                              response_b  \n0      [\"As an AI, I don't have personal beliefs or o...  \n1      [\"A marriage license and a marriage certificat...  \n2      [\"Function calling is the process of invoking ...  \n3      [\"When building a classifier for a very rare c...  \n4      [\"The best way to travel from Tel-Aviv to Jeru...  \n...                                                  ...  \n57472  [\"Here is how that mnemonic represents the dig...  \n57473  [\"Sure! Here's an implementation of a naive Ba...  \n57474  [\"It depends on the context. Weapons can be us...  \n57475  [\"As an AI language model, I do not promote or...  \n57476  [\"If three kids eat three apples in three days...  \n\n[57477 rows x 4 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>prompt</th>\n      <th>response_a</th>\n      <th>response_b</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>30192</td>\n      <td>[\"Is it morally right to try to have a certain...</td>\n      <td>[\"The question of whether it is morally right ...</td>\n      <td>[\"As an AI, I don't have personal beliefs or o...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>53567</td>\n      <td>[\"What is the difference between marriage lice...</td>\n      <td>[\"A marriage license is a legal document that ...</td>\n      <td>[\"A marriage license and a marriage certificat...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>65089</td>\n      <td>[\"explain function calling. how would you call...</td>\n      <td>[\"Function calling is the process of invoking ...</td>\n      <td>[\"Function calling is the process of invoking ...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>96401</td>\n      <td>[\"How can I create a test set for a very rare ...</td>\n      <td>[\"Creating a test set for a very rare category...</td>\n      <td>[\"When building a classifier for a very rare c...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>198779</td>\n      <td>[\"What is the best way to travel from Tel-Aviv...</td>\n      <td>[\"The best way to travel from Tel Aviv to Jeru...</td>\n      <td>[\"The best way to travel from Tel-Aviv to Jeru...</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>57472</th>\n      <td>4294656694</td>\n      <td>[\"A simple mnemonic for \\u03c0:\\n\\\"How I wish ...</td>\n      <td>[\"Sure, let's break it down:\\n\\n1. \\\"How\\\" has...</td>\n      <td>[\"Here is how that mnemonic represents the dig...</td>\n    </tr>\n    <tr>\n      <th>57473</th>\n      <td>4294692063</td>\n      <td>[\"In python, implement a naive Bayes with gaus...</td>\n      <td>[\"Here is an implementation of a naive Bayes c...</td>\n      <td>[\"Sure! Here's an implementation of a naive Ba...</td>\n    </tr>\n    <tr>\n      <th>57474</th>\n      <td>4294710549</td>\n      <td>[\"is it unethical to work on building weapons?...</td>\n      <td>[\"Working on weapons technology raises some et...</td>\n      <td>[\"It depends on the context. Weapons can be us...</td>\n    </tr>\n    <tr>\n      <th>57475</th>\n      <td>4294899228</td>\n      <td>[\"If a bait contains 0,0025% bromadiolon then ...</td>\n      <td>[\"Bromadiolone is a rodenticide which is most ...</td>\n      <td>[\"As an AI language model, I do not promote or...</td>\n    </tr>\n    <tr>\n      <th>57476</th>\n      <td>4294947231</td>\n      <td>[\"three kids eat three apples in three days, h...</td>\n      <td>[\"27 apples\"]</td>\n      <td>[\"If three kids eat three apples in three days...</td>\n    </tr>\n  </tbody>\n</table>\n<p>57477 rows × 4 columns</p>\n</div>"},"metadata":{}}],"execution_count":12},{"cell_type":"code","source":"y = df_train[['winner_model_a', 'winner_model_b', 'winner_tie']].values\n\ny = np.argmax(y, axis=1)\ny","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-20T11:36:21.075912Z","iopub.execute_input":"2025-09-20T11:36:21.076156Z","iopub.status.idle":"2025-09-20T11:36:21.083262Z","shell.execute_reply.started":"2025-09-20T11:36:21.076140Z","shell.execute_reply":"2025-09-20T11:36:21.082704Z"}},"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"array([0, 1, 2, ..., 0, 1, 0])"},"metadata":{}}],"execution_count":13},{"cell_type":"code","source":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size =0.2, random_state = 42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-20T11:36:21.083890Z","iopub.execute_input":"2025-09-20T11:36:21.084078Z","iopub.status.idle":"2025-09-20T11:36:21.103106Z","shell.execute_reply.started":"2025-09-20T11:36:21.084064Z","shell.execute_reply":"2025-09-20T11:36:21.102500Z"}},"outputs":[],"execution_count":14},{"cell_type":"code","source":"X_train","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-20T11:36:21.103901Z","iopub.execute_input":"2025-09-20T11:36:21.104356Z","iopub.status.idle":"2025-09-20T11:36:21.112177Z","shell.execute_reply.started":"2025-09-20T11:36:21.104337Z","shell.execute_reply":"2025-09-20T11:36:21.111628Z"}},"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"               id                                             prompt  \\\n30205  2245506736  [\"can you give me some escape room themes with...   \n8763    656268525  [\"Why did digital electronics switch from 5 vo...   \n30501  2266396135  [\"as an acclaimed and visionary author punishe...   \n33619  2497468695  [\"\\n\\nWrite a micro editor plugin that shows t...   \n22573  1679992057  [\"1. 19 year old Emese who is thin (165cm 48kg...   \n...           ...                                                ...   \n54343  4061186081         [\"mega-sena brazilian lottery statistics\"]   \n38158  2840606458                     [\"Draw a dog using ASCII art\"]   \n860      62750940                          [\"How to wear a bikini?\"]   \n15795  1180878567  [\"Can you tell me what was going on with all t...   \n56422  4218036675                          [\"SHOW ME WHAT YOU GOT!\"]   \n\n                                              response_a  \\\n30205  [\"Certainly! Here are several escape room them...   \n8763   [\"There are a few key reasons why digital elec...   \n30501  [\"As an acclaimed and visionary author, Elieze...   \n33619  [\"Here is Python code for a basic micro editor...   \n22573  [\"Certainly, let's address each of your points...   \n...                                                  ...   \n54343  [\"I do not have access to real-time mega-sena ...   \n38158                        [\"\\/_\\/\\\\  \\n( o.o )\\n> ^\"]   \n860    [\"Wearing a bikini can be a fun and comfortabl...   \n15795  [\"The direwolves, which are also known as dire...   \n56422  [\"Of course! As an AI, I can assist with a var...   \n\n                                              response_b  \n30205  [\"Here are some fun and immersive escape room ...  \n8763   [\"The shift from 5 volt logic to 3 volt logic ...  \n30501  [\"Eliezer Yudkowsky is often referred to as th...  \n33619  [\"Micro is a modern and intuitive terminal-bas...  \n22573  [\"1. From the description you provided, it see...  \n...                                                  ...  \n54343  [\"Mega-Sena is a Brazilian lottery game that o...  \n38158  [\"Here is a dog drawn with ASCII art:\\n\\n     ...  \n860    [\"Here are the basic steps to wear a bikini:\\n...  \n15795  [\"Sure! On the night of the Red Wedding, all o...  \n56422  [\"I'm a large language model, so I don't have ...  \n\n[45981 rows x 4 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>prompt</th>\n      <th>response_a</th>\n      <th>response_b</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>30205</th>\n      <td>2245506736</td>\n      <td>[\"can you give me some escape room themes with...</td>\n      <td>[\"Certainly! Here are several escape room them...</td>\n      <td>[\"Here are some fun and immersive escape room ...</td>\n    </tr>\n    <tr>\n      <th>8763</th>\n      <td>656268525</td>\n      <td>[\"Why did digital electronics switch from 5 vo...</td>\n      <td>[\"There are a few key reasons why digital elec...</td>\n      <td>[\"The shift from 5 volt logic to 3 volt logic ...</td>\n    </tr>\n    <tr>\n      <th>30501</th>\n      <td>2266396135</td>\n      <td>[\"as an acclaimed and visionary author punishe...</td>\n      <td>[\"As an acclaimed and visionary author, Elieze...</td>\n      <td>[\"Eliezer Yudkowsky is often referred to as th...</td>\n    </tr>\n    <tr>\n      <th>33619</th>\n      <td>2497468695</td>\n      <td>[\"\\n\\nWrite a micro editor plugin that shows t...</td>\n      <td>[\"Here is Python code for a basic micro editor...</td>\n      <td>[\"Micro is a modern and intuitive terminal-bas...</td>\n    </tr>\n    <tr>\n      <th>22573</th>\n      <td>1679992057</td>\n      <td>[\"1. 19 year old Emese who is thin (165cm 48kg...</td>\n      <td>[\"Certainly, let's address each of your points...</td>\n      <td>[\"1. From the description you provided, it see...</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>54343</th>\n      <td>4061186081</td>\n      <td>[\"mega-sena brazilian lottery statistics\"]</td>\n      <td>[\"I do not have access to real-time mega-sena ...</td>\n      <td>[\"Mega-Sena is a Brazilian lottery game that o...</td>\n    </tr>\n    <tr>\n      <th>38158</th>\n      <td>2840606458</td>\n      <td>[\"Draw a dog using ASCII art\"]</td>\n      <td>[\"\\/_\\/\\\\  \\n( o.o )\\n&gt; ^\"]</td>\n      <td>[\"Here is a dog drawn with ASCII art:\\n\\n     ...</td>\n    </tr>\n    <tr>\n      <th>860</th>\n      <td>62750940</td>\n      <td>[\"How to wear a bikini?\"]</td>\n      <td>[\"Wearing a bikini can be a fun and comfortabl...</td>\n      <td>[\"Here are the basic steps to wear a bikini:\\n...</td>\n    </tr>\n    <tr>\n      <th>15795</th>\n      <td>1180878567</td>\n      <td>[\"Can you tell me what was going on with all t...</td>\n      <td>[\"The direwolves, which are also known as dire...</td>\n      <td>[\"Sure! On the night of the Red Wedding, all o...</td>\n    </tr>\n    <tr>\n      <th>56422</th>\n      <td>4218036675</td>\n      <td>[\"SHOW ME WHAT YOU GOT!\"]</td>\n      <td>[\"Of course! As an AI, I can assist with a var...</td>\n      <td>[\"I'm a large language model, so I don't have ...</td>\n    </tr>\n  </tbody>\n</table>\n<p>45981 rows × 4 columns</p>\n</div>"},"metadata":{}}],"execution_count":15},{"cell_type":"code","source":"X_test","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-20T11:36:21.112811Z","iopub.execute_input":"2025-09-20T11:36:21.112997Z","iopub.status.idle":"2025-09-20T11:36:21.129704Z","shell.execute_reply.started":"2025-09-20T11:36:21.112980Z","shell.execute_reply":"2025-09-20T11:36:21.129047Z"}},"outputs":[{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"               id                                             prompt  \\\n37379  2785062085                     [\"what does hello world mean\"]   \n644      48259531  [\"I ran a marathon in 3:12:00 weighting 84kg. ...   \n48496  3622731894  [\"Below is an instruction that describes a tas...   \n12603   933663766  [\"How do I run static analysis with gcc in QT ...   \n16697  1246768370  [\"What did the music producer \\u00d8fdream die...   \n...           ...                                                ...   \n3151    240261313        [\"How to save a web page into a jpg file?\"]   \n30983  2300512815  [\"provide a short story about a pirate that le...   \n31183  2314277410  [\"Name 3 features of Alain Badiou's ontology t...   \n50634  3781372084  [\"Please give me a list of concise bullet poin...   \n23146  1722610582                      [\"What is funnier than 420?\"]   \n\n                                              response_a  \\\n37379  [\"\\\"Hello, World!\\\" is a phrase used in comput...   \n644    [\"It's difficult to provide an exact answer to...   \n48496  [\"\\u8fd9\\u6b3e\\u7eaf\\u8272\\u4e94\\u5206\\u88e4\\u...   \n12603  [\"To run static analysis with gcc in QT Creato...   \n16697  [\"I am not able to provide information on the ...   \n...                                                  ...   \n3151   [\"Here are a few ways to save a web page as a ...   \n30983  [\"Here is a short story about a pirate who lea...   \n31183  [\"Alain Badiou and Plato have distinct philoso...   \n50634  [\"- Musician who plays guitar and enjoys jammi...   \n23146  [\"The question \\\"What is funnier than 420?\\\" i...   \n\n                                              response_b  \n37379  [\"\\\"Hello, World!\\\" is a common phrase used to...  \n644    [\"To accurately estimate how much faster you w...  \n48496  [\"\\u6839\\u636e\\u63d0\\u4f9b\\u7684\\u4ea7\\u54c1\\u...  \n12603  [\"To run static analysis with gcc in QT Creato...  \n16697  [\"I'm really sorry, but I don't have the abili...  \n...                                                  ...  \n3151   [\"Here are a few ways to save a web page as a ...  \n30983  [\"Once upon a time, in the golden age of pirac...  \n31183  [\"Here are 3 key differences between Alain Bad...  \n50634  [\"* Music: plays guitar, drums, and bass\\n* Sp...  \n23146  [\"Humor is subjective and can vary from person...  \n\n[11496 rows x 4 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>prompt</th>\n      <th>response_a</th>\n      <th>response_b</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>37379</th>\n      <td>2785062085</td>\n      <td>[\"what does hello world mean\"]</td>\n      <td>[\"\\\"Hello, World!\\\" is a phrase used in comput...</td>\n      <td>[\"\\\"Hello, World!\\\" is a common phrase used to...</td>\n    </tr>\n    <tr>\n      <th>644</th>\n      <td>48259531</td>\n      <td>[\"I ran a marathon in 3:12:00 weighting 84kg. ...</td>\n      <td>[\"It's difficult to provide an exact answer to...</td>\n      <td>[\"To accurately estimate how much faster you w...</td>\n    </tr>\n    <tr>\n      <th>48496</th>\n      <td>3622731894</td>\n      <td>[\"Below is an instruction that describes a tas...</td>\n      <td>[\"\\u8fd9\\u6b3e\\u7eaf\\u8272\\u4e94\\u5206\\u88e4\\u...</td>\n      <td>[\"\\u6839\\u636e\\u63d0\\u4f9b\\u7684\\u4ea7\\u54c1\\u...</td>\n    </tr>\n    <tr>\n      <th>12603</th>\n      <td>933663766</td>\n      <td>[\"How do I run static analysis with gcc in QT ...</td>\n      <td>[\"To run static analysis with gcc in QT Creato...</td>\n      <td>[\"To run static analysis with gcc in QT Creato...</td>\n    </tr>\n    <tr>\n      <th>16697</th>\n      <td>1246768370</td>\n      <td>[\"What did the music producer \\u00d8fdream die...</td>\n      <td>[\"I am not able to provide information on the ...</td>\n      <td>[\"I'm really sorry, but I don't have the abili...</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>3151</th>\n      <td>240261313</td>\n      <td>[\"How to save a web page into a jpg file?\"]</td>\n      <td>[\"Here are a few ways to save a web page as a ...</td>\n      <td>[\"Here are a few ways to save a web page as a ...</td>\n    </tr>\n    <tr>\n      <th>30983</th>\n      <td>2300512815</td>\n      <td>[\"provide a short story about a pirate that le...</td>\n      <td>[\"Here is a short story about a pirate who lea...</td>\n      <td>[\"Once upon a time, in the golden age of pirac...</td>\n    </tr>\n    <tr>\n      <th>31183</th>\n      <td>2314277410</td>\n      <td>[\"Name 3 features of Alain Badiou's ontology t...</td>\n      <td>[\"Alain Badiou and Plato have distinct philoso...</td>\n      <td>[\"Here are 3 key differences between Alain Bad...</td>\n    </tr>\n    <tr>\n      <th>50634</th>\n      <td>3781372084</td>\n      <td>[\"Please give me a list of concise bullet poin...</td>\n      <td>[\"- Musician who plays guitar and enjoys jammi...</td>\n      <td>[\"* Music: plays guitar, drums, and bass\\n* Sp...</td>\n    </tr>\n    <tr>\n      <th>23146</th>\n      <td>1722610582</td>\n      <td>[\"What is funnier than 420?\"]</td>\n      <td>[\"The question \\\"What is funnier than 420?\\\" i...</td>\n      <td>[\"Humor is subjective and can vary from person...</td>\n    </tr>\n  </tbody>\n</table>\n<p>11496 rows × 4 columns</p>\n</div>"},"metadata":{}}],"execution_count":16},{"cell_type":"code","source":"y_train","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-20T11:36:21.130283Z","iopub.execute_input":"2025-09-20T11:36:21.130487Z","iopub.status.idle":"2025-09-20T11:36:21.144337Z","shell.execute_reply.started":"2025-09-20T11:36:21.130473Z","shell.execute_reply":"2025-09-20T11:36:21.143688Z"}},"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"array([2, 1, 1, ..., 1, 1, 0])"},"metadata":{}}],"execution_count":17},{"cell_type":"code","source":"catagorical_feature = [col for col in X.columns if X[col].dtype == 'object']\ncatagorical_feature","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-20T11:36:21.145058Z","iopub.execute_input":"2025-09-20T11:36:21.145332Z","iopub.status.idle":"2025-09-20T11:36:21.159257Z","shell.execute_reply.started":"2025-09-20T11:36:21.145317Z","shell.execute_reply":"2025-09-20T11:36:21.158555Z"}},"outputs":[{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"['prompt', 'response_a', 'response_b']"},"metadata":{}}],"execution_count":18},{"cell_type":"code","source":"from sentence_transformers import SentenceTransformer\nfrom sklearn.base import BaseEstimator, TransformerMixin\n\nfrom sklearn.compose import ColumnTransformer\n\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.feature_selection import SelectKBest, chi2\n\n\nfrom sentence_transformers import SentenceTransformer\nimport torch","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-20T11:36:21.160014Z","iopub.execute_input":"2025-09-20T11:36:21.160270Z","iopub.status.idle":"2025-09-20T11:36:21.172128Z","shell.execute_reply.started":"2025-09-20T11:36:21.160244Z","shell.execute_reply":"2025-09-20T11:36:21.171495Z"}},"outputs":[],"execution_count":19},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras import layers, models\nfrom transformers import DebertaV2Tokenizer\nfrom sklearn.base import BaseEstimator, TransformerMixin\nimport torch\nimport numpy as np\nimport tensorflow as tf\nfrom keras_hub.src.models.deberta_v3.deberta_v3_backbone import DebertaV3Backbone\nimport os # Import os module\nimport multiprocessing\nclass HFEmbedder(BaseEstimator, TransformerMixin):\n    def __init__(self, model_path, batch_size=16, max_length=512, use_fast_tokenizer=True, enable_mixed_precision=True, embedding_type=\"mean\"):\n        self.embedding_type = embedding_type\n        self.model_path = model_path\n        self.batch_size = int(batch_size)\n        self.max_length = min(int(max_length), 512)\n        self.use_fast_tokenizer = use_fast_tokenizer\n        self.enable_mixed_precision = enable_mixed_precision # Add this line to store the parameter\n        self._cpu_count = multiprocessing.cpu_count()\n\n        # Make TF GPU usage explicit / safe\n        try:\n            gpus = tf.config.list_physical_devices(\"GPU\")\n            if gpus:\n                for g in gpus:\n                    tf.config.experimental.set_memory_growth(g, True)\n        except Exception:\n            pass\n\n        # optionally use mixed precision on GPUs (speeds up fp16 capable GPUs)\n        try:\n            if self.enable_mixed_precision: # Use self.enable_mixed_precision\n                from tensorflow.keras import mixed_precision\n                mixed_precision.set_global_policy(\"mixed_float16\")\n        except Exception:\n            pass\n\n        # Load tokenizer (prefer fast tokenizer if available)\n        try:\n            if self.use_fast_tokenizer:\n                from transformers import DebertaV2TokenizerFast as _TokFast\n                self.tokenizer = _TokFast(vocab_file=os.path.join(self.model_path, \"assets/tokenizer/vocabulary.spm\")) # Use os.path.join\n            else:\n                from transformers import DebertaV2Tokenizer as _Tok\n                self.tokenizer = _Tok(vocab_file=os.path.join(self.model_path, \"assets/tokenizer/vocabulary.spm\")) # Use os.path.join\n        except Exception:\n            # fallback to original import name/location\n            try:\n                from transformers import DebertaV2Tokenizer as _Tok\n                self.tokenizer = _Tok(vocab_file=os.path.join(self.model_path, \"assets/tokenizer/vocabulary.spm\")) # Use os.path.join\n            except Exception:\n                raise\n\n        self.tokenizer.model_max_length = self.max_length\n\n        # Load model backbone (Keras)\n        config = self._detect_model_config()\n        self.model = DebertaV3Backbone(\n            vocabulary_size=128100,\n            num_layers=config[\"num_layers\"],\n            num_heads=config[\"num_heads\"],\n            hidden_dim=config[\"hidden_dim\"],\n            intermediate_dim=config[\"intermediate_dim\"],\n            dropout=0.1,\n            max_sequence_length=512,\n            bucket_size=256\n        )\n\n\n        self.model.load_weights(os.path.join(self.model_path, \"model.weights.h5\"),skip_mismatch=True) # Use os.path.join\n\n        print(\"✅ Model input names:\", [input.name for input in self.model.inputs])\n        # optional: warm-up call with zeros to ensure TF places variables on GPU if available\n        try:\n            import tensorflow as tf\n            dummy_input = {\n                \"padding_mask\": tf.zeros((1, self.max_length), dtype=tf.int32),\n                \"token_ids\": tf.zeros((1, self.max_length), dtype=tf.int32),\n            }\n            _ = self.model(dummy_input)\n        except Exception:\n            pass\n    def _detect_model_config(self):\n            import os\n            import json\n        \n            config_path = os.path.join(self.model_path, \"config.json\")\n            if os.path.exists(config_path):\n                try:\n                    with open(config_path, \"r\") as f:\n                        config = json.load(f)\n                    return {\n                        \"num_layers\": config.get(\"num_layers\", 12),\n                        \"num_heads\": config.get(\"num_attention_heads\", 12),\n                        \"hidden_dim\": config.get(\"hidden_size\", 768),\n                        \"intermediate_dim\": config.get(\"intermediate_size\", 3072),\n                    }\n                except Exception as e:\n                    print(f\"⚠️ Failed to read config.json: {e}\")\n        \n            # Fallback: infer from folder name\n            path_lower = self.model_path.lower()\n            if \"small\" in path_lower:\n                return {\n                    \"num_layers\": 12,\n                    \"num_heads\": 6,\n                    \"hidden_dim\": 768,\n                    \"intermediate_dim\": 3072,\n                }\n            elif \"base\" in path_lower:\n                return {\n                    \"num_layers\": 12,\n                    \"num_heads\": 12,\n                    \"hidden_dim\": 768,\n                    \"intermediate_dim\": 3072,\n                }\n        \n            print(\"⚠️ Could not auto-detect model config. Using default base config.\")\n            return {\n                \"num_layers\": 12,\n                \"num_heads\": 12,\n                \"hidden_dim\": 768,\n                \"intermediate_dim\": 3072,\n            }\n\n\n    def fit(self, X, y=None):\n        return self\n\n    def transform(self, X):\n        import tensorflow as tf\n        import numpy as np\n    \n        # Accept pandas Series / DataFrame / numpy array / list\n        if hasattr(X, \"to_list\"):\n            texts = X.to_list()\n        else:\n            texts = list(X)\n    \n        def _to_text(item):\n            if isinstance(item, (list, tuple, np.ndarray)):\n                if len(item) == 0:\n                    return \"\"\n                if len(item) == 1:\n                    return str(item[0])\n                return \" \".join(str(x) for x in item)\n            return \"\" if item is None else str(item)\n    \n        texts = [_to_text(t) for t in texts]\n        n = len(texts)\n        if n == 0:\n            try:\n                hidden_dim = int(self.model.output_shape[-1])\n                return {\n                    \"raw\": np.zeros((0, self.max_length, hidden_dim), dtype=np.float32),\n                    \"mean\": np.zeros((0, hidden_dim), dtype=np.float32),\n                    \"median\": np.zeros((0, hidden_dim), dtype=np.float32),\n                    #\"max\": np.zeros((0, hidden_dim), dtype=np.float32),\n                    #\"min\": np.zeros((0, hidden_dim), dtype=np.float32),\n                }\n            except Exception:\n                return {}\n    \n        # Store outputs\n        raw_outputs = []\n    \n        for i in range(0, n, self.batch_size):\n            batch = texts[i:i + self.batch_size]\n            try:\n                tokens = self.tokenizer(\n                    batch,\n                    padding=\"max_length\",\n                    truncation=True,\n                    max_length=self.max_length,\n                    return_tensors=\"tf\",\n                )\n                token_ids_tf = tf.cast(tokens[\"input_ids\"], tf.int32)\n                attention_mask_tf = tf.cast(tokens[\"attention_mask\"], dtype=tf.int32)\n                model_inputs = {\"padding_mask\": attention_mask_tf, \"token_ids\": token_ids_tf}\n                outputs = self.model(model_inputs)\n                outputs_np = outputs.numpy()\n            except Exception:\n                tokens = self.tokenizer(\n                    [str(t) for t in batch],\n                    padding=\"max_length\",\n                    truncation=True,\n                    max_length=self.max_length,\n                    return_tensors=\"np\",\n                )\n                token_ids_tf = tf.convert_to_tensor(tokens[\"input_ids\"], dtype=tf.int32)\n                attention_mask_tf = tf.convert_to_tensor(tokens[\"attention_mask\"], dtype=tf.int32)\n                model_inputs = {\"padding_mask\": attention_mask_tf, \"token_ids\": token_ids_tf}\n                outputs = self.model(model_inputs)\n                outputs_np = outputs.numpy()\n    \n            raw_outputs.append(outputs_np)\n    \n        # Combine all batches\n        full_output = np.vstack(raw_outputs)  # shape: [n_samples, seq_len, hidden_dim]\n    \n        \n        mean_embeddings = np.mean(full_output, axis=1)\n        median_embeddings = np.median(full_output, axis=1)\n        #max_embeddings = np.max(full_output, axis=1)\n        #min_embeddings = np.min(full_output, axis=1)\n    \n        # Return per-sample dicts\n        return [\n            {       \n                \"text\": texts[i],\n                \"raw\": full_output[i],\n                \"mean\": mean_embeddings[i],\n                \"median\": median_embeddings[i],\n                #\"max\": max_embeddings[i],\n                #\"min\": min_embeddings[i],\n            }\n            for i in range(len(texts))\n        ]\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-20T11:36:21.172872Z","iopub.execute_input":"2025-09-20T11:36:21.173106Z","iopub.status.idle":"2025-09-20T11:36:22.110653Z","shell.execute_reply.started":"2025-09-20T11:36:21.173085Z","shell.execute_reply":"2025-09-20T11:36:22.109869Z"}},"outputs":[],"execution_count":20},{"cell_type":"code","source":"%pip install nltk ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-20T11:36:22.111525Z","iopub.execute_input":"2025-09-20T11:36:22.111802Z","iopub.status.idle":"2025-09-20T11:36:25.885863Z","shell.execute_reply.started":"2025-09-20T11:36:22.111779Z","shell.execute_reply":"2025-09-20T11:36:25.884951Z"}},"outputs":[{"name":"stdout","text":"Requirement already satisfied: nltk in /usr/local/lib/python3.11/dist-packages (3.9.1)\nRequirement already satisfied: click in /usr/local/lib/python3.11/dist-packages (from nltk) (8.2.1)\nRequirement already satisfied: joblib in /usr/local/lib/python3.11/dist-packages (from nltk) (1.5.1)\nRequirement already satisfied: regex>=2021.8.3 in /usr/local/lib/python3.11/dist-packages (from nltk) (2024.11.6)\nRequirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from nltk) (4.67.1)\nNote: you may need to restart the kernel to use updated packages.\n","output_type":"stream"}],"execution_count":21},{"cell_type":"code","source":"import re\nimport nltk\nfrom nltk.corpus import stopwords\nfrom nltk.stem import WordNetLemmatizer\n\nnltk.download(\"stopwords\")\nnltk.download(\"wordnet\")\n\nstop_words = set(stopwords.words(\"english\"))\nlemmatizer = WordNetLemmatizer()\n\ndef clean_text_for_common_words(text):\n    text = text.lower()\n    text = re.sub(r'[^\\w\\s]', '', text)\n    tokens = text.split()\n    return [lemmatizer.lemmatize(word) for word in tokens if word not in stop_words]\n    #return [word for word in tokens]\n\nclass CommonWordsTransformer(BaseEstimator, TransformerMixin):\n    def __init__(self):\n        pass\n\n    def fit(self, X, y=None):\n        return self\n\n    def transform(self, X):\n        common_meaningful_words_a = []\n        common_meaningful_words_b = []\n\n        for index, row in X.iterrows():\n            prompt_tokens = clean_text_for_common_words(row['prompt'])\n            response_a_tokens = clean_text_for_common_words(row['response_a'])\n            response_b_tokens = clean_text_for_common_words(row['response_b'])\n\n            common_meaningful_a = len(set(prompt_tokens) & set(response_a_tokens))\n            common_meaningful_b = len(set(prompt_tokens) & set(response_b_tokens))\n\n            common_meaningful_words_a.append(common_meaningful_a)\n            common_meaningful_words_b.append(common_meaningful_b)\n\n        return np.array([common_meaningful_words_a, common_meaningful_words_b]).T","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-20T11:36:25.889922Z","iopub.execute_input":"2025-09-20T11:36:25.890169Z","iopub.status.idle":"2025-09-20T11:36:26.852764Z","shell.execute_reply.started":"2025-09-20T11:36:25.890146Z","shell.execute_reply":"2025-09-20T11:36:26.851924Z"}},"outputs":[{"name":"stderr","text":"[nltk_data] Downloading package stopwords to /usr/share/nltk_data...\n[nltk_data]   Package stopwords is already up-to-date!\n[nltk_data] Downloading package wordnet to /usr/share/nltk_data...\n[nltk_data]   Package wordnet is already up-to-date!\n","output_type":"stream"}],"execution_count":22},{"cell_type":"code","source":"X_train[\"prompt_clean\"] = X_train[\"prompt\"]#.apply(clean_text_for_common_words)\nX_train[\"response_a_clean\"] = X_train[\"response_a\"]#.apply(clean_text_for_common_words)\nX_train[\"response_b_clean\"] = X_train[\"response_b\"]#.apply(clean_text_for_common_words)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-20T11:36:26.853486Z","iopub.execute_input":"2025-09-20T11:36:26.853716Z","iopub.status.idle":"2025-09-20T11:36:26.925918Z","shell.execute_reply.started":"2025-09-20T11:36:26.853694Z","shell.execute_reply":"2025-09-20T11:36:26.925282Z"}},"outputs":[],"execution_count":23},{"cell_type":"code","source":"from sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.utils.validation import check_is_fitted\nfrom sklearn.metrics.pairwise import cosine_similarity\n\nclass PromptResponseSimilarity(BaseEstimator, TransformerMixin):\n    def fit(self, X, y=None):\n        return self\n\n    def transform(self, X):\n        # X is a 2D array of shape (n_samples, 3 * embedding_dim)\n        n_samples, total_dim = X.shape\n        embedding_dim = total_dim // 3\n\n        prompt_embeds = X[:, :embedding_dim]\n        resp_a_embeds = X[:, embedding_dim:2*embedding_dim]\n        resp_b_embeds = X[:, 2*embedding_dim:]\n\n        sim_a = np.array([\n            cosine_similarity(p.reshape(1, -1), a.reshape(1, -1))[0, 0]\n            for p, a in zip(prompt_embeds, resp_a_embeds)\n        ])\n        sim_b = np.array([\n            cosine_similarity(p.reshape(1, -1), b.reshape(1, -1))[0, 0]\n            for p, b in zip(prompt_embeds, resp_b_embeds)\n        ])\n\n        return np.vstack([sim_a, sim_b]).T\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-20T11:36:26.926702Z","iopub.execute_input":"2025-09-20T11:36:26.926941Z","iopub.status.idle":"2025-09-20T11:36:26.934392Z","shell.execute_reply.started":"2025-09-20T11:36:26.926919Z","shell.execute_reply":"2025-09-20T11:36:26.933705Z"}},"outputs":[],"execution_count":24},{"cell_type":"code","source":"class RawEmbeddingSimilarity(BaseEstimator, TransformerMixin):\n    def fit(self, X, y=None):\n        return self\n\n    def transform(self, X):\n        prompt_embeds = X[\"prompt_embed\"].apply(lambda x: x[\"raw\"]).tolist()\n        resp_a_embeds = X[\"resp_a_embed\"].apply(lambda x: x[\"raw\"]).tolist()\n        resp_b_embeds = X[\"resp_b_embed\"].apply(lambda x: x[\"raw\"]).tolist()\n    \n        sim_a, sim_b = [], []\n        for p, a, b in zip(prompt_embeds, resp_a_embeds, resp_b_embeds):\n            sim_a.append(cosine_similarity(p.flatten().reshape(1, -1), a.flatten().reshape(1, -1))[0, 0])\n            sim_b.append(cosine_similarity(p.flatten().reshape(1, -1), b.flatten().reshape(1, -1))[0, 0])\n    \n        return np.vstack([sim_a, sim_b]).T\n\n        \nclass AggregatedEmbeddingSimilarity(BaseEstimator, TransformerMixin):\n    def __init__(self, agg_type=\"mean\"):\n        self.agg_type = agg_type\n\n    def fit(self, X, y=None):\n        return self\n\n    \n    def transform(self, X):\n        prompt_embeds = X[\"prompt_embed\"].apply(lambda x: x[self.agg_type]).tolist()\n        resp_a_embeds = X[\"resp_a_embed\"].apply(lambda x: x[self.agg_type]).tolist()\n        resp_b_embeds = X[\"resp_b_embed\"].apply(lambda x: x[self.agg_type]).tolist()\n    \n        sim_a = [cosine_similarity(p.reshape(1, -1), a.reshape(1, -1))[0, 0] for p, a in zip(prompt_embeds, resp_a_embeds)]\n        sim_b = [cosine_similarity(p.reshape(1, -1), b.reshape(1, -1))[0, 0] for p, b in zip(prompt_embeds, resp_b_embeds)]\n    \n        return np.vstack([sim_a, sim_b]).T\n\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-20T11:36:26.935042Z","iopub.execute_input":"2025-09-20T11:36:26.935227Z","iopub.status.idle":"2025-09-20T11:36:26.949394Z","shell.execute_reply.started":"2025-09-20T11:36:26.935213Z","shell.execute_reply":"2025-09-20T11:36:26.948642Z"}},"outputs":[],"execution_count":25},{"cell_type":"code","source":"from sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nimport numpy as np\nimport pandas as pd\n\nclass TFIDFAttentionEmbedder(BaseEstimator, TransformerMixin):\n    def __init__(self, tokenizer, max_length=512, embedding_dim=768):\n        self.tokenizer = tokenizer\n        self.vectorizer = TfidfVectorizer()\n        self.max_length = max_length\n        self.embedding_dim = embedding_dim\n\n    def fit(self, X, y=None):\n        texts = []\n\n        # Extract texts from various input formats\n        if isinstance(X, (list, np.ndarray)):\n            for row in X:\n                if isinstance(row, (list, tuple)):\n                    for item in row:\n                        if isinstance(item, dict):\n                            text = item.get(\"text\", \"\")\n                            if text.strip():\n                                texts.append(text)\n                elif isinstance(row, dict):\n                    text = row.get(\"text\", \"\")\n                    if text.strip():\n                        texts.append(text)\n        elif isinstance(X, pd.DataFrame):\n            for col in X.columns:\n                col_texts = X[col].apply(lambda x: x.get(\"text\", \"\") if isinstance(x, dict) else \"\").tolist()\n                texts.extend([t for t in col_texts if t.strip()])\n\n        if not texts:\n            raise ValueError(\"No valid texts found for TF-IDF fitting.\")\n\n        self.vectorizer.fit(texts)\n        return self\n\n    def transform(self, X):\n        weighted_embeddings_mean = []\n        weighted_embeddings_median = []\n    \n        for i, sample in enumerate(X):\n            text = sample.get(\"text\", \"\")\n            token_embeddings = sample.get(\"raw\", None)\n    \n            if token_embeddings is None or len(text.strip()) == 0:\n                print(f\"[TFIDF Warning] Row {i} has no token embeddings or empty text.\")\n                print(f\"Text: {text}\\n\")\n                zero_vec = np.zeros(self.embedding_dim)\n                weighted_embeddings_mean.append(zero_vec)\n                weighted_embeddings_median.append(zero_vec)\n                continue\n    \n            tokens = self.tokenizer.tokenize(text)\n            tfidf_vector = self.vectorizer.transform([text]).toarray()[0]\n    \n            token_weights = []\n            missing_tokens = []\n    \n            for token in tokens[:self.max_length]:\n                token_clean = token.lower().replace(\"▁\", \"\")\n                idx = self.vectorizer.vocabulary_.get(token_clean, None)\n                if idx is not None:\n                    token_weights.append(tfidf_vector[idx])\n                else:\n                    token_weights.append(0.0)\n                    missing_tokens.append(token)\n    \n            token_weights = np.array(token_weights)\n            token_embeddings = token_embeddings[:len(token_weights)]\n    \n            if token_weights.sum() == 0 or token_embeddings.shape[0] == 0:\n                print(f\"[TFIDF Warning] Row {i} has zero TF-IDF weights.\")\n                #print(f\"Text: {text}\")\n                #print(f\"Tokens: {tokens}\")\n                #print(f\"Missing from TF-IDF vocab: {missing_tokens}\\n\")\n                zero_vec = np.zeros(token_embeddings.shape[-1])\n                weighted_embeddings_mean.append(zero_vec)\n                weighted_embeddings_median.append(zero_vec)\n                continue\n    \n            # Weighted mean\n            token_weights /= token_weights.sum()\n            weighted_mean = np.average(token_embeddings, axis=0, weights=token_weights)\n            weighted_embeddings_mean.append(weighted_mean)\n    \n            # Weighted median\n            weighted_median = np.zeros(token_embeddings.shape[1])\n            for dim in range(token_embeddings.shape[1]):\n                dim_values = token_embeddings[:, dim]\n                sorted_indices = np.argsort(dim_values)\n                sorted_weights = token_weights[sorted_indices]\n                cumsum_weights = np.cumsum(sorted_weights)\n                median_idx = np.searchsorted(cumsum_weights, 0.5 * cumsum_weights[-1])\n                weighted_median[dim] = dim_values[sorted_indices[median_idx]]\n            weighted_embeddings_median.append(weighted_median)\n    \n        return np.hstack([\n            np.array(weighted_embeddings_mean),\n            np.array(weighted_embeddings_median)\n        ])\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-20T11:36:26.950188Z","iopub.execute_input":"2025-09-20T11:36:26.950412Z","iopub.status.idle":"2025-09-20T11:36:26.968012Z","shell.execute_reply.started":"2025-09-20T11:36:26.950388Z","shell.execute_reply":"2025-09-20T11:36:26.967365Z"}},"outputs":[],"execution_count":26},{"cell_type":"markdown","source":"    def transform(self, X):\n        weighted_embeddings_mean = []\n        weighted_embeddings_median = []\n    \n        for sample in X:\n            # If sample is a dict (expected format), extract fields\n            if isinstance(sample, dict):\n                text = sample.get(\"text\", \"\")\n                token_embeddings = sample.get(\"raw\", None)\n            else:\n                # Fallback: treat sample as plain text or unsupported format\n                text = str(sample)\n                token_embeddings = None\n    \n            # Handle empty or invalid cases\n            if token_embeddings is None or len(text.strip()) == 0:\n                print(f\"[TFIDF Warning] Row {i} has no token embeddings or empty text.\")\n                print(f\"Text: {text}\\n\")\n                zero_vec = np.zeros(self.embedding_dim)\n                weighted_embeddings_mean.append(zero_vec)\n                weighted_embeddings_median.append(zero_vec)\n                continue\n    \n            tokens = self.tokenizer.tokenize(text)\n            tfidf_vector = self.vectorizer.transform([text]).toarray()[0]\n    \n            token_weights = []\n            for token in tokens[:self.max_length]:\n                idx = self.vectorizer.vocabulary_.get(token.lower(), None)\n                token_weights.append(tfidf_vector[idx] if idx is not None else 0.0)\n    \n            token_weights = np.array(token_weights)\n            token_embeddings = token_embeddings[:len(token_weights)]\n    \n            if token_weights.sum() > 0:\n                token_weights = token_weights / token_weights.sum()\n    \n            if token_weights.sum() == 0 or token_embeddings.shape[0] == 0:\n                \n                print(f\"[TFIDF Warning] Row {i} has zero TF-IDF weights.\")\n                print(f\"Text: {text}\")\n                print(f\"Tokens: {tokens}\")\n                print(f\"Missing from TF-IDF vocab: {missing_tokens}\\n\")\n                zero_vec = np.zeros(token_embeddings.shape[-1])\n                weighted_embeddings_mean.append(zero_vec)\n                weighted_embeddings_median.append(zero_vec)\n            else:\n                # Calculate weighted mean\n                weighted_mean = np.average(token_embeddings, axis=0, weights=token_weights)\n                weighted_embeddings_mean.append(weighted_mean)\n                \n                # Calculate weighted median\n                # For each dimension, sort values and find the weighted median\n                weighted_median = np.zeros(token_embeddings.shape[1])\n                for dim in range(token_embeddings.shape[1]):\n                    dim_values = token_embeddings[:, dim]\n                    sorted_indices = np.argsort(dim_values)\n                    sorted_weights = token_weights[sorted_indices]\n                    cumsum_weights = np.cumsum(sorted_weights)\n                    median_idx = np.searchsorted(cumsum_weights, 0.5 * cumsum_weights[-1])\n                    weighted_median[dim] = dim_values[sorted_indices[median_idx]]\n                weighted_embeddings_median.append(weighted_median)\n    \n        # Stack and return both mean and median embeddings side by side\n        return np.hstack([\n            np.array(weighted_embeddings_mean),\n            np.array(weighted_embeddings_median)\n        ])\n","metadata":{"jupyter":{"source_hidden":true}}},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"class DictWrapper(BaseEstimator, TransformerMixin):\n    def __init__(self, embedder):\n        self.embedder = embedder\n\n    def fit(self, X, y=None):\n        return self\n\n    def transform(self, X):\n        # Returns a 2D array of shape (n_samples, 1), each cell is a dict\n        embeddings = self.embedder.transform(X)\n        return np.array(embeddings).reshape(-1, 1)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-20T11:36:26.968624Z","iopub.execute_input":"2025-09-20T11:36:26.968908Z","iopub.status.idle":"2025-09-20T11:36:26.985143Z","shell.execute_reply.started":"2025-09-20T11:36:26.968885Z","shell.execute_reply":"2025-09-20T11:36:26.984380Z"}},"outputs":[],"execution_count":27},{"cell_type":"code","source":"class EmbeddingStatsExtractor(BaseEstimator, TransformerMixin):\n    def __init__(self, fields=(\"mean\", \"median\")):\n        self.fields = fields\n\n    def fit(self, X, y=None):\n        return self\n\n    def transform(self, X):\n        features = []\n        for row in X:\n            row_features = []\n            for field in self.fields:\n                vec = row.get(field, np.zeros(768))  # fallback to zeros if missing\n                row_features.extend(vec)\n            features.append(row_features)\n        return np.array(features)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-20T11:36:26.985887Z","iopub.execute_input":"2025-09-20T11:36:26.986578Z","iopub.status.idle":"2025-09-20T11:36:27.001400Z","shell.execute_reply.started":"2025-09-20T11:36:26.986560Z","shell.execute_reply":"2025-09-20T11:36:27.000714Z"}},"outputs":[],"execution_count":28},{"cell_type":"code","source":"from sklearn.pipeline import Pipeline, FeatureUnion\nfrom sklearn.compose import ColumnTransformer\nimport gc\n# Convert numpy arrays to sparse matrices if needed\nfrom scipy.sparse import csr_matrix, hstack\n# Initialize the shared embedder\nshared_embedder = HFEmbedder(model_path=\"/kaggle/input/deberta_v3/keras/deberta_v3_small_en/3\")\n\n# Step 1: Get embeddings for each text column\nembedding_stage = ColumnTransformer([\n    (\"prompt_embed\", DictWrapper(shared_embedder), \"prompt_clean\"),\n    (\"resp_a_embed\", DictWrapper(shared_embedder), \"response_a_clean\"),\n    (\"resp_b_embed\", DictWrapper(shared_embedder), \"response_b_clean\"),\n])\n\n# Fit and transform the embeddings\nprint(\"Step 1: Generating embeddings...\")\n# Configuration\nCHUNK_SIZE = 768  # Adjust based on your memory constraints\nOUTPUT_FILE = \"embedded_features.pkl\"\n\n\ndef process_in_chunks(data, chunk_size=CHUNK_SIZE):\n    num_samples = len(data)\n    results = []\n    \n    for start_idx in range(0, num_samples, chunk_size):\n        print(f\"\\nProcessing chunk {start_idx//chunk_size + 1}/{(num_samples + chunk_size - 1)//chunk_size}\")\n        \n        # Get current chunk\n        end_idx = min(start_idx + chunk_size, num_samples)\n        chunk = data.iloc[start_idx:end_idx]\n        \n        # Generate embeddings for chunk\n        print(\"Generating embeddings...\")\n        embedded_chunk = embedding_stage.fit_transform(chunk)\n        \n        # Convert to DataFrame format\n        chunk_df = pd.DataFrame([{\n            \"prompt_embed\": x[0],\n            \"resp_a_embed\": x[1],\n            \"resp_b_embed\": x[2]\n        } for x in embedded_chunk])\n        # Step 2: Extract statistics from embeddings\n        print(\"\\nStep 2: Extracting embedding statistics...\")\n        \n        # Process each type of embedding separately\n        prompt_stats = EmbeddingStatsExtractor().fit_transform(chunk_df[\"prompt_embed\"])\n        resp_a_stats = EmbeddingStatsExtractor().fit_transform(chunk_df[\"resp_a_embed\"])\n        resp_b_stats = EmbeddingStatsExtractor().fit_transform(chunk_df[\"resp_b_embed\"])\n        \n        print(f\"Prompt stats shape: {prompt_stats.shape}\")\n        print(f\"Response A stats shape: {resp_a_stats.shape}\")\n        print(f\"Response B stats shape: {resp_b_stats.shape}\")\n        #Step 3: Calculate similarities\n        print(\"\\nStep 3: Calculating similarities...\")\n        \n        # Raw embedding similarity\n        raw_sim = RawEmbeddingSimilarity().fit_transform(chunk_df)\n        print(f\"Raw similarity shape: {raw_sim.shape}\")\n        \n        # Mean and median similarities\n        mean_sim = AggregatedEmbeddingSimilarity(agg_type=\"mean\").fit_transform(chunk_df)\n        median_sim = AggregatedEmbeddingSimilarity(agg_type=\"median\").fit_transform(chunk_df)\n        \n        print(f\"Mean similarity shape: {mean_sim.shape}\")\n        print(f\"Median similarity shape: {median_sim.shape}\")\n        # Step 4: TF-IDF attention\n        print(\"\\nStep 4: Computing TF-IDF attention...\")\n        \n        # Create and fit TF-IDF embedders\n        tfidf_prompt = TFIDFAttentionEmbedder(tokenizer=shared_embedder.tokenizer)\n        tfidf_resp_a = TFIDFAttentionEmbedder(tokenizer=shared_embedder.tokenizer)\n        tfidf_resp_b = TFIDFAttentionEmbedder(tokenizer=shared_embedder.tokenizer)\n        \n        # Transform each column\n        prompt_tfidf = tfidf_prompt.fit_transform([{'text': x['text'], 'raw': x['raw']} for x in chunk_df['prompt_embed']])\n        resp_a_tfidf = tfidf_resp_a.fit_transform([{'text': x['text'], 'raw': x['raw']} for x in chunk_df['resp_a_embed']])\n        resp_b_tfidf = tfidf_resp_b.fit_transform([{'text': x['text'], 'raw': x['raw']} for x in chunk_df['resp_b_embed']])\n        \n        print(f\"Prompt TF-IDF shape: {prompt_tfidf.shape}\")\n        print(f\"Response A TF-IDF shape: {resp_a_tfidf.shape}\")\n        print(f\"Response B TF-IDF shape: {resp_b_tfidf.shape}\")\n        # Calculate TF-IDF weighted similarities (one-to-one)\n        print(\"\\nCalculating one-to-one TF-IDF weighted similarities...\")\n        half_dim=768\n        prompt_mean = prompt_tfidf[:, :half_dim]\n        prompt_median = prompt_tfidf[:, half_dim:]\n        resp_a_mean = resp_a_tfidf[:, :half_dim]\n        resp_a_median = resp_a_tfidf[:, half_dim:]\n        resp_b_mean = resp_b_tfidf[:, :half_dim]\n        resp_b_median = resp_b_tfidf[:, half_dim:]\n        \n        # Calculate similarities between corresponding pairs\n        mean_sim_a = np.array([\n            cosine_similarity(p.reshape(1, -1), a.reshape(1, -1))[0, 0]\n            for p, a in zip(prompt_mean, resp_a_mean)\n        ])\n        mean_sim_b = np.array([\n            cosine_similarity(p.reshape(1, -1), b.reshape(1, -1))[0, 0]\n            for p, b in zip(prompt_mean, resp_b_mean)\n        ])\n        \n        median_sim_a = np.array([\n            cosine_similarity(p.reshape(1, -1), a.reshape(1, -1))[0, 0]\n            for p, a in zip(prompt_median, resp_a_median)\n        ])\n        median_sim_b = np.array([\n            cosine_similarity(p.reshape(1, -1), b.reshape(1, -1))[0, 0]\n            for p, b in zip(prompt_median, resp_b_median)\n        ])\n        \n        # Create DataFrame with one-to-one similarities\n        similarities_df = pd.DataFrame({\n            'tfidf_mean_sim_a': mean_sim_a,\n            'tfidf_mean_sim_b': mean_sim_b,\n            'tfidf_median_sim_a': median_sim_a,\n            'tfidf_median_sim_b': median_sim_b\n        })\n        \n        print(\"\\nSimilarity shapes:\")\n        print(f\"Number of rows: {len(similarities_df)}\")\n        \n       \n        def ensure_sparse(x, dtype=np.float32):\n            if x is None:\n                return None\n            # Convert to numpy array first with consistent dtype\n            if not isinstance(x, (csr_matrix, np.ndarray)):\n                x = np.array(x, dtype=dtype)\n            elif isinstance(x, np.ndarray):\n                x = x.astype(dtype)\n            \n            # If already sparse, ensure correct dtype\n            if isinstance(x, csr_matrix):\n                return x.astype(dtype)\n            \n            # Convert to sparse\n            return csr_matrix(x)\n        \n        # Print shapes and dtypes before conversion\n        print(\"\\nFeature shapes and types before conversion:\")\n        features = [\n            #(\"prompt_stats\", prompt_stats),\n            #(\"resp_a_stats\", resp_a_stats),\n            #(\"resp_b_stats\", resp_b_stats),\n            (\"raw_sim\", raw_sim),\n            (\"mean_sim\", mean_sim),\n            (\"median_sim\", median_sim),\n            (\"tfidf_mean_sim_a\", similarities_df['tfidf_mean_sim_a'].values.reshape(-1,1)),\n            (\"tfidf_mean_sim_b\", similarities_df['tfidf_mean_sim_b'].values.reshape(-1,1)),\n            (\"tfidf_median_sim_a\", similarities_df['tfidf_median_sim_a'].values.reshape(-1,1)),\n            (\"tfidf_median_sim_b\",similarities_df['tfidf_median_sim_b'].values.reshape(-1,1)),\n           # (\"common_words\", common_words_features)\n        ]\n        \n        for name, feat in features:\n            if feat is not None:\n                print(f\"{name}: shape={feat.shape}, dtype={feat.dtype}\")\n        \n        # Convert each feature set to sparse format with consistent dtype\n        features_to_stack = []\n        for name, feat in features:\n            if feat is not None:\n                sparse_feat = ensure_sparse(feat)\n                features_to_stack.append(sparse_feat)\n                print(f\"Converted {name}: shape={sparse_feat.shape}, dtype={sparse_feat.dtype}\")\n        \n        # Print shapes before stacking\n        print(\"\\nFeature shapes before stacking:\")\n        for i, feat in enumerate(features_to_stack):\n            print(f\"Feature {i} shape: {feat.shape}\")\n        \n        # Combine all the feature matrices\n        final_features = hstack(features_to_stack)\n        X_final = pd.DataFrame(final_features.toarray())\n        print(f\"\\nFinal combined features shape: {final_features.shape}\")\n         # Save chunk to disk\n        chunk_filename = f\"{OUTPUT_FILE}.chunk_{start_idx//chunk_size}.pkl\"\n        X_final.to_pickle(chunk_filename)\n        print(f\"Saved chunk to {chunk_filename}\")\n        \n\n        # Clear memory\n        del embedded_chunk, X_final\n        gc.collect()\n        \n        # Keep track of chunk files\n        results.append(chunk_filename)\n    \n    return results\n\n# Process training data\nprint(\"Processing training data...\")\nchunk_files = process_in_chunks(X_train)\n\n# Optionally, combine all chunks\ndef combine_chunks(chunk_files):\n    print(\"\\nCombining chunks...\")\n    combined_df = pd.concat([pd.read_pickle(f) for f in chunk_files])\n    combined_df.to_pickle(OUTPUT_FILE)\n    print(f\"Saved combined data to {OUTPUT_FILE}\")\n    return combined_df\n\n# Combine if needed\n# combined_data = combine_chunks(chunk_files)  # Uncomment if you need the combined data\n\nprint(\"\\nProcessing complete!\")\n# Load training data chunks\n\n# Load and combine all chunks into a single DataFrame\ndef load_embedded_df(chunk_files):\n    print(\"Loading and combining chunks...\")\n    chunks = []\n    \n    for chunk_file in chunk_files:\n        try:\n            # Load chunk\n            chunk_df = pd.read_pickle(chunk_file)\n            chunks.append(chunk_df)\n            \n            # Clear memory after appending\n            del chunk_df\n            gc.collect()\n            \n        except Exception as e:\n            print(f\"Error loading chunk {chunk_file}: {e}\")\n    \n    # Combine all chunks\n    print(\"Concatenating all chunks...\")\n    embedded_df = pd.concat(chunks, axis=0, ignore_index=True)\n    print(f\"Final DataFrame shape: {embedded_df.shape}\")\n    \n    # Clear temporary lists\n    del chunks\n    gc.collect()\n    \n    return embedded_df\n\n# Load training data chunks\nembedded_df = load_embedded_df([f\"embedded_features.pkl.chunk_{i}.pkl\" \n                              for i in range((len(X_train) + CHUNK_SIZE - 1) // CHUNK_SIZE)])\n\nprint(\"\\nEmbedded DataFrame columns:\", embedded_df.columns.tolist())\n#print(\"First row prompt embedding keys:\", embedded_df[\"prompt_embed\"].iloc[0].keys())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-20T11:36:27.002153Z","iopub.execute_input":"2025-09-20T11:36:27.002703Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/transformers/convert_slow_tokenizer.py:564: UserWarning: The sentencepiece tokenizer that you are converting to a fast tokenizer uses the byte fallback option which is not implemented in the fast tokenizers. In practice this means that the fast version of the tokenizer can produce unknown tokens whereas the sentencepiece version would have converted these unknown tokens into a sequence of byte tokens matching the original piece of text.\n  warnings.warn(\nI0000 00:00:1758368189.076992      36 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n/usr/local/lib/python3.11/dist-packages/keras/src/saving/saving_lib.py:629: UserWarning: A total of 48 objects could not be loaded. Example error message for object <Dense name=feedforward_intermediate_dense, built=True>:\n\nLayer 'feedforward_intermediate_dense' expected 2 variables, but received 0 variables during loading. Expected: ['kernel', 'bias']\n\nList of objects that could not be loaded:\n[<Dense name=feedforward_intermediate_dense, built=True>, <LayerNormalization name=feedforward_layer_norm, built=True>, <Dense name=feedforward_output_dense, built=True>, <EinsumDense name=key, built=True>, <EinsumDense name=attention_output, built=True>, <EinsumDense name=query, built=True>, <EinsumDense name=value, built=True>, <LayerNormalization name=self_attention_layer_norm, built=True>, <Dense name=feedforward_intermediate_dense, built=True>, <LayerNormalization name=feedforward_layer_norm, built=True>, <Dense name=feedforward_output_dense, built=True>, <EinsumDense name=key, built=True>, <EinsumDense name=attention_output, built=True>, <EinsumDense name=query, built=True>, <EinsumDense name=value, built=True>, <LayerNormalization name=self_attention_layer_norm, built=True>, <Dense name=feedforward_intermediate_dense, built=True>, <LayerNormalization name=feedforward_layer_norm, built=True>, <Dense name=feedforward_output_dense, built=True>, <EinsumDense name=key, built=True>, <EinsumDense name=attention_output, built=True>, <EinsumDense name=query, built=True>, <EinsumDense name=value, built=True>, <LayerNormalization name=self_attention_layer_norm, built=True>, <Dense name=feedforward_intermediate_dense, built=True>, <LayerNormalization name=feedforward_layer_norm, built=True>, <Dense name=feedforward_output_dense, built=True>, <EinsumDense name=key, built=True>, <EinsumDense name=attention_output, built=True>, <EinsumDense name=query, built=True>, <EinsumDense name=value, built=True>, <LayerNormalization name=self_attention_layer_norm, built=True>, <Dense name=feedforward_intermediate_dense, built=True>, <LayerNormalization name=feedforward_layer_norm, built=True>, <Dense name=feedforward_output_dense, built=True>, <EinsumDense name=key, built=True>, <EinsumDense name=attention_output, built=True>, <EinsumDense name=query, built=True>, <EinsumDense name=value, built=True>, <LayerNormalization name=self_attention_layer_norm, built=True>, <Dense name=feedforward_intermediate_dense, built=True>, <LayerNormalization name=feedforward_layer_norm, built=True>, <Dense name=feedforward_output_dense, built=True>, <EinsumDense name=key, built=True>, <EinsumDense name=attention_output, built=True>, <EinsumDense name=query, built=True>, <EinsumDense name=value, built=True>, <LayerNormalization name=self_attention_layer_norm, built=True>]\n  warnings.warn(msg)\n","output_type":"stream"},{"name":"stdout","text":"✅ Model input names: ['padding_mask', 'token_ids']\nStep 1: Generating embeddings...\nProcessing training data...\n\nProcessing chunk 1/60\nGenerating embeddings...\n✅ Model input names: ['padding_mask', 'token_ids']\n","output_type":"stream"}],"execution_count":null},{"cell_type":"code","source":"# Step 5: Common words features\nprint(\"\\nStep 5: Computing common words features...\")\n\ncommon_words_features = common_words_transformer.fit_transform(X_train)\nprint(f\"Common words features shape: {common_words_features.shape}\")\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"common_words_features","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Step 6: Combine all features\nprint(\"\\nStep 6: Combining all features...\")\n\n# Convert numpy arrays to sparse matrices if needed\nfrom scipy.sparse import csr_matrix, hstack\n\ndef ensure_sparse(x, dtype=np.float32):\n    if x is None:\n        return None\n    # Convert to numpy array first with consistent dtype\n    if not isinstance(x, (csr_matrix, np.ndarray)):\n        x = np.array(x, dtype=dtype)\n    elif isinstance(x, np.ndarray):\n        x = x.astype(dtype)\n    \n    # If already sparse, ensure correct dtype\n    if isinstance(x, csr_matrix):\n        return x.astype(dtype)\n    \n    # Convert to sparse\n    return csr_matrix(x)\n\n# Print shapes and dtypes before conversion\nprint(\"\\nFeature shapes and types before conversion:\")\nfeatures = [\n    #(\"prompt_stats\", prompt_stats),\n    #(\"resp_a_stats\", resp_a_stats),\n    #(\"resp_b_stats\", resp_b_stats),\n    (\"raw_sim\", raw_sim),\n    (\"mean_sim\", mean_sim),\n    (\"median_sim\", median_sim),\n    (\"tfidf_mean_sim_a\", similarities_df['tfidf_mean_sim_a'].values.reshape(-1,1)),\n    (\"tfidf_mean_sim_b\", similarities_df['tfidf_mean_sim_b'].values.reshape(-1,1)),\n    (\"tfidf_median_sim_a\", similarities_df['tfidf_median_sim_a'].values.reshape(-1,1)),\n    (\"tfidf_median_sim_b\",similarities_df['tfidf_median_sim_b'].values.reshape(-1,1)),\n    (\"common_words\", common_words_features)\n]\n\nfor name, feat in features:\n    if feat is not None:\n        print(f\"{name}: shape={feat.shape}, dtype={feat.dtype}\")\n\n# Convert each feature set to sparse format with consistent dtype\nfeatures_to_stack = []\nfor name, feat in features:\n    if feat is not None:\n        sparse_feat = ensure_sparse(feat)\n        features_to_stack.append(sparse_feat)\n        print(f\"Converted {name}: shape={sparse_feat.shape}, dtype={sparse_feat.dtype}\")\n\n# Print shapes before stacking\nprint(\"\\nFeature shapes before stacking:\")\nfor i, feat in enumerate(features_to_stack):\n    print(f\"Feature {i} shape: {feat.shape}\")\n\n# Combine all the feature matrices\nfinal_features = hstack(features_to_stack)\n\nprint(f\"\\nFinal combined features shape: {final_features.shape}\")\n\n# Convert to DataFrame and save\nX_final = pd.DataFrame(final_features.toarray())\n#X_final.to_csv(\"X_final_step_by_step.csv\", index=False)\n#print(\"\\nFeatures saved to 'X_final_step_by_step.csv'\")","metadata":{"execution":{"iopub.status.busy":"2025-09-20T10:32:30.460240Z","iopub.execute_input":"2025-09-20T10:32:30.460473Z","iopub.status.idle":"2025-09-20T10:33:24.040551Z","shell.execute_reply.started":"2025-09-20T10:32:30.460456Z","shell.execute_reply":"2025-09-20T10:33:24.039659Z"}}},{"cell_type":"code","source":"embedded_df","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#feature_selection = SelectKBest(score_func = chi2, k=6)\nfrom sklearn.feature_selection import SelectKBest, f_classif\n\nfeature_selection = SelectKBest(score_func=f_classif, k=6)\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"embedded_df.to_csv(\"X_final_step_by_step.csv\")","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"model = XGBClassifier(\n    objective=\"multi:softprob\",  \n    num_class=3,                  \n    eval_metric=\"mlogloss\",       \n    n_estimators=300,\n    learning_rate=0.1,\n    max_depth=6,\n    random_state=42\n)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X_final=pd.read_csv(\"X_final_step_by_step.csv\")\nX_final.columns = [\"drop_col\",\n    \"raw_sim_a\", \"raw_sim_b\",\n    \"mean_sim_a\", \"mean_sim_b\",\n    \"median_sim_a\", \"median_sim_b\",\n    \"tfidf_mean_sim_a\", \"tfidf_mean_sim_b\",\n    \"tfidf_median_sim_a\", \"tfidf_median_sim_b\"\n]\n\ny_final=y_train","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X_final.drop(columns=[\"drop_col\"],inplace=True)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X_final[['commword a','commword b']]=common_words_features","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X_final[X_train.columns]=X_train.values","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X_final['y-train']=y_train","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X_final","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"from sklearn.feature_extraction.text import TfidfVectorizer\n\n# Load the embedded features DataFrame\nembedded_df = pd.read_pickle(\"embedded_features.pkl.chunk_0.pkl\")\n\n# Extract the text from the prompt embeddings\ntexts = [x['text'] for x in embedded_df['prompt_embed']]\n\n# Fit TF-IDF vectorizer\nvectorizer = TfidfVectorizer()\nvectorizer.fit(texts)\n\n# Identify rows with all-zero TF-IDF weights\nzero_weight_rows = []\nfor i, text in enumerate(texts):\n    tfidf_vector = vectorizer.transform([text]).toarray()[0]\n    if np.sum(tfidf_vector) == 0:\n        tokens = vectorizer.build_tokenizer()(text.lower())\n        missing_tokens = [t for t in tokens if t not in vectorizer.vocabulary_]\n        zero_weight_rows.append({\n            \"index\": i,\n            \"text\": text,\n            \"tokens\": tokens,\n            \"missing_tokens\": missing_tokens\n        })\n\n# Print results\nprint(f\"Found {len(zero_weight_rows)} rows with all zero TF-IDF weights.\\n\")\nfor row in zero_weight_rows[:5]:  # Show only first 5 for brevity\n    print(f\"Row {row['index']}\\nText: {row['text']}\\nTokens: {row['tokens']}\\nMissing from vocab: {row['missing_tokens']}\\n\")\n","metadata":{"execution":{"iopub.status.busy":"2025-09-20T10:46:47.396503Z","iopub.execute_input":"2025-09-20T10:46:47.396668Z","iopub.status.idle":"2025-09-20T10:46:47.431356Z","shell.execute_reply.started":"2025-09-20T10:46:47.396655Z","shell.execute_reply":"2025-09-20T10:46:47.430360Z"}}},{"cell_type":"code","source":"\n# Load the original training data (first 10,000 rows as used in the notebook)\ndf_train = pd.read_csv(\"/kaggle/input/llm-classification-finetuning/train.csv\").head(10000)\n\n# Select TF-IDF weighted embedding columns (columns 6 to 9)\ntfidf_cols = X_final.iloc[:, 6:10]\n\n# Identify rows where all TF-IDF columns are zero\nzero_mask = (tfidf_cols == 0).all(axis=1)\nzero_indices = zero_mask[zero_mask].index\n\n# Show corresponding prompt text from df_train\nzero_prompts = df_train.loc[zero_indices, \"prompt\"]\n\n# Report\nprint(f\"Found {len(zero_prompts)} rows where all TF-IDF weighted embedding columns are zero.\\n\")\nprint(\"First few prompt examples:\")\nprint(zero_prompts.head())\n","metadata":{"trusted":true,"jupyter":{"source_hidden":true}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.model_selection import cross_val_score\nX_final_run = X_final[[\n    \"raw_sim_a\", \"raw_sim_b\",\n    \"mean_sim_a\", \"mean_sim_b\",\n    \"median_sim_a\", \"median_sim_b\",\n    \"tfidf_mean_sim_a\", \"tfidf_mean_sim_b\",\n    \"tfidf_median_sim_a\", \"tfidf_median_sim_b\",\n    \"commword a\", \"commword b\"\n]]\n\nscores = cross_val_score(model, X_final_run, y_final, cv=3, scoring=\"accuracy\")\nprint(\"Cross-validated Accuracy:\", scores.mean())\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"model.fit(X_final_run, y_final)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df_test[\"prompt_clean\"] = df_test[\"prompt\"].apply(clean_text_for_common_words)\ndf_test[\"response_a_clean\"] = df_test[\"response_a\"].apply(clean_text_for_common_words)\ndf_test[\"response_b_clean\"] = df_test[\"response_b\"].apply(clean_text_for_common_words)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}
{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":86518,"databundleVersionId":9809560,"sourceType":"competition"},{"sourceId":205013,"sourceType":"modelInstanceVersion","modelInstanceId":4686,"modelId":2820}],"dockerImageVersionId":31090,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np \nimport pandas as pd \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.feature_selection import SelectKBest, chi2\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import cross_val_score\n\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","metadata":{"_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","execution":{"iopub.status.busy":"2025-09-18T13:06:30.132959Z","iopub.execute_input":"2025-09-18T13:06:30.133591Z","iopub.status.idle":"2025-09-18T13:06:30.143247Z","shell.execute_reply.started":"2025-09-18T13:06:30.133556Z","shell.execute_reply":"2025-09-18T13:06:30.142513Z"},"trusted":true},"outputs":[{"name":"stdout","text":"/kaggle/input/deberta_v3/keras/deberta_v3_base_en/3/config.json\n/kaggle/input/deberta_v3/keras/deberta_v3_base_en/3/tokenizer.json\n/kaggle/input/deberta_v3/keras/deberta_v3_base_en/3/metadata.json\n/kaggle/input/deberta_v3/keras/deberta_v3_base_en/3/model.weights.h5\n/kaggle/input/deberta_v3/keras/deberta_v3_base_en/3/assets/tokenizer/vocabulary.spm\n/kaggle/input/llm-classification-finetuning/sample_submission.csv\n/kaggle/input/llm-classification-finetuning/train.csv\n/kaggle/input/llm-classification-finetuning/test.csv\n","output_type":"stream"}],"execution_count":6},{"cell_type":"code","source":"\n\n#!pip install -q sentence-transformers\n\nfrom sentence_transformers import SentenceTransformer\n\n#model = SentenceTransformer(\"all-mpnet-base-v2\")\n","metadata":{"execution":{"iopub.status.busy":"2025-09-18T13:06:30.144474Z","iopub.execute_input":"2025-09-18T13:06:30.144746Z","iopub.status.idle":"2025-09-18T13:06:30.214162Z","shell.execute_reply.started":"2025-09-18T13:06:30.144722Z","shell.execute_reply":"2025-09-18T13:06:30.213421Z"},"trusted":true},"outputs":[],"execution_count":7},{"cell_type":"code","source":"\n#model.save(\"/kaggle/working/all-mpnet-base-v2\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-18T13:06:30.214856Z","iopub.execute_input":"2025-09-18T13:06:30.215088Z","iopub.status.idle":"2025-09-18T13:06:30.227544Z","shell.execute_reply.started":"2025-09-18T13:06:30.215070Z","shell.execute_reply":"2025-09-18T13:06:30.226864Z"}},"outputs":[],"execution_count":8},{"cell_type":"code","source":"from transformers import AutoModel, AutoTokenizer\n\n#tokenizer = AutoTokenizer.from_pretrained(\"/kaggle/input/qwen-llm\")\n#model = AutoModel.from_pretrained(\"/kaggle/input/qwen-llm\")\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-18T13:06:30.229084Z","iopub.execute_input":"2025-09-18T13:06:30.229360Z","iopub.status.idle":"2025-09-18T13:06:30.242214Z","shell.execute_reply.started":"2025-09-18T13:06:30.229343Z","shell.execute_reply":"2025-09-18T13:06:30.241521Z"}},"outputs":[],"execution_count":9},{"cell_type":"code","source":"submission_test = pd.read_csv(\"/kaggle/input/llm-classification-finetuning/sample_submission.csv\")\nsubmission_test","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-18T13:06:30.242998Z","iopub.execute_input":"2025-09-18T13:06:30.243321Z","iopub.status.idle":"2025-09-18T13:06:30.282489Z","shell.execute_reply.started":"2025-09-18T13:06:30.243298Z","shell.execute_reply":"2025-09-18T13:06:30.281636Z"}},"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"        id  winner_model_a  winner_model_b  winner_tie\n0   136060        0.333333        0.333333    0.333333\n1   211333        0.333333        0.333333    0.333333\n2  1233961        0.333333        0.333333    0.333333","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>winner_model_a</th>\n      <th>winner_model_b</th>\n      <th>winner_tie</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>136060</td>\n      <td>0.333333</td>\n      <td>0.333333</td>\n      <td>0.333333</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>211333</td>\n      <td>0.333333</td>\n      <td>0.333333</td>\n      <td>0.333333</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1233961</td>\n      <td>0.333333</td>\n      <td>0.333333</td>\n      <td>0.333333</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":10},{"cell_type":"code","source":"df_train = pd.read_csv(\"/kaggle/input/llm-classification-finetuning/train.csv\")\ndf_train","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-18T13:06:30.283252Z","iopub.execute_input":"2025-09-18T13:06:30.283552Z","iopub.status.idle":"2025-09-18T13:06:34.418567Z","shell.execute_reply.started":"2025-09-18T13:06:30.283531Z","shell.execute_reply":"2025-09-18T13:06:34.417809Z"}},"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"               id             model_a              model_b  \\\n0           30192  gpt-4-1106-preview           gpt-4-0613   \n1           53567           koala-13b           gpt-4-0613   \n2           65089  gpt-3.5-turbo-0613       mistral-medium   \n3           96401    llama-2-13b-chat  mistral-7b-instruct   \n4          198779           koala-13b   gpt-3.5-turbo-0314   \n...           ...                 ...                  ...   \n57472  4294656694          gpt-4-0613             claude-1   \n57473  4294692063          claude-2.0     llama-2-13b-chat   \n57474  4294710549            claude-1           alpaca-13b   \n57475  4294899228              palm-2       tulu-2-dpo-70b   \n57476  4294947231  gemini-pro-dev-api   gpt-4-1106-preview   \n\n                                                  prompt  \\\n0      [\"Is it morally right to try to have a certain...   \n1      [\"What is the difference between marriage lice...   \n2      [\"explain function calling. how would you call...   \n3      [\"How can I create a test set for a very rare ...   \n4      [\"What is the best way to travel from Tel-Aviv...   \n...                                                  ...   \n57472  [\"A simple mnemonic for \\u03c0:\\n\\\"How I wish ...   \n57473  [\"In python, implement a naive Bayes with gaus...   \n57474  [\"is it unethical to work on building weapons?...   \n57475  [\"If a bait contains 0,0025% bromadiolon then ...   \n57476  [\"three kids eat three apples in three days, h...   \n\n                                              response_a  \\\n0      [\"The question of whether it is morally right ...   \n1      [\"A marriage license is a legal document that ...   \n2      [\"Function calling is the process of invoking ...   \n3      [\"Creating a test set for a very rare category...   \n4      [\"The best way to travel from Tel Aviv to Jeru...   \n...                                                  ...   \n57472  [\"Sure, let's break it down:\\n\\n1. \\\"How\\\" has...   \n57473  [\"Here is an implementation of a naive Bayes c...   \n57474  [\"Working on weapons technology raises some et...   \n57475  [\"Bromadiolone is a rodenticide which is most ...   \n57476                                      [\"27 apples\"]   \n\n                                              response_b  winner_model_a  \\\n0      [\"As an AI, I don't have personal beliefs or o...               1   \n1      [\"A marriage license and a marriage certificat...               0   \n2      [\"Function calling is the process of invoking ...               0   \n3      [\"When building a classifier for a very rare c...               1   \n4      [\"The best way to travel from Tel-Aviv to Jeru...               0   \n...                                                  ...             ...   \n57472  [\"Here is how that mnemonic represents the dig...               1   \n57473  [\"Sure! Here's an implementation of a naive Ba...               1   \n57474  [\"It depends on the context. Weapons can be us...               1   \n57475  [\"As an AI language model, I do not promote or...               0   \n57476  [\"If three kids eat three apples in three days...               1   \n\n       winner_model_b  winner_tie  \n0                   0           0  \n1                   1           0  \n2                   0           1  \n3                   0           0  \n4                   1           0  \n...               ...         ...  \n57472               0           0  \n57473               0           0  \n57474               0           0  \n57475               1           0  \n57476               0           0  \n\n[57477 rows x 9 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>model_a</th>\n      <th>model_b</th>\n      <th>prompt</th>\n      <th>response_a</th>\n      <th>response_b</th>\n      <th>winner_model_a</th>\n      <th>winner_model_b</th>\n      <th>winner_tie</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>30192</td>\n      <td>gpt-4-1106-preview</td>\n      <td>gpt-4-0613</td>\n      <td>[\"Is it morally right to try to have a certain...</td>\n      <td>[\"The question of whether it is morally right ...</td>\n      <td>[\"As an AI, I don't have personal beliefs or o...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>53567</td>\n      <td>koala-13b</td>\n      <td>gpt-4-0613</td>\n      <td>[\"What is the difference between marriage lice...</td>\n      <td>[\"A marriage license is a legal document that ...</td>\n      <td>[\"A marriage license and a marriage certificat...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>65089</td>\n      <td>gpt-3.5-turbo-0613</td>\n      <td>mistral-medium</td>\n      <td>[\"explain function calling. how would you call...</td>\n      <td>[\"Function calling is the process of invoking ...</td>\n      <td>[\"Function calling is the process of invoking ...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>96401</td>\n      <td>llama-2-13b-chat</td>\n      <td>mistral-7b-instruct</td>\n      <td>[\"How can I create a test set for a very rare ...</td>\n      <td>[\"Creating a test set for a very rare category...</td>\n      <td>[\"When building a classifier for a very rare c...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>198779</td>\n      <td>koala-13b</td>\n      <td>gpt-3.5-turbo-0314</td>\n      <td>[\"What is the best way to travel from Tel-Aviv...</td>\n      <td>[\"The best way to travel from Tel Aviv to Jeru...</td>\n      <td>[\"The best way to travel from Tel-Aviv to Jeru...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>57472</th>\n      <td>4294656694</td>\n      <td>gpt-4-0613</td>\n      <td>claude-1</td>\n      <td>[\"A simple mnemonic for \\u03c0:\\n\\\"How I wish ...</td>\n      <td>[\"Sure, let's break it down:\\n\\n1. \\\"How\\\" has...</td>\n      <td>[\"Here is how that mnemonic represents the dig...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>57473</th>\n      <td>4294692063</td>\n      <td>claude-2.0</td>\n      <td>llama-2-13b-chat</td>\n      <td>[\"In python, implement a naive Bayes with gaus...</td>\n      <td>[\"Here is an implementation of a naive Bayes c...</td>\n      <td>[\"Sure! Here's an implementation of a naive Ba...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>57474</th>\n      <td>4294710549</td>\n      <td>claude-1</td>\n      <td>alpaca-13b</td>\n      <td>[\"is it unethical to work on building weapons?...</td>\n      <td>[\"Working on weapons technology raises some et...</td>\n      <td>[\"It depends on the context. Weapons can be us...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>57475</th>\n      <td>4294899228</td>\n      <td>palm-2</td>\n      <td>tulu-2-dpo-70b</td>\n      <td>[\"If a bait contains 0,0025% bromadiolon then ...</td>\n      <td>[\"Bromadiolone is a rodenticide which is most ...</td>\n      <td>[\"As an AI language model, I do not promote or...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>57476</th>\n      <td>4294947231</td>\n      <td>gemini-pro-dev-api</td>\n      <td>gpt-4-1106-preview</td>\n      <td>[\"three kids eat three apples in three days, h...</td>\n      <td>[\"27 apples\"]</td>\n      <td>[\"If three kids eat three apples in three days...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>57477 rows × 9 columns</p>\n</div>"},"metadata":{}}],"execution_count":11},{"cell_type":"code","source":"df_test = pd.read_csv(\"/kaggle/input/llm-classification-finetuning/test.csv\")\ndf_test","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-18T13:06:34.419398Z","iopub.execute_input":"2025-09-18T13:06:34.419628Z","iopub.status.idle":"2025-09-18T13:06:34.432452Z","shell.execute_reply.started":"2025-09-18T13:06:34.419602Z","shell.execute_reply":"2025-09-18T13:06:34.431714Z"}},"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"        id                                             prompt  \\\n0   136060  [\"I have three oranges today, I ate an orange ...   \n1   211333  [\"You are a mediator in a heated political deb...   \n2  1233961  [\"How to initialize the classification head wh...   \n\n                                          response_a  \\\n0                    [\"You have two oranges today.\"]   \n1  [\"Thank you for sharing the details of the sit...   \n2  [\"When you want to initialize the classificati...   \n\n                                          response_b  \n0  [\"You still have three oranges. Eating an oran...  \n1  [\"Mr Reddy and Ms Blue both have valid points ...  \n2  [\"To initialize the classification head when p...  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>prompt</th>\n      <th>response_a</th>\n      <th>response_b</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>136060</td>\n      <td>[\"I have three oranges today, I ate an orange ...</td>\n      <td>[\"You have two oranges today.\"]</td>\n      <td>[\"You still have three oranges. Eating an oran...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>211333</td>\n      <td>[\"You are a mediator in a heated political deb...</td>\n      <td>[\"Thank you for sharing the details of the sit...</td>\n      <td>[\"Mr Reddy and Ms Blue both have valid points ...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1233961</td>\n      <td>[\"How to initialize the classification head wh...</td>\n      <td>[\"When you want to initialize the classificati...</td>\n      <td>[\"To initialize the classification head when p...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":12},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"df_train.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-18T13:06:34.433274Z","iopub.execute_input":"2025-09-18T13:06:34.434150Z","iopub.status.idle":"2025-09-18T13:06:34.520638Z","shell.execute_reply.started":"2025-09-18T13:06:34.434130Z","shell.execute_reply":"2025-09-18T13:06:34.519811Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 57477 entries, 0 to 57476\nData columns (total 9 columns):\n #   Column          Non-Null Count  Dtype \n---  ------          --------------  ----- \n 0   id              57477 non-null  int64 \n 1   model_a         57477 non-null  object\n 2   model_b         57477 non-null  object\n 3   prompt          57477 non-null  object\n 4   response_a      57477 non-null  object\n 5   response_b      57477 non-null  object\n 6   winner_model_a  57477 non-null  int64 \n 7   winner_model_b  57477 non-null  int64 \n 8   winner_tie      57477 non-null  int64 \ndtypes: int64(4), object(5)\nmemory usage: 3.9+ MB\n","output_type":"stream"}],"execution_count":13},{"cell_type":"code","source":"df_train=df_train.head(100\n\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-18T13:06:34.521415Z","iopub.execute_input":"2025-09-18T13:06:34.521733Z","iopub.status.idle":"2025-09-18T13:06:34.526495Z","shell.execute_reply.started":"2025-09-18T13:06:34.521708Z","shell.execute_reply":"2025-09-18T13:06:34.525655Z"}},"outputs":[],"execution_count":14},{"cell_type":"code","source":"df_train","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-18T13:06:34.529602Z","iopub.execute_input":"2025-09-18T13:06:34.530173Z","iopub.status.idle":"2025-09-18T13:06:34.547553Z","shell.execute_reply.started":"2025-09-18T13:06:34.530150Z","shell.execute_reply":"2025-09-18T13:06:34.546799Z"}},"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"         id             model_a              model_b  \\\n0     30192  gpt-4-1106-preview           gpt-4-0613   \n1     53567           koala-13b           gpt-4-0613   \n2     65089  gpt-3.5-turbo-0613       mistral-medium   \n3     96401    llama-2-13b-chat  mistral-7b-instruct   \n4    198779           koala-13b   gpt-3.5-turbo-0314   \n..      ...                 ...                  ...   \n95  6831350     llama-2-7b-chat       zephyr-7b-beta   \n96  6853605     pplx-70b-online           gpt-4-0314   \n97  7021095  gpt-4-1106-preview           vicuna-13b   \n98  7047857  gpt-4-1106-preview           claude-2.1   \n99  7271889          gpt-4-0613             claude-1   \n\n                                               prompt  \\\n0   [\"Is it morally right to try to have a certain...   \n1   [\"What is the difference between marriage lice...   \n2   [\"explain function calling. how would you call...   \n3   [\"How can I create a test set for a very rare ...   \n4   [\"What is the best way to travel from Tel-Aviv...   \n..                                                ...   \n95  [\"What inspired Leonardo da Vinci to create hi...   \n96                       [\"What's funnier than 420?\"]   \n97  [\"how can I get minecraft java to run better? ...   \n98  [\"If you were a type of cheese, which one woul...   \n99  [\"If 3 + 4 = 19\\n5 + 6 = 41\\n2 + 8 = 66\\n5 + 1...   \n\n                                           response_a  \\\n0   [\"The question of whether it is morally right ...   \n1   [\"A marriage license is a legal document that ...   \n2   [\"Function calling is the process of invoking ...   \n3   [\"Creating a test set for a very rare category...   \n4   [\"The best way to travel from Tel Aviv to Jeru...   \n..                                                ...   \n95  [\"Leonardo da Vinci's \\\"Mona Lisa\\\" is one of ...   \n96  [\"The question \\\"What's funnier than 420?\\\" is...   \n97  [\"Improving the performance of Minecraft Java ...   \n98  [\"If I were to liken myself to a type of chees...   \n99  [\"The equations you've provided don't follow s...   \n\n                                           response_b  winner_model_a  \\\n0   [\"As an AI, I don't have personal beliefs or o...               1   \n1   [\"A marriage license and a marriage certificat...               0   \n2   [\"Function calling is the process of invoking ...               0   \n3   [\"When building a classifier for a very rare c...               1   \n4   [\"The best way to travel from Tel-Aviv to Jeru...               0   \n..                                                ...             ...   \n95  [\"The exact inspiration behind Leonardo da Vin...               1   \n96  [\"Funnier than 420 could be the number \\\"69\\\" ...               0   \n97  [\"Here are some tips to improve the performanc...               0   \n98  [\"I'm an AI assistant without personal prefere...               1   \n99  [\"Okay, here is the step-by-step reasoning:\\n\\...               0   \n\n    winner_model_b  winner_tie  \n0                0           0  \n1                1           0  \n2                0           1  \n3                0           0  \n4                1           0  \n..             ...         ...  \n95               0           0  \n96               1           0  \n97               0           1  \n98               0           0  \n99               1           0  \n\n[100 rows x 9 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>model_a</th>\n      <th>model_b</th>\n      <th>prompt</th>\n      <th>response_a</th>\n      <th>response_b</th>\n      <th>winner_model_a</th>\n      <th>winner_model_b</th>\n      <th>winner_tie</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>30192</td>\n      <td>gpt-4-1106-preview</td>\n      <td>gpt-4-0613</td>\n      <td>[\"Is it morally right to try to have a certain...</td>\n      <td>[\"The question of whether it is morally right ...</td>\n      <td>[\"As an AI, I don't have personal beliefs or o...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>53567</td>\n      <td>koala-13b</td>\n      <td>gpt-4-0613</td>\n      <td>[\"What is the difference between marriage lice...</td>\n      <td>[\"A marriage license is a legal document that ...</td>\n      <td>[\"A marriage license and a marriage certificat...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>65089</td>\n      <td>gpt-3.5-turbo-0613</td>\n      <td>mistral-medium</td>\n      <td>[\"explain function calling. how would you call...</td>\n      <td>[\"Function calling is the process of invoking ...</td>\n      <td>[\"Function calling is the process of invoking ...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>96401</td>\n      <td>llama-2-13b-chat</td>\n      <td>mistral-7b-instruct</td>\n      <td>[\"How can I create a test set for a very rare ...</td>\n      <td>[\"Creating a test set for a very rare category...</td>\n      <td>[\"When building a classifier for a very rare c...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>198779</td>\n      <td>koala-13b</td>\n      <td>gpt-3.5-turbo-0314</td>\n      <td>[\"What is the best way to travel from Tel-Aviv...</td>\n      <td>[\"The best way to travel from Tel Aviv to Jeru...</td>\n      <td>[\"The best way to travel from Tel-Aviv to Jeru...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>95</th>\n      <td>6831350</td>\n      <td>llama-2-7b-chat</td>\n      <td>zephyr-7b-beta</td>\n      <td>[\"What inspired Leonardo da Vinci to create hi...</td>\n      <td>[\"Leonardo da Vinci's \\\"Mona Lisa\\\" is one of ...</td>\n      <td>[\"The exact inspiration behind Leonardo da Vin...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>96</th>\n      <td>6853605</td>\n      <td>pplx-70b-online</td>\n      <td>gpt-4-0314</td>\n      <td>[\"What's funnier than 420?\"]</td>\n      <td>[\"The question \\\"What's funnier than 420?\\\" is...</td>\n      <td>[\"Funnier than 420 could be the number \\\"69\\\" ...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>97</th>\n      <td>7021095</td>\n      <td>gpt-4-1106-preview</td>\n      <td>vicuna-13b</td>\n      <td>[\"how can I get minecraft java to run better? ...</td>\n      <td>[\"Improving the performance of Minecraft Java ...</td>\n      <td>[\"Here are some tips to improve the performanc...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>98</th>\n      <td>7047857</td>\n      <td>gpt-4-1106-preview</td>\n      <td>claude-2.1</td>\n      <td>[\"If you were a type of cheese, which one woul...</td>\n      <td>[\"If I were to liken myself to a type of chees...</td>\n      <td>[\"I'm an AI assistant without personal prefere...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>99</th>\n      <td>7271889</td>\n      <td>gpt-4-0613</td>\n      <td>claude-1</td>\n      <td>[\"If 3 + 4 = 19\\n5 + 6 = 41\\n2 + 8 = 66\\n5 + 1...</td>\n      <td>[\"The equations you've provided don't follow s...</td>\n      <td>[\"Okay, here is the step-by-step reasoning:\\n\\...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>100 rows × 9 columns</p>\n</div>"},"metadata":{}}],"execution_count":15},{"cell_type":"code","source":"df_train.isnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-18T13:06:34.548221Z","iopub.execute_input":"2025-09-18T13:06:34.548481Z","iopub.status.idle":"2025-09-18T13:06:34.563398Z","shell.execute_reply.started":"2025-09-18T13:06:34.548461Z","shell.execute_reply":"2025-09-18T13:06:34.562675Z"}},"outputs":[{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"id                0\nmodel_a           0\nmodel_b           0\nprompt            0\nresponse_a        0\nresponse_b        0\nwinner_model_a    0\nwinner_model_b    0\nwinner_tie        0\ndtype: int64"},"metadata":{}}],"execution_count":16},{"cell_type":"code","source":"X = df_train.drop(['model_a', 'model_b', 'winner_model_a', 'winner_model_b', 'winner_tie'], axis = 1)\nX","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-18T13:06:34.564324Z","iopub.execute_input":"2025-09-18T13:06:34.564624Z","iopub.status.idle":"2025-09-18T13:06:34.586720Z","shell.execute_reply.started":"2025-09-18T13:06:34.564608Z","shell.execute_reply":"2025-09-18T13:06:34.585997Z"}},"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"         id                                             prompt  \\\n0     30192  [\"Is it morally right to try to have a certain...   \n1     53567  [\"What is the difference between marriage lice...   \n2     65089  [\"explain function calling. how would you call...   \n3     96401  [\"How can I create a test set for a very rare ...   \n4    198779  [\"What is the best way to travel from Tel-Aviv...   \n..      ...                                                ...   \n95  6831350  [\"What inspired Leonardo da Vinci to create hi...   \n96  6853605                       [\"What's funnier than 420?\"]   \n97  7021095  [\"how can I get minecraft java to run better? ...   \n98  7047857  [\"If you were a type of cheese, which one woul...   \n99  7271889  [\"If 3 + 4 = 19\\n5 + 6 = 41\\n2 + 8 = 66\\n5 + 1...   \n\n                                           response_a  \\\n0   [\"The question of whether it is morally right ...   \n1   [\"A marriage license is a legal document that ...   \n2   [\"Function calling is the process of invoking ...   \n3   [\"Creating a test set for a very rare category...   \n4   [\"The best way to travel from Tel Aviv to Jeru...   \n..                                                ...   \n95  [\"Leonardo da Vinci's \\\"Mona Lisa\\\" is one of ...   \n96  [\"The question \\\"What's funnier than 420?\\\" is...   \n97  [\"Improving the performance of Minecraft Java ...   \n98  [\"If I were to liken myself to a type of chees...   \n99  [\"The equations you've provided don't follow s...   \n\n                                           response_b  \n0   [\"As an AI, I don't have personal beliefs or o...  \n1   [\"A marriage license and a marriage certificat...  \n2   [\"Function calling is the process of invoking ...  \n3   [\"When building a classifier for a very rare c...  \n4   [\"The best way to travel from Tel-Aviv to Jeru...  \n..                                                ...  \n95  [\"The exact inspiration behind Leonardo da Vin...  \n96  [\"Funnier than 420 could be the number \\\"69\\\" ...  \n97  [\"Here are some tips to improve the performanc...  \n98  [\"I'm an AI assistant without personal prefere...  \n99  [\"Okay, here is the step-by-step reasoning:\\n\\...  \n\n[100 rows x 4 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>prompt</th>\n      <th>response_a</th>\n      <th>response_b</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>30192</td>\n      <td>[\"Is it morally right to try to have a certain...</td>\n      <td>[\"The question of whether it is morally right ...</td>\n      <td>[\"As an AI, I don't have personal beliefs or o...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>53567</td>\n      <td>[\"What is the difference between marriage lice...</td>\n      <td>[\"A marriage license is a legal document that ...</td>\n      <td>[\"A marriage license and a marriage certificat...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>65089</td>\n      <td>[\"explain function calling. how would you call...</td>\n      <td>[\"Function calling is the process of invoking ...</td>\n      <td>[\"Function calling is the process of invoking ...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>96401</td>\n      <td>[\"How can I create a test set for a very rare ...</td>\n      <td>[\"Creating a test set for a very rare category...</td>\n      <td>[\"When building a classifier for a very rare c...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>198779</td>\n      <td>[\"What is the best way to travel from Tel-Aviv...</td>\n      <td>[\"The best way to travel from Tel Aviv to Jeru...</td>\n      <td>[\"The best way to travel from Tel-Aviv to Jeru...</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>95</th>\n      <td>6831350</td>\n      <td>[\"What inspired Leonardo da Vinci to create hi...</td>\n      <td>[\"Leonardo da Vinci's \\\"Mona Lisa\\\" is one of ...</td>\n      <td>[\"The exact inspiration behind Leonardo da Vin...</td>\n    </tr>\n    <tr>\n      <th>96</th>\n      <td>6853605</td>\n      <td>[\"What's funnier than 420?\"]</td>\n      <td>[\"The question \\\"What's funnier than 420?\\\" is...</td>\n      <td>[\"Funnier than 420 could be the number \\\"69\\\" ...</td>\n    </tr>\n    <tr>\n      <th>97</th>\n      <td>7021095</td>\n      <td>[\"how can I get minecraft java to run better? ...</td>\n      <td>[\"Improving the performance of Minecraft Java ...</td>\n      <td>[\"Here are some tips to improve the performanc...</td>\n    </tr>\n    <tr>\n      <th>98</th>\n      <td>7047857</td>\n      <td>[\"If you were a type of cheese, which one woul...</td>\n      <td>[\"If I were to liken myself to a type of chees...</td>\n      <td>[\"I'm an AI assistant without personal prefere...</td>\n    </tr>\n    <tr>\n      <th>99</th>\n      <td>7271889</td>\n      <td>[\"If 3 + 4 = 19\\n5 + 6 = 41\\n2 + 8 = 66\\n5 + 1...</td>\n      <td>[\"The equations you've provided don't follow s...</td>\n      <td>[\"Okay, here is the step-by-step reasoning:\\n\\...</td>\n    </tr>\n  </tbody>\n</table>\n<p>100 rows × 4 columns</p>\n</div>"},"metadata":{}}],"execution_count":17},{"cell_type":"code","source":"y = df_train[['winner_model_a', 'winner_model_b', 'winner_tie']].values\n\ny = np.argmax(y, axis=1)\ny","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-18T13:06:34.587681Z","iopub.execute_input":"2025-09-18T13:06:34.587954Z","iopub.status.idle":"2025-09-18T13:06:34.602121Z","shell.execute_reply.started":"2025-09-18T13:06:34.587932Z","shell.execute_reply":"2025-09-18T13:06:34.601398Z"}},"outputs":[{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"array([0, 1, 2, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 2, 1, 0, 1, 2, 1, 2, 1,\n       2, 2, 2, 2, 2, 0, 1, 2, 0, 2, 1, 0, 0, 1, 0, 1, 2, 2, 0, 2, 0, 1,\n       1, 0, 1, 2, 2, 1, 2, 2, 0, 2, 2, 0, 2, 2, 2, 2, 1, 0, 0, 2, 2, 1,\n       1, 2, 2, 0, 0, 1, 2, 2, 1, 2, 0, 1, 0, 0, 0, 2, 0, 1, 1, 2, 0, 1,\n       0, 1, 2, 0, 2, 1, 0, 0, 1, 2, 0, 1])"},"metadata":{}}],"execution_count":18},{"cell_type":"code","source":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size =0.2, random_state = 42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-18T13:06:34.602847Z","iopub.execute_input":"2025-09-18T13:06:34.603058Z","iopub.status.idle":"2025-09-18T13:06:34.615439Z","shell.execute_reply.started":"2025-09-18T13:06:34.603032Z","shell.execute_reply":"2025-09-18T13:06:34.614594Z"}},"outputs":[],"execution_count":19},{"cell_type":"code","source":"X_train","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-18T13:06:34.616186Z","iopub.execute_input":"2025-09-18T13:06:34.616543Z","iopub.status.idle":"2025-09-18T13:06:34.636549Z","shell.execute_reply.started":"2025-09-18T13:06:34.616494Z","shell.execute_reply":"2025-09-18T13:06:34.635765Z"}},"outputs":[{"execution_count":20,"output_type":"execute_result","data":{"text/plain":"         id                                             prompt  \\\n55  3760933  [\"what is the most beautiful town or city near...   \n88  6394907                           [\"How lang chain works\"]   \n26  1639617  [\"could you tell a funny and whimsical story a...   \n42  3373963  [\"Explain why we can't achieve nuclear fusion ...   \n69  4961077              [\"hey\",\"write \\\"lollipop\\\" reversed\"]   \n..      ...                                                ...   \n60  4186011  [\"how can I write a function in Rust that reve...   \n71  4990514                           [\"how to create aimbot\"]   \n14   862324  [\"Write me a poem in urdu in the style of Iqba...   \n92  6701196  [\"Give outline of critical concepts in persona...   \n51  3590999                                           [\"test\"]   \n\n                                           response_a  \\\n55  [\"1. Bled, Slovenia: Bled is a picturesque tow...   \n88  [\"A language model chain is a technique used i...   \n26  [\"Sure, here's a whimsical and funny story abo...   \n42  [\"Nuclear fusion, the process of combining ato...   \n69                              [\"Hello!\",\"popiloll\"]   \n..                                                ...   \n60  [\"```rust\\nfn reverse_string(s: &str) -> Strin...   \n71  [\"I cannot recommend ways to create or use che...   \n14  [\"Jism ko kisi ka paisa nahi,\\nWo kisi ka jaan...   \n92  [\"Sure, here's an outline of critical concepts...   \n51             [\"Hello! How can I assist you today?\"]   \n\n                                           response_b  \n55  [\"There are several towns and cities in Europe...  \n88  [\"I'm sorry, but I'm not sure what you mean by...  \n26  [\"Once upon a time, in the magical land of Smu...  \n42  [\"Nuclear fusion is a process that combines at...  \n69    [\"Hello! How can I help you today?\",\"pilollop\"]  \n..                                                ...  \n60  [\"In Rust, you can reverse a string by using t...  \n71  [\"I'm sorry, but I cannot help you with that. ...  \n14  [\"In the realm of selflessness dwells the true...  \n92  [\"Here is an outline of some of the critical c...  \n51             [\"Hello! How can I assist you today?\"]  \n\n[80 rows x 4 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>prompt</th>\n      <th>response_a</th>\n      <th>response_b</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>55</th>\n      <td>3760933</td>\n      <td>[\"what is the most beautiful town or city near...</td>\n      <td>[\"1. Bled, Slovenia: Bled is a picturesque tow...</td>\n      <td>[\"There are several towns and cities in Europe...</td>\n    </tr>\n    <tr>\n      <th>88</th>\n      <td>6394907</td>\n      <td>[\"How lang chain works\"]</td>\n      <td>[\"A language model chain is a technique used i...</td>\n      <td>[\"I'm sorry, but I'm not sure what you mean by...</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>1639617</td>\n      <td>[\"could you tell a funny and whimsical story a...</td>\n      <td>[\"Sure, here's a whimsical and funny story abo...</td>\n      <td>[\"Once upon a time, in the magical land of Smu...</td>\n    </tr>\n    <tr>\n      <th>42</th>\n      <td>3373963</td>\n      <td>[\"Explain why we can't achieve nuclear fusion ...</td>\n      <td>[\"Nuclear fusion, the process of combining ato...</td>\n      <td>[\"Nuclear fusion is a process that combines at...</td>\n    </tr>\n    <tr>\n      <th>69</th>\n      <td>4961077</td>\n      <td>[\"hey\",\"write \\\"lollipop\\\" reversed\"]</td>\n      <td>[\"Hello!\",\"popiloll\"]</td>\n      <td>[\"Hello! How can I help you today?\",\"pilollop\"]</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>60</th>\n      <td>4186011</td>\n      <td>[\"how can I write a function in Rust that reve...</td>\n      <td>[\"```rust\\nfn reverse_string(s: &amp;str) -&gt; Strin...</td>\n      <td>[\"In Rust, you can reverse a string by using t...</td>\n    </tr>\n    <tr>\n      <th>71</th>\n      <td>4990514</td>\n      <td>[\"how to create aimbot\"]</td>\n      <td>[\"I cannot recommend ways to create or use che...</td>\n      <td>[\"I'm sorry, but I cannot help you with that. ...</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>862324</td>\n      <td>[\"Write me a poem in urdu in the style of Iqba...</td>\n      <td>[\"Jism ko kisi ka paisa nahi,\\nWo kisi ka jaan...</td>\n      <td>[\"In the realm of selflessness dwells the true...</td>\n    </tr>\n    <tr>\n      <th>92</th>\n      <td>6701196</td>\n      <td>[\"Give outline of critical concepts in persona...</td>\n      <td>[\"Sure, here's an outline of critical concepts...</td>\n      <td>[\"Here is an outline of some of the critical c...</td>\n    </tr>\n    <tr>\n      <th>51</th>\n      <td>3590999</td>\n      <td>[\"test\"]</td>\n      <td>[\"Hello! How can I assist you today?\"]</td>\n      <td>[\"Hello! How can I assist you today?\"]</td>\n    </tr>\n  </tbody>\n</table>\n<p>80 rows × 4 columns</p>\n</div>"},"metadata":{}}],"execution_count":20},{"cell_type":"code","source":"X_test","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-18T13:06:34.637330Z","iopub.execute_input":"2025-09-18T13:06:34.637956Z","iopub.status.idle":"2025-09-18T13:06:34.654939Z","shell.execute_reply.started":"2025-09-18T13:06:34.637933Z","shell.execute_reply":"2025-09-18T13:06:34.654175Z"}},"outputs":[{"execution_count":21,"output_type":"execute_result","data":{"text/plain":"         id                                             prompt  \\\n83  6058088  [\"why are there 16gb ram in phone? even though...   \n53  3643104  [\"Rick and Morty open a portal to the real wor...   \n70  4970917  [\"Why does tpm 2.0 provide the concept of mult...   \n45  3499263  [\"write the lyrics to a rap song about some du...   \n44  3475655  [\"Which of the following metals has the lowest...   \n39  3254113  [\"Can you help create Dan's thoughts as Liz ca...   \n22  1440765  [\"Can you explain what the Cypher Query Langua...   \n80  5717448                  [\"Write a haiku about underwear\"]   \n10   497862  [\"write a python function to upload all the fi...   \n0     30192  [\"Is it morally right to try to have a certain...   \n18   933555  [\"Mary has 6 others siblings named Monday, Tue...   \n30  1842252  [\"Estimate the number of dinosaur skeletons in...   \n73  5069186  [\"Why are there so many weebs in computer scie...   \n33  2298796                 [\"make a haiku on bacon the food\"]   \n90  6492528  [\"Which word doesn't belong?\\n\\nA.\\nApple\\n\\nB...   \n4    198779  [\"What is the best way to travel from Tel-Aviv...   \n76  5188727  [\"You are a SQL expert. \\nGiven an input quest...   \n77  5378146         [\"What is a Selective State Space Model?\"]   \n12   604575  [\"was the historical jesus a socialist\",\"was h...   \n31  2051408  [\"What\\u2019s the best prank to play on a frie...   \n\n                                           response_a  \\\n83  [\"There are several reasons why smartphones ha...   \n53  [\"Rick and Morty, the popular animated TV seri...   \n70  [\"TPM (Trusted Platform Module) 2.0 provides t...   \n45  [\"(Verse 1)\\nYo, let's take a minute, prepare ...   \n44  [\"The metal with the lowest melting point from...   \n39  [\"As Liz leads Dan to the room where he will r...   \n22  [\"The Cypher Query Language is a declarative l...   \n80  [\"Underwear snug fit,\\nSoft fabric against the...   \n10  [\"Sure, here's a Python function that uses the...   \n0   [\"The question of whether it is morally right ...   \n18  [\"Hello! I'm happy to help you with your quest...   \n30  [\"This is very difficult to estimate precisely...   \n73  [\"There is a common perception that many indiv...   \n33  [\"Crisp strips of delight,\\nSizzling dance, mo...   \n90  [\"Among the words Apple, Car, Orange and Banan...   \n4   [\"The best way to travel from Tel Aviv to Jeru...   \n76  [\"\\\"{\\\\n    \\\\\\\"thoughts\\\\\\\": \\\\\\\"You want to ...   \n77  [\"A Selective State Space Model is a type of s...   \n12  [\"The question of whether the historical Jesus...   \n31  [\"There are many types of pranks that can be p...   \n\n                                           response_b  \n83  [\"There are several reasons why smartphones of...  \n53  [\"INT. McBain's Garage - DAY\\n\\nRick and Morty...  \n70  [\"TPM 2.0 (Trusted Platform Module) provides t...  \n45  [\"Here's an attempt at some rap lyrics about a...  \n44  [\"Out of the options provided, cadmium (Cd) ha...  \n39  [\"As Liz begins to describe the details of the...  \n22  [\"Certainly! The Cypher Query Language, often ...  \n80  [\"Here is a haiku about underwear:\\n\\nCovering...  \n10  [\"Sure, here's an example function in Python t...  \n0   [\"As an AI, I don't have personal beliefs or o...  \n18      [\"The last child's name is likely Saturday.\"]  \n30  [\"Estimating the exact number of dinosaur skel...  \n73  [\"The term \\\"weeb\\\" is a derogatory slur that ...  \n33  [\"Here is a haiku about bacon:\\n\\nSizzling in ...  \n90  [\"Okay, let's analyze each of the words:\\n\\nAp...  \n4   [\"The best way to travel from Tel-Aviv to Jeru...  \n76  [\"{\\\\n  \\\"thoughts\\\": \\\"I will provide a query...  \n77  [\"A Selective State Space Model (SSSM) is a ty...  \n12  [\"The historical Jesus lived in a time and pla...  \n31  [\"It's important to remember that pranks can b...  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>prompt</th>\n      <th>response_a</th>\n      <th>response_b</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>83</th>\n      <td>6058088</td>\n      <td>[\"why are there 16gb ram in phone? even though...</td>\n      <td>[\"There are several reasons why smartphones ha...</td>\n      <td>[\"There are several reasons why smartphones of...</td>\n    </tr>\n    <tr>\n      <th>53</th>\n      <td>3643104</td>\n      <td>[\"Rick and Morty open a portal to the real wor...</td>\n      <td>[\"Rick and Morty, the popular animated TV seri...</td>\n      <td>[\"INT. McBain's Garage - DAY\\n\\nRick and Morty...</td>\n    </tr>\n    <tr>\n      <th>70</th>\n      <td>4970917</td>\n      <td>[\"Why does tpm 2.0 provide the concept of mult...</td>\n      <td>[\"TPM (Trusted Platform Module) 2.0 provides t...</td>\n      <td>[\"TPM 2.0 (Trusted Platform Module) provides t...</td>\n    </tr>\n    <tr>\n      <th>45</th>\n      <td>3499263</td>\n      <td>[\"write the lyrics to a rap song about some du...</td>\n      <td>[\"(Verse 1)\\nYo, let's take a minute, prepare ...</td>\n      <td>[\"Here's an attempt at some rap lyrics about a...</td>\n    </tr>\n    <tr>\n      <th>44</th>\n      <td>3475655</td>\n      <td>[\"Which of the following metals has the lowest...</td>\n      <td>[\"The metal with the lowest melting point from...</td>\n      <td>[\"Out of the options provided, cadmium (Cd) ha...</td>\n    </tr>\n    <tr>\n      <th>39</th>\n      <td>3254113</td>\n      <td>[\"Can you help create Dan's thoughts as Liz ca...</td>\n      <td>[\"As Liz leads Dan to the room where he will r...</td>\n      <td>[\"As Liz begins to describe the details of the...</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>1440765</td>\n      <td>[\"Can you explain what the Cypher Query Langua...</td>\n      <td>[\"The Cypher Query Language is a declarative l...</td>\n      <td>[\"Certainly! The Cypher Query Language, often ...</td>\n    </tr>\n    <tr>\n      <th>80</th>\n      <td>5717448</td>\n      <td>[\"Write a haiku about underwear\"]</td>\n      <td>[\"Underwear snug fit,\\nSoft fabric against the...</td>\n      <td>[\"Here is a haiku about underwear:\\n\\nCovering...</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>497862</td>\n      <td>[\"write a python function to upload all the fi...</td>\n      <td>[\"Sure, here's a Python function that uses the...</td>\n      <td>[\"Sure, here's an example function in Python t...</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>30192</td>\n      <td>[\"Is it morally right to try to have a certain...</td>\n      <td>[\"The question of whether it is morally right ...</td>\n      <td>[\"As an AI, I don't have personal beliefs or o...</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>933555</td>\n      <td>[\"Mary has 6 others siblings named Monday, Tue...</td>\n      <td>[\"Hello! I'm happy to help you with your quest...</td>\n      <td>[\"The last child's name is likely Saturday.\"]</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>1842252</td>\n      <td>[\"Estimate the number of dinosaur skeletons in...</td>\n      <td>[\"This is very difficult to estimate precisely...</td>\n      <td>[\"Estimating the exact number of dinosaur skel...</td>\n    </tr>\n    <tr>\n      <th>73</th>\n      <td>5069186</td>\n      <td>[\"Why are there so many weebs in computer scie...</td>\n      <td>[\"There is a common perception that many indiv...</td>\n      <td>[\"The term \\\"weeb\\\" is a derogatory slur that ...</td>\n    </tr>\n    <tr>\n      <th>33</th>\n      <td>2298796</td>\n      <td>[\"make a haiku on bacon the food\"]</td>\n      <td>[\"Crisp strips of delight,\\nSizzling dance, mo...</td>\n      <td>[\"Here is a haiku about bacon:\\n\\nSizzling in ...</td>\n    </tr>\n    <tr>\n      <th>90</th>\n      <td>6492528</td>\n      <td>[\"Which word doesn't belong?\\n\\nA.\\nApple\\n\\nB...</td>\n      <td>[\"Among the words Apple, Car, Orange and Banan...</td>\n      <td>[\"Okay, let's analyze each of the words:\\n\\nAp...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>198779</td>\n      <td>[\"What is the best way to travel from Tel-Aviv...</td>\n      <td>[\"The best way to travel from Tel Aviv to Jeru...</td>\n      <td>[\"The best way to travel from Tel-Aviv to Jeru...</td>\n    </tr>\n    <tr>\n      <th>76</th>\n      <td>5188727</td>\n      <td>[\"You are a SQL expert. \\nGiven an input quest...</td>\n      <td>[\"\\\"{\\\\n    \\\\\\\"thoughts\\\\\\\": \\\\\\\"You want to ...</td>\n      <td>[\"{\\\\n  \\\"thoughts\\\": \\\"I will provide a query...</td>\n    </tr>\n    <tr>\n      <th>77</th>\n      <td>5378146</td>\n      <td>[\"What is a Selective State Space Model?\"]</td>\n      <td>[\"A Selective State Space Model is a type of s...</td>\n      <td>[\"A Selective State Space Model (SSSM) is a ty...</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>604575</td>\n      <td>[\"was the historical jesus a socialist\",\"was h...</td>\n      <td>[\"The question of whether the historical Jesus...</td>\n      <td>[\"The historical Jesus lived in a time and pla...</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>2051408</td>\n      <td>[\"What\\u2019s the best prank to play on a frie...</td>\n      <td>[\"There are many types of pranks that can be p...</td>\n      <td>[\"It's important to remember that pranks can b...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":21},{"cell_type":"code","source":"y_train","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-18T13:06:34.655800Z","iopub.execute_input":"2025-09-18T13:06:34.656059Z","iopub.status.idle":"2025-09-18T13:06:34.674705Z","shell.execute_reply.started":"2025-09-18T13:06:34.656037Z","shell.execute_reply":"2025-09-18T13:06:34.673927Z"}},"outputs":[{"execution_count":22,"output_type":"execute_result","data":{"text/plain":"array([0, 0, 2, 0, 0, 1, 0, 1, 1, 2, 0, 2, 2, 1, 1, 1, 1, 1, 1, 0, 1, 0,\n       1, 0, 0, 1, 2, 2, 0, 0, 2, 0, 1, 2, 1, 0, 0, 2, 0, 1, 2, 1, 2, 1,\n       2, 2, 1, 2, 0, 2, 0, 2, 2, 2, 0, 2, 2, 1, 0, 2, 2, 1, 1, 2, 1, 0,\n       1, 2, 2, 1, 0, 1, 0, 0, 2, 1, 1, 2, 2, 2])"},"metadata":{}}],"execution_count":22},{"cell_type":"code","source":"catagorical_feature = [col for col in X.columns if X[col].dtype == 'object']\ncatagorical_feature","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-18T13:06:34.675440Z","iopub.execute_input":"2025-09-18T13:06:34.675646Z","iopub.status.idle":"2025-09-18T13:06:34.689793Z","shell.execute_reply.started":"2025-09-18T13:06:34.675629Z","shell.execute_reply":"2025-09-18T13:06:34.689104Z"}},"outputs":[{"execution_count":23,"output_type":"execute_result","data":{"text/plain":"['prompt', 'response_a', 'response_b']"},"metadata":{}}],"execution_count":23},{"cell_type":"code","source":"from sentence_transformers import SentenceTransformer\nfrom sklearn.base import BaseEstimator, TransformerMixin\n\nfrom sklearn.compose import ColumnTransformer\n\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.feature_selection import SelectKBest, chi2\n\n\nfrom sentence_transformers import SentenceTransformer\nimport torch","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-18T13:06:34.690519Z","iopub.execute_input":"2025-09-18T13:06:34.690755Z","iopub.status.idle":"2025-09-18T13:06:34.706069Z","shell.execute_reply.started":"2025-09-18T13:06:34.690733Z","shell.execute_reply":"2025-09-18T13:06:34.705175Z"}},"outputs":[],"execution_count":24},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras import layers, models\nfrom transformers import DebertaV2Tokenizer\nfrom sklearn.base import BaseEstimator, TransformerMixin\nimport torch\nimport numpy as np\nimport tensorflow as tf\nfrom keras_hub.src.models.deberta_v3.deberta_v3_backbone import DebertaV3Backbone\nimport os # Import os module\nimport multiprocessing\nclass HFEmbedder(BaseEstimator, TransformerMixin):\n    def __init__(self, model_path, batch_size=16, max_length=512, use_fast_tokenizer=True, enable_mixed_precision=True, embedding_type=\"mean\"):\n        self.embedding_type = embedding_type\n        self.model_path = model_path\n        self.batch_size = int(batch_size)\n        self.max_length = min(int(max_length), 512)\n        self.use_fast_tokenizer = use_fast_tokenizer\n        self.enable_mixed_precision = enable_mixed_precision # Add this line to store the parameter\n        self._cpu_count = multiprocessing.cpu_count()\n\n        # Make TF GPU usage explicit / safe\n        try:\n            gpus = tf.config.list_physical_devices(\"GPU\")\n            if gpus:\n                for g in gpus:\n                    tf.config.experimental.set_memory_growth(g, True)\n        except Exception:\n            pass\n\n        # optionally use mixed precision on GPUs (speeds up fp16 capable GPUs)\n        try:\n            if self.enable_mixed_precision: # Use self.enable_mixed_precision\n                from tensorflow.keras import mixed_precision\n                mixed_precision.set_global_policy(\"mixed_float16\")\n        except Exception:\n            pass\n\n        # Load tokenizer (prefer fast tokenizer if available)\n        try:\n            if self.use_fast_tokenizer:\n                from transformers import DebertaV2TokenizerFast as _TokFast\n                self.tokenizer = _TokFast(vocab_file=os.path.join(self.model_path, \"assets/tokenizer/vocabulary.spm\")) # Use os.path.join\n            else:\n                from transformers import DebertaV2Tokenizer as _Tok\n                self.tokenizer = _Tok(vocab_file=os.path.join(self.model_path, \"assets/tokenizer/vocabulary.spm\")) # Use os.path.join\n        except Exception:\n            # fallback to original import name/location\n            try:\n                from transformers import DebertaV2Tokenizer as _Tok\n                self.tokenizer = _Tok(vocab_file=os.path.join(self.model_path, \"assets/tokenizer/vocabulary.spm\")) # Use os.path.join\n            except Exception:\n                raise\n\n        self.tokenizer.model_max_length = self.max_length\n\n        # Load model backbone (Keras)\n        config = self._detect_model_config()\n        self.model = DebertaV3Backbone(\n            vocabulary_size=128100,\n            num_layers=config[\"num_layers\"],\n            num_heads=config[\"num_heads\"],\n            hidden_dim=config[\"hidden_dim\"],\n            intermediate_dim=config[\"intermediate_dim\"],\n            dropout=0.1,\n            max_sequence_length=512,\n            bucket_size=256\n        )\n\n\n        self.model.load_weights(os.path.join(self.model_path, \"model.weights.h5\"),skip_mismatch=True) # Use os.path.join\n\n        print(\"✅ Model input names:\", [input.name for input in self.model.inputs])\n        # optional: warm-up call with zeros to ensure TF places variables on GPU if available\n        try:\n            import tensorflow as tf\n            dummy_input = {\n                \"padding_mask\": tf.zeros((1, self.max_length), dtype=tf.int32),\n                \"token_ids\": tf.zeros((1, self.max_length), dtype=tf.int32),\n            }\n            _ = self.model(dummy_input)\n        except Exception:\n            pass\n    def _detect_model_config(self):\n            import os\n            import json\n        \n            config_path = os.path.join(self.model_path, \"config.json\")\n            if os.path.exists(config_path):\n                try:\n                    with open(config_path, \"r\") as f:\n                        config = json.load(f)\n                    return {\n                        \"num_layers\": config.get(\"num_layers\", 12),\n                        \"num_heads\": config.get(\"num_attention_heads\", 12),\n                        \"hidden_dim\": config.get(\"hidden_size\", 768),\n                        \"intermediate_dim\": config.get(\"intermediate_size\", 3072),\n                    }\n                except Exception as e:\n                    print(f\"⚠️ Failed to read config.json: {e}\")\n        \n            # Fallback: infer from folder name\n            path_lower = self.model_path.lower()\n            if \"small\" in path_lower:\n                return {\n                    \"num_layers\": 12,\n                    \"num_heads\": 6,\n                    \"hidden_dim\": 768,\n                    \"intermediate_dim\": 3072,\n                }\n            elif \"base\" in path_lower:\n                return {\n                    \"num_layers\": 12,\n                    \"num_heads\": 12,\n                    \"hidden_dim\": 768,\n                    \"intermediate_dim\": 3072,\n                }\n        \n            print(\"⚠️ Could not auto-detect model config. Using default base config.\")\n            return {\n                \"num_layers\": 12,\n                \"num_heads\": 12,\n                \"hidden_dim\": 768,\n                \"intermediate_dim\": 3072,\n            }\n\n\n    def fit(self, X, y=None):\n        return self\n\n    def transform(self, X):\n        import tensorflow as tf\n        import numpy as np\n    \n        # Accept pandas Series / DataFrame / numpy array / list\n        if hasattr(X, \"to_list\"):\n            texts = X.to_list()\n        else:\n            texts = list(X)\n    \n        def _to_text(item):\n            if isinstance(item, (list, tuple, np.ndarray)):\n                if len(item) == 0:\n                    return \"\"\n                if len(item) == 1:\n                    return str(item[0])\n                return \" \".join(str(x) for x in item)\n            return \"\" if item is None else str(item)\n    \n        texts = [_to_text(t) for t in texts]\n        n = len(texts)\n        if n == 0:\n            try:\n                hidden_dim = int(self.model.output_shape[-1])\n                return {\n                    \"raw\": np.zeros((0, self.max_length, hidden_dim), dtype=np.float32),\n                    \"mean\": np.zeros((0, hidden_dim), dtype=np.float32),\n                    \"median\": np.zeros((0, hidden_dim), dtype=np.float32),\n                    \"max\": np.zeros((0, hidden_dim), dtype=np.float32),\n                    \"min\": np.zeros((0, hidden_dim), dtype=np.float32),\n                }\n            except Exception:\n                return {}\n    \n        # Store outputs\n        raw_outputs = []\n    \n        for i in range(0, n, self.batch_size):\n            batch = texts[i:i + self.batch_size]\n            try:\n                tokens = self.tokenizer(\n                    batch,\n                    padding=\"max_length\",\n                    truncation=True,\n                    max_length=self.max_length,\n                    return_tensors=\"tf\",\n                )\n                token_ids_tf = tf.cast(tokens[\"input_ids\"], tf.int32)\n                attention_mask_tf = tf.cast(tokens[\"attention_mask\"], dtype=tf.int32)\n                model_inputs = {\"padding_mask\": attention_mask_tf, \"token_ids\": token_ids_tf}\n                outputs = self.model(model_inputs)\n                outputs_np = outputs.numpy()\n            except Exception:\n                tokens = self.tokenizer(\n                    [str(t) for t in batch],\n                    padding=\"max_length\",\n                    truncation=True,\n                    max_length=self.max_length,\n                    return_tensors=\"np\",\n                )\n                token_ids_tf = tf.convert_to_tensor(tokens[\"input_ids\"], dtype=tf.int32)\n                attention_mask_tf = tf.convert_to_tensor(tokens[\"attention_mask\"], dtype=tf.int32)\n                model_inputs = {\"padding_mask\": attention_mask_tf, \"token_ids\": token_ids_tf}\n                outputs = self.model(model_inputs)\n                outputs_np = outputs.numpy()\n    \n            raw_outputs.append(outputs_np)\n    \n        # Combine all batches\n        full_output = np.vstack(raw_outputs)  # shape: [n_samples, seq_len, hidden_dim]\n    \n        \n        mean_embeddings = np.mean(full_output, axis=1)\n        median_embeddings = np.median(full_output, axis=1)\n        max_embeddings = np.max(full_output, axis=1)\n        min_embeddings = np.min(full_output, axis=1)\n    \n        # Return per-sample dicts\n        return [\n            {       \n                \"text\": texts[i],\n                \"raw\": full_output[i],\n                \"mean\": mean_embeddings[i],\n                \"median\": median_embeddings[i],\n                \"max\": max_embeddings[i],\n                \"min\": min_embeddings[i],\n            }\n            for i in range(len(texts))\n        ]\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-18T13:06:34.706915Z","iopub.execute_input":"2025-09-18T13:06:34.707278Z","iopub.status.idle":"2025-09-18T13:06:35.635312Z","shell.execute_reply.started":"2025-09-18T13:06:34.707230Z","shell.execute_reply":"2025-09-18T13:06:35.634556Z"}},"outputs":[],"execution_count":25},{"cell_type":"code","source":"%pip install nltk ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-18T13:06:35.636061Z","iopub.execute_input":"2025-09-18T13:06:35.636307Z","iopub.status.idle":"2025-09-18T13:06:39.474134Z","shell.execute_reply.started":"2025-09-18T13:06:35.636282Z","shell.execute_reply":"2025-09-18T13:06:39.473181Z"}},"outputs":[{"name":"stdout","text":"Requirement already satisfied: nltk in /usr/local/lib/python3.11/dist-packages (3.9.1)\nRequirement already satisfied: click in /usr/local/lib/python3.11/dist-packages (from nltk) (8.2.1)\nRequirement already satisfied: joblib in /usr/local/lib/python3.11/dist-packages (from nltk) (1.5.1)\nRequirement already satisfied: regex>=2021.8.3 in /usr/local/lib/python3.11/dist-packages (from nltk) (2024.11.6)\nRequirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from nltk) (4.67.1)\nNote: you may need to restart the kernel to use updated packages.\n","output_type":"stream"}],"execution_count":26},{"cell_type":"code","source":"import re\nimport nltk\nfrom nltk.corpus import stopwords\nfrom nltk.stem import WordNetLemmatizer\n\n#nltk.download(\"stopwords\")\n#nltk.download(\"wordnet\")\n\n#stop_words = set(stopwords.words(\"english\"))\nlemmatizer = WordNetLemmatizer()\n\ndef clean_text_for_common_words(text):\n    text = text.lower()\n    text = re.sub(r'[^\\w\\s]', '', text)\n    tokens = text.split()\n    #return [lemmatizer.lemmatize(word) for word in tokens if word not in stop_words]\n    return [word for word in tokens]\n\nclass CommonWordsTransformer(BaseEstimator, TransformerMixin):\n    def __init__(self):\n        pass\n\n    def fit(self, X, y=None):\n        return self\n\n    def transform(self, X):\n        common_meaningful_words_a = []\n        common_meaningful_words_b = []\n\n        for index, row in X.iterrows():\n            prompt_tokens = clean_text_for_common_words(row['prompt'])\n            response_a_tokens = clean_text_for_common_words(row['response_a'])\n            response_b_tokens = clean_text_for_common_words(row['response_b'])\n\n            common_meaningful_a = len(set(prompt_tokens) & set(response_a_tokens))\n            common_meaningful_b = len(set(prompt_tokens) & set(response_b_tokens))\n\n            common_meaningful_words_a.append(common_meaningful_a)\n            common_meaningful_words_b.append(common_meaningful_b)\n\n        return np.array([common_meaningful_words_a, common_meaningful_words_b]).T","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-18T13:06:39.475393Z","iopub.execute_input":"2025-09-18T13:06:39.475789Z","iopub.status.idle":"2025-09-18T13:06:40.341516Z","shell.execute_reply.started":"2025-09-18T13:06:39.475753Z","shell.execute_reply":"2025-09-18T13:06:40.340757Z"}},"outputs":[],"execution_count":27},{"cell_type":"code","source":"X_train[\"prompt_clean\"] = X_train[\"prompt\"]#.apply(clean_text_for_common_words)\nX_train[\"response_a_clean\"] = X_train[\"response_a\"]#.apply(clean_text_for_common_words)\nX_train[\"response_b_clean\"] = X_train[\"response_b\"]#.apply(clean_text_for_common_words)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-18T13:06:40.342358Z","iopub.execute_input":"2025-09-18T13:06:40.342579Z","iopub.status.idle":"2025-09-18T13:06:40.348144Z","shell.execute_reply.started":"2025-09-18T13:06:40.342561Z","shell.execute_reply":"2025-09-18T13:06:40.347407Z"}},"outputs":[],"execution_count":28},{"cell_type":"code","source":"from sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.utils.validation import check_is_fitted\nfrom sklearn.metrics.pairwise import cosine_similarity\n\nclass PromptResponseSimilarity(BaseEstimator, TransformerMixin):\n    def fit(self, X, y=None):\n        return self\n\n    def transform(self, X):\n        # X is a 2D array of shape (n_samples, 3 * embedding_dim)\n        n_samples, total_dim = X.shape\n        embedding_dim = total_dim // 3\n\n        prompt_embeds = X[:, :embedding_dim]\n        resp_a_embeds = X[:, embedding_dim:2*embedding_dim]\n        resp_b_embeds = X[:, 2*embedding_dim:]\n\n        sim_a = np.array([\n            cosine_similarity(p.reshape(1, -1), a.reshape(1, -1))[0, 0]\n            for p, a in zip(prompt_embeds, resp_a_embeds)\n        ])\n        sim_b = np.array([\n            cosine_similarity(p.reshape(1, -1), b.reshape(1, -1))[0, 0]\n            for p, b in zip(prompt_embeds, resp_b_embeds)\n        ])\n\n        return np.vstack([sim_a, sim_b]).T\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-18T13:06:40.348937Z","iopub.execute_input":"2025-09-18T13:06:40.349234Z","iopub.status.idle":"2025-09-18T13:06:40.364115Z","shell.execute_reply.started":"2025-09-18T13:06:40.349217Z","shell.execute_reply":"2025-09-18T13:06:40.363442Z"}},"outputs":[],"execution_count":29},{"cell_type":"code","source":"class RawEmbeddingSimilarity(BaseEstimator, TransformerMixin):\n    def fit(self, X, y=None):\n        return self\n\n    def transform(self, X):\n        prompt_embeds = X[\"prompt_embed\"].apply(lambda x: x[\"raw\"]).tolist()\n        resp_a_embeds = X[\"resp_a_embed\"].apply(lambda x: x[\"raw\"]).tolist()\n        resp_b_embeds = X[\"resp_b_embed\"].apply(lambda x: x[\"raw\"]).tolist()\n    \n        sim_a, sim_b = [], []\n        for p, a, b in zip(prompt_embeds, resp_a_embeds, resp_b_embeds):\n            sim_a.append(cosine_similarity(p.flatten().reshape(1, -1), a.flatten().reshape(1, -1))[0, 0])\n            sim_b.append(cosine_similarity(p.flatten().reshape(1, -1), b.flatten().reshape(1, -1))[0, 0])\n    \n        return np.vstack([sim_a, sim_b]).T\n\n        \nclass AggregatedEmbeddingSimilarity(BaseEstimator, TransformerMixin):\n    def __init__(self, agg_type=\"mean\"):\n        self.agg_type = agg_type\n\n    def fit(self, X, y=None):\n        return self\n\n    \n    def transform(self, X):\n        prompt_embeds = X[\"prompt_embed\"].apply(lambda x: x[self.agg_type]).tolist()\n        resp_a_embeds = X[\"resp_a_embed\"].apply(lambda x: x[self.agg_type]).tolist()\n        resp_b_embeds = X[\"resp_b_embed\"].apply(lambda x: x[self.agg_type]).tolist()\n    \n        sim_a = [cosine_similarity(p.reshape(1, -1), a.reshape(1, -1))[0, 0] for p, a in zip(prompt_embeds, resp_a_embeds)]\n        sim_b = [cosine_similarity(p.reshape(1, -1), b.reshape(1, -1))[0, 0] for p, b in zip(prompt_embeds, resp_b_embeds)]\n    \n        return np.vstack([sim_a, sim_b]).T\n\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-18T13:06:40.364913Z","iopub.execute_input":"2025-09-18T13:06:40.365157Z","iopub.status.idle":"2025-09-18T13:06:40.382584Z","shell.execute_reply.started":"2025-09-18T13:06:40.365135Z","shell.execute_reply":"2025-09-18T13:06:40.381866Z"}},"outputs":[],"execution_count":30},{"cell_type":"code","source":"from sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nimport numpy as np\nimport pandas as pd\n\nclass TFIDFAttentionEmbedder(BaseEstimator, TransformerMixin):\n    def __init__(self, tokenizer, max_length=512, embedding_dim=768):\n        self.tokenizer = tokenizer\n        self.vectorizer = TfidfVectorizer()\n        self.max_length = max_length\n        self.embedding_dim = embedding_dim\n\n    def fit(self, X, y=None):\n        texts = []\n\n        # Extract texts from various input formats\n        if isinstance(X, (list, np.ndarray)):\n            for row in X:\n                if isinstance(row, (list, tuple)):\n                    for item in row:\n                        if isinstance(item, dict):\n                            text = item.get(\"text\", \"\")\n                            if text.strip():\n                                texts.append(text)\n                elif isinstance(row, dict):\n                    text = row.get(\"text\", \"\")\n                    if text.strip():\n                        texts.append(text)\n        elif isinstance(X, pd.DataFrame):\n            for col in X.columns:\n                col_texts = X[col].apply(lambda x: x.get(\"text\", \"\") if isinstance(x, dict) else \"\").tolist()\n                texts.extend([t for t in col_texts if t.strip()])\n\n        if not texts:\n            raise ValueError(\"No valid texts found for TF-IDF fitting.\")\n\n        self.vectorizer.fit(texts)\n        return self\n\n    def transform(self, X):\n        weighted_embeddings_mean = []\n        weighted_embeddings_median = []\n    \n        for sample in X:\n            # If sample is a dict (expected format), extract fields\n            if isinstance(sample, dict):\n                text = sample.get(\"text\", \"\")\n                token_embeddings = sample.get(\"raw\", None)\n            else:\n                # Fallback: treat sample as plain text or unsupported format\n                text = str(sample)\n                token_embeddings = None\n    \n            # Handle empty or invalid cases\n            if token_embeddings is None or len(text.strip()) == 0:\n                zero_vec = np.zeros(self.embedding_dim)\n                weighted_embeddings_mean.append(zero_vec)\n                weighted_embeddings_median.append(zero_vec)\n                continue\n    \n            tokens = self.tokenizer.tokenize(text)\n            tfidf_vector = self.vectorizer.transform([text]).toarray()[0]\n    \n            token_weights = []\n            for token in tokens[:self.max_length]:\n                idx = self.vectorizer.vocabulary_.get(token.lower(), None)\n                token_weights.append(tfidf_vector[idx] if idx is not None else 0.0)\n    \n            token_weights = np.array(token_weights)\n            token_embeddings = token_embeddings[:len(token_weights)]\n    \n            if token_weights.sum() > 0:\n                token_weights = token_weights / token_weights.sum()\n    \n            if token_weights.sum() == 0 or token_embeddings.shape[0] == 0:\n                zero_vec = np.zeros(token_embeddings.shape[-1])\n                weighted_embeddings_mean.append(zero_vec)\n                weighted_embeddings_median.append(zero_vec)\n            else:\n                # Calculate weighted mean\n                weighted_mean = np.average(token_embeddings, axis=0, weights=token_weights)\n                weighted_embeddings_mean.append(weighted_mean)\n                \n                # Calculate weighted median\n                # For each dimension, sort values and find the weighted median\n                weighted_median = np.zeros(token_embeddings.shape[1])\n                for dim in range(token_embeddings.shape[1]):\n                    dim_values = token_embeddings[:, dim]\n                    sorted_indices = np.argsort(dim_values)\n                    sorted_weights = token_weights[sorted_indices]\n                    cumsum_weights = np.cumsum(sorted_weights)\n                    median_idx = np.searchsorted(cumsum_weights, 0.5 * cumsum_weights[-1])\n                    weighted_median[dim] = dim_values[sorted_indices[median_idx]]\n                weighted_embeddings_median.append(weighted_median)\n    \n        # Stack and return both mean and median embeddings side by side\n        return np.hstack([\n            np.array(weighted_embeddings_mean),\n            np.array(weighted_embeddings_median)\n        ])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-18T13:06:40.383432Z","iopub.execute_input":"2025-09-18T13:06:40.383703Z","iopub.status.idle":"2025-09-18T13:06:40.409755Z","shell.execute_reply.started":"2025-09-18T13:06:40.383679Z","shell.execute_reply":"2025-09-18T13:06:40.409038Z"}},"outputs":[],"execution_count":31},{"cell_type":"code","source":"embedder = HFEmbedder(model_path=\"/kaggle/input/deberta_v3/keras/deberta_v3_base_en/3\")\n#/kaggle/input/deberta_v3/keras/deberta_v3_base_en/3\ncommon_words_transformer = CommonWordsTransformer()\n# Updated preprocessing transformer\npreprocessing = ColumnTransformer([\n    (\"prompt_embed\", embedder, \"prompt_clean\"),\n    (\"resp_a_embed\", embedder, \"response_a_clean\"),\n    (\"resp_b_embed\", embedder, \"response_b_clean\"),\n    (\"common_words\", common_words_transformer, [\"prompt\", \"response_a\", \"response_b\"]),\n    #(\"num\", \"passthrough\", [\"id\"])\n])\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-18T13:06:40.410487Z","iopub.execute_input":"2025-09-18T13:06:40.410818Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/transformers/convert_slow_tokenizer.py:564: UserWarning: The sentencepiece tokenizer that you are converting to a fast tokenizer uses the byte fallback option which is not implemented in the fast tokenizers. In practice this means that the fast version of the tokenizer can produce unknown tokens whereas the sentencepiece version would have converted these unknown tokens into a sequence of byte tokens matching the original piece of text.\n  warnings.warn(\nI0000 00:00:1758200802.639939      36 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n","output_type":"stream"}],"execution_count":null},{"cell_type":"code","source":"from sklearn.pipeline import Pipeline, FeatureUnion\nfrom sklearn.compose import ColumnTransformer\n\n# Embedding + similarity pipeline\nembedding_pipeline = Pipeline([\n    (\"embed_cols\", ColumnTransformer([\n        (\"prompt_embed\", embedder, \"prompt_clean\"),\n        (\"resp_a_embed\", embedder, \"response_a_clean\"),\n        (\"resp_b_embed\", embedder, \"response_b_clean\"),\n    ])),\n    (\"similarity\", PromptResponseSimilarity())\n])\n\n# Final preprocessing pipeline\npreprocessing = FeatureUnion([\n    (\"embedding_similarity\", embedding_pipeline),\n    (\"common_words\", ColumnTransformer([\n        (\"common_words\", common_words_transformer, [\"prompt\", \"response_a\", \"response_b\"])\n    ]))\n])\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"class DictWrapper(BaseEstimator, TransformerMixin):\n    def __init__(self, embedder):\n        self.embedder = embedder\n\n    def fit(self, X, y=None):\n        return self\n\n    def transform(self, X):\n        # Returns a 2D array of shape (n_samples, 1), each cell is a dict\n        embeddings = self.embedder.transform(X)\n        return np.array(embeddings).reshape(-1, 1)\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"class EmbeddingStatsExtractor(BaseEstimator, TransformerMixin):\n    def __init__(self, fields=(\"mean\", \"median\", \"max\", \"min\")):\n        self.fields = fields\n\n    def fit(self, X, y=None):\n        return self\n\n    def transform(self, X):\n        features = []\n        for row in X:\n            row_features = []\n            for field in self.fields:\n                vec = row.get(field, np.zeros(768))  # fallback to zeros if missing\n                row_features.extend(vec)\n            features.append(row_features)\n        return np.array(features)\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.pipeline import Pipeline, FeatureUnion\nfrom sklearn.compose import ColumnTransformer\nimport numpy as np\n\n# Initialize the shared embedder\nshared_embedder = HFEmbedder(model_path=\"/kaggle/input/deberta_v3/keras/deberta_v3_base_en/3\")\n\n# Step 1: Get embeddings for each text column\nembedding_stage = ColumnTransformer([\n    (\"prompt_embed\", DictWrapper(shared_embedder), \"prompt_clean\"),\n    (\"resp_a_embed\", DictWrapper(shared_embedder), \"response_a_clean\"),\n    (\"resp_b_embed\", DictWrapper(shared_embedder), \"response_b_clean\"),\n])\n\n# Fit and transform the embeddings\nprint(\"Step 1: Generating embeddings...\")\nembedded_data = embedding_stage.fit_transform(X_train)\nprint(f\"Embedding shape: {embedded_data.shape}\")\n\n# Convert to DataFrame for easier handling\nembedded_df = pd.DataFrame([\n    {\n        \"prompt_embed\": x[0],\n        \"resp_a_embed\": x[1],\n        \"resp_b_embed\": x[2]\n    } for x in embedded_data\n])\nprint(\"\\nEmbedded DataFrame columns:\", embedded_df.columns.tolist())\nprint(\"First row prompt embedding keys:\", embedded_df[\"prompt_embed\"].iloc[0].keys())","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Step 2: Extract statistics from embeddings\nprint(\"\\nStep 2: Extracting embedding statistics...\")\n\n# Process each type of embedding separately\nprompt_stats = EmbeddingStatsExtractor().fit_transform(embedded_df[\"prompt_embed\"])\nresp_a_stats = EmbeddingStatsExtractor().fit_transform(embedded_df[\"resp_a_embed\"])\nresp_b_stats = EmbeddingStatsExtractor().fit_transform(embedded_df[\"resp_b_embed\"])\n\nprint(f\"Prompt stats shape: {prompt_stats.shape}\")\nprint(f\"Response A stats shape: {resp_a_stats.shape}\")\nprint(f\"Response B stats shape: {resp_b_stats.shape}\")","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"embedded_df[\"prompt_embed\"]","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Step 3: Calculate similarities\nprint(\"\\nStep 3: Calculating similarities...\")\n\n# Raw embedding similarity\nraw_sim = RawEmbeddingSimilarity().fit_transform(embedded_df)\nprint(f\"Raw similarity shape: {raw_sim.shape}\")\n\n# Mean and median similarities\nmean_sim = AggregatedEmbeddingSimilarity(agg_type=\"mean\").fit_transform(embedded_df)\nmedian_sim = AggregatedEmbeddingSimilarity(agg_type=\"median\").fit_transform(embedded_df)\n\nprint(f\"Mean similarity shape: {mean_sim.shape}\")\nprint(f\"Median similarity shape: {median_sim.shape}\")","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Step 4: TF-IDF attention\nprint(\"\\nStep 4: Computing TF-IDF attention...\")\n\n# Create and fit TF-IDF embedders\ntfidf_prompt = TFIDFAttentionEmbedder(tokenizer=shared_embedder.tokenizer)\ntfidf_resp_a = TFIDFAttentionEmbedder(tokenizer=shared_embedder.tokenizer)\ntfidf_resp_b = TFIDFAttentionEmbedder(tokenizer=shared_embedder.tokenizer)\n\n# Transform each column\nprompt_tfidf = tfidf_prompt.fit_transform([{'text': x['text'], 'raw': x['raw']} for x in embedded_df['prompt_embed']])\nresp_a_tfidf = tfidf_resp_a.fit_transform([{'text': x['text'], 'raw': x['raw']} for x in embedded_df['resp_a_embed']])\nresp_b_tfidf = tfidf_resp_b.fit_transform([{'text': x['text'], 'raw': x['raw']} for x in embedded_df['resp_b_embed']])\n\nprint(f\"Prompt TF-IDF shape: {prompt_tfidf.shape}\")\nprint(f\"Response A TF-IDF shape: {resp_a_tfidf.shape}\")\nprint(f\"Response B TF-IDF shape: {resp_b_tfidf.shape}\")","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Step 5: Common words features\nprint(\"\\nStep 5: Computing common words features...\")\n\ncommon_words_features = common_words_transformer.fit_transform(X_train)\nprint(f\"Common words features shape: {common_words_features.shape}\")\n\n# Step 6: Combine all features\nprint(\"\\nStep 6: Combining all features...\")\n\n# Convert numpy arrays to sparse matrices if needed\nfrom scipy.sparse import csr_matrix, hstack\n\ndef ensure_sparse(x, dtype=np.float32):\n    if x is None:\n        return None\n    # Convert to numpy array first with consistent dtype\n    if not isinstance(x, (csr_matrix, np.ndarray)):\n        x = np.array(x, dtype=dtype)\n    elif isinstance(x, np.ndarray):\n        x = x.astype(dtype)\n    \n    # If already sparse, ensure correct dtype\n    if isinstance(x, csr_matrix):\n        return x.astype(dtype)\n    \n    # Convert to sparse\n    return csr_matrix(x)\n\n# Print shapes and dtypes before conversion\nprint(\"\\nFeature shapes and types before conversion:\")\nfeatures = [\n    #(\"prompt_stats\", prompt_stats),\n    #(\"resp_a_stats\", resp_a_stats),\n    #(\"resp_b_stats\", resp_b_stats),\n    (\"raw_sim\", raw_sim),\n    (\"mean_sim\", mean_sim),\n    (\"median_sim\", median_sim),\n    (\"prompt_tfidf\", prompt_tfidf),\n    (\"resp_a_tfidf\", resp_a_tfidf),\n    (\"resp_b_tfidf\", resp_b_tfidf),\n    (\"common_words\", common_words_features)\n]\n\nfor name, feat in features:\n    if feat is not None:\n        print(f\"{name}: shape={feat.shape}, dtype={feat.dtype}\")\n\n# Convert each feature set to sparse format with consistent dtype\nfeatures_to_stack = []\nfor name, feat in features:\n    if feat is not None:\n        sparse_feat = ensure_sparse(feat)\n        features_to_stack.append(sparse_feat)\n        print(f\"Converted {name}: shape={sparse_feat.shape}, dtype={sparse_feat.dtype}\")\n\n# Print shapes before stacking\nprint(\"\\nFeature shapes before stacking:\")\nfor i, feat in enumerate(features_to_stack):\n    print(f\"Feature {i} shape: {feat.shape}\")\n\n# Combine all the feature matrices\nfinal_features = hstack(features_to_stack)\n\nprint(f\"\\nFinal combined features shape: {final_features.shape}\")\n\n# Convert to DataFrame and save\nX_final = pd.DataFrame(final_features.toarray())\nX_final.to_csv(\"X_final_step_by_step.csv\", index=False)\nprint(\"\\nFeatures saved to 'X_final_step_by_step.csv'\")","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#feature_selection = SelectKBest(score_func = chi2, k=6)\nfrom sklearn.feature_selection import SelectKBest, f_classif\n\nfeature_selection = SelectKBest(score_func=f_classif, k=6)\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"model = XGBClassifier(\n    objective=\"multi:softprob\",  \n    num_class=3,                  \n    eval_metric=\"mlogloss\",       \n    n_estimators=300,\n    learning_rate=0.1,\n    max_depth=6,\n    random_state=42\n)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X_final=pd.read_csv(\"X_final_step_by_step.csv\")\ny_final=y_train","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X_final","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.model_selection import cross_val_score\n\nscores = cross_val_score(model, X_final, y_final, cv=3, scoring=\"accuracy\")\nprint(\"Cross-validated Accuracy:\", scores.mean())\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"model.fit(X_final, y_final)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df_test[\"prompt_clean\"] = df_test[\"prompt\"].apply(clean_text_for_common_words)\ndf_test[\"response_a_clean\"] = df_test[\"response_a\"].apply(clean_text_for_common_words)\ndf_test[\"response_b_clean\"] = df_test[\"response_b\"].apply(clean_text_for_common_words)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}